<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li Kun</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-22T05:35:50.363Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Leo Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test_ima</title>
    <link href="http://example.com/2023/09/22/test-ima/"/>
    <id>http://example.com/2023/09/22/test-ima/</id>
    <published>2023-09-22T05:34:02.000Z</published>
    <updated>2023-09-22T05:35:50.363Z</updated>
    
    <content type="html"><![CDATA[<p>！<a href="108879310_p0_square1200.jpg">test</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;！&lt;a href=&quot;108879310_p0_square1200.jpg&quot;&gt;test&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AI_course</title>
    <link href="http://example.com/2023/09/22/AI-course/"/>
    <id>http://example.com/2023/09/22/AI-course/</id>
    <published>2023-09-22T05:13:52.502Z</published>
    <updated>2023-09-22T05:13:52.502Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://example.com/2023/09/19/hexo/"/>
    <id>http://example.com/2023/09/19/hexo/</id>
    <published>2023-09-19T14:07:33.009Z</published>
    <updated>2023-09-22T05:11:48.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution-and-methods"><a href="#solution-and-methods" class="headerlink" title="solution and methods"></a>solution and methods</h2><p>###draft</p><pre><code>hexo new draft newpagehexo server --drafthexo publish draft newpage</code></pre><p>中文乱码问题：改zh-CN,改utf-8.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solution-and-methods&quot;&gt;&lt;a href=&quot;#solution-and-methods&quot; class=&quot;headerlink&quot; title=&quot;solution and methods&quot;&gt;&lt;/a&gt;solution and methods&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javaScript的学习笔记</title>
    <link href="http://example.com/2023/09/19/javaScript/"/>
    <id>http://example.com/2023/09/19/javaScript/</id>
    <published>2023-09-19T14:04:47.000Z</published>
    <updated>2023-09-22T05:11:46.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p><a href="https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142%5Ev94%5EchatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187">参考来源</a></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="1-5、JavaScript的输出"><a href="#1-5、JavaScript的输出" class="headerlink" title="1.5、JavaScript的输出"></a>1.5、JavaScript的输出</h4><p>页面输出</p><pre><code class="codes">&lt;script&gt;    document.write(&quot;Hello,World!&quot;);&lt;/script&gt;</code></pre><p>控制台输出*注意：页面按F12弹出控制台*\</p><pre><code class="codes">&lt;script&gt;    console.log(&quot;输出一条日志&quot;);//最常用    console.info(&quot;输出一条信息&quot;);    console.warn(&quot;输出一条警告&quot;);    console.error(&quot;输出一条错误&quot;);&lt;/script&gt;</code></pre><p>弹出窗口输出</p><pre><code class="codes">&lt;script&gt;    alert(&quot;Hello,World!&quot;);&lt;/script&gt;</code></pre><h4 id="2-11-6、嵌套函数"><a href="#2-11-6、嵌套函数" class="headerlink" title="2.11.6、嵌套函数"></a>2.11.6、嵌套函数</h4><p>嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。</p><pre><code>function fu() &#123;    function zi() &#123;        console.log(&quot;我是儿子&quot;)    &#125;    zi();&#125;fu();</code></pre><h4 id="2-11-8、立即执行函数"><a href="#2-11-8、立即执行函数" class="headerlink" title="2.11.8、立即执行函数"></a>2.11.8、立即执行函数</h4><pre><code>(function () &#123;    alert(&quot;我是一个匿名函数&quot;);&#125;)();</code></pre><h4 id="2-12-2、用构造函数创建对象"><a href="#2-12-2、用构造函数创建对象" class="headerlink" title="2.12.2、用构造函数创建对象"></a>2.12.2、用构造函数创建对象</h4><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;    // 设置对象的方法    this.sayName = function () &#123;        console.log(this.name);    &#125;;&#125;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);console.log(person1);console.log(person2);console.log(person3);</code></pre><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>当以函数的形式调用时，this是window<br>当以方法的形式调用时，谁调用方法this就是谁<br>当以构造函数的形式调用时，this就是新创建的那个对象</p><h4 id="2-12-3、原型"><a href="#2-12-3、原型" class="headerlink" title="2.12.3、原型"></a>2.12.3、原型</h4><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;    // 设置对象的方法    this.sayName = sayName&#125;// 抽取方法为全局函数function sayName() &#123;    console.log(this.name);&#125;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);person1.sayName();person2.sayName();person3.sayName();</code></pre><p>但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。</p><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;&#125;// 在Person类的原型对象中添加方法Person.prototype.sayName = function() &#123;    console.log(this.name);&#125;;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);person1.sayName();person2.sayName();person3.sayName();</code></pre><p>我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p><h4 id="2-12-7、对象继承"><a href="#2-12-7、对象继承" class="headerlink" title="2.12.7、对象继承"></a>2.12.7、对象继承</h4><p>JavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：</p><p>原型链继承<br>借用构造函数继承<br>组合继承（重要）</p><h5 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h5><pre><code class="//">function SupperType() &#123;    this.supProp = &#39;Supper property&#39;;&#125;// 给父类型的原型添加方法SupperType.prototype.showSupperProp = function () &#123;    console.log(this.supProp);&#125;;// 定义子类型的构造函数function SubType() &#123;    this.subProp = &#39;Sub property&#39;;&#125;// 创建父类型的对象赋值给子类型的原型SubType.prototype = new SupperType();// 将子类型原型的构造属性设置为子类型SubType.prototype.constructor = SubType;// 给子类型原型添加方法SubType.prototype.showSubProp = function () &#123;    console.log(this.subProp)&#125;;// 创建子类型的对象: 可以调用父类型的方法var subType = new SubType();subType.showSupperProp();subType.showSubProp();</code></pre><h5 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h5><pre><code>// 定义父类型构造函数function SuperType(name) &#123;    this.name = name;    this.showSupperName = function () &#123;        console.log(this.name);    &#125;;&#125;// 定义子类型的构造函数function SubType(name, age) &#123;    // 在子类型中调用call方法继承自SuperType    SuperType.call(this, name);    this.age = age;&#125;// 给子类型的原型添加方法SubType.prototype.showSubName = function () &#123;    console.log(this.name);&#125;;// 创建子类型的对象然后调用var subType = new SubType(&quot;孙悟空&quot;, 20);subType.showSupperName();subType.showSubName();console.log(subType.name);console.log(subType.age);</code></pre><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><pre><code>function Person(name, age) &#123;    this.name = name;    this.age = age;&#125;Person.prototype.setName = function (name) &#123;    this.name = name;&#125;;function Student(name, age, price) &#123;    Person.call(this, name, age); // 为了得到父类型的实例属性和方法    this.price = price; // 添加子类型私有的属性&#125;Student.prototype = new Person(); // 为了得到父类型的原型属性和方法Student.prototype.constructor = Student; // 修正constructor属性指向Student.prototype.setPrice = function (price) &#123; // 添加子类型私有的方法     this.price = price;&#125;;var s = new Student(&quot;孙悟空&quot;, 24, 15000);console.log(s.name, s.age, s.price);s.setName(&quot;猪八戒&quot;);s.setPrice(16000);console.log(s.name, s.age, s.price);</code></pre><h4 id="2-12-8、垃圾回收"><a href="#2-12-8、垃圾回收" class="headerlink" title="2.12.8、垃圾回收"></a>2.12.8、垃圾回收</h4><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;&#125;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);person1 = null;person2 = null;person3 = null;</code></pre><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><pre><code>var arr = [1, &quot;2&quot;, 3, &quot;4&quot;, 5, &quot;6&quot;, 7, &quot;8&quot;, 9];</code></pre><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><p>push()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.push(&quot;唐僧&quot;, &quot;蜘蛛精&quot;, &quot;白骨精&quot;, &quot;玉兔精&quot;);console.log(arr);console.log(result);</code></pre><p>pop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.pop();console.log(arr);console.log(result);</code></pre><p>unshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.unshift(&quot;牛魔王&quot;, &quot;二郎神&quot;);console.log(arr);console.log(result);</code></pre><p>shift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.shift();console.log(arr);console.log(result);</code></pre><p>forEach()方法演示：该方法可以用来遍历数组<br>浏览器会在回调函数中传递三个参数：</p><p>第一个参数：就是当前正在遍历的元素<br>第二个参数：就是当前正在遍历的元素的索引<br>第三个参数：就是正在遍历的数组</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];arr.forEach(function (value, index, obj) &#123;    console.log(value + &quot; #### &quot; + index + &quot; #### &quot; + obj);&#125;);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png" alt="result"><br>slice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;, &quot;唐僧&quot;, &quot;白骨精&quot;];var result = arr.slice(1, 4);console.log(result);result = arr.slice(3);console.log(result);result = arr.slice(1, -2);console.log(result);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png" alt="result"><br>splice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p><p>参数：</p><p>第一个参数：表示开始位置的索引<br>第二个参数：表示要删除的元素数量<br>第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;, &quot;唐僧&quot;, &quot;白骨精&quot;];var result = arr.splice(3, 2);console.log(arr);console.log(result);result = arr.splice(1, 0, &quot;牛魔王&quot;, &quot;铁扇公主&quot;, &quot;红孩儿&quot;);console.log(arr);console.log(result);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png" alt="result"><br>concat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var arr2 = [&quot;白骨精&quot;, &quot;玉兔精&quot;, &quot;蜘蛛精&quot;];var arr3 = [&quot;二郎神&quot;, &quot;太上老君&quot;, &quot;玉皇大帝&quot;];var result = arr.concat(arr2, arr3, &quot;牛魔王&quot;, &quot;铁扇公主&quot;);console.log(result);</code></pre><p>join()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.join(&quot;@-@&quot;);console.log(result);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png" alt="result"><br>reverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];arr.reverse();console.log(arr);</code></pre><p>sort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_38490457/article/details</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>testpage</title>
    <link href="http://example.com/2023/09/19/testpage/"/>
    <id>http://example.com/2023/09/19/testpage/</id>
    <published>2023-09-19T13:58:20.420Z</published>
    <updated>2023-09-19T13:58:51.335Z</updated>
    
    <content type="html"><![CDATA[<p>���Ĳ���</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;���Ĳ���&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/08/31/hello-world/"/>
    <id>http://example.com/2023/08/31/hello-world/</id>
    <published>2023-08-31T02:43:12.894Z</published>
    <updated>2023-09-22T02:30:18.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/">教学</a><br><img src="https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg" alt="鸡鸡女王"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%</summary>
      
    
    
    
    
  </entry>
  
</feed>
