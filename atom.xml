<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li Kun</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-29T03:11:50.271Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Leo Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nowcoder</title>
    <link href="http://example.com/2023/10/25/nowcoder/"/>
    <id>http://example.com/2023/10/25/nowcoder/</id>
    <published>2023-10-25T05:30:37.000Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>先搞c输入输出（速度快），学java或者python的大数</p><h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//基本的加减法</span><br><span class="hljs-comment">//数倒着写，然后用函数再反过来，倒着写的好处是进位可以直接加在后面</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s1,s2;<span class="hljs-comment">//竞赛多追求速度，写成全局变量不写含参函数可以提高代码运行速度</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>],c[<span class="hljs-number">1000</span>];<br><span class="hljs-comment">/*void fanzhuan(string s1)&#123;</span><br><span class="hljs-comment">    int l = s1.length();</span><br><span class="hljs-comment">    for(int i = 0,j = l-1; i &lt; j;i++,j--)&#123;</span><br><span class="hljs-comment">        swap(s[i],s[j]);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span> <span class="hljs-comment">//手动反转可以被reverse代替</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">jiafa</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<span class="hljs-comment">//给数组赋初值，这样严谨。不是只能0，-1，主要是这B 8 位一赋值，转成32位可能不一样，有的时候会赋0x7f（0111111101111111111111，很接近int的最大值，不用0xff是因为1111111111111111111是负数，但是0x7f在进行加法的时候容易变成负数，所以最常用的是0x3f 00111111100111111111111，这是个很大的值。</span><br>    <span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(b));<br>    <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(c));<br>    <span class="hljs-type">int</span> l1 = s1.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> l2 = s2.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-comment">//int l = max(s1,s2);//如果l1,l2长度不一致就GG了，所以就不传参了，直接三个数组存。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;l1;i++)<br>        a[i] = s1[i] -<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//这样可以直接用减去0的asccl码的办法把S1从string 变成int.</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt;l2;i++)<br>        b[i] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span> l = <span class="hljs-built_in">max</span>(l1,l2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;l;i++)&#123;<br>        c[i] += a[i]+b[i];<br>        <span class="hljs-keyword">if</span>(c[i] &gt;= <span class="hljs-number">10</span>)&#123;<br>            c[i+<span class="hljs-number">1</span>] = c[i]/<span class="hljs-number">10</span>;   <span class="hljs-comment">//进位</span><br>            c[i] %= <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(c[l]!= <span class="hljs-number">0</span>)<br>        l++;           <span class="hljs-comment">//进位后数组变长</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;l;i++)<br>        cout&lt;&lt;c[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>    cin&gt;&gt;s1&gt;&gt;s2;<span class="hljs-comment">//检测空格</span><br>    <span class="hljs-comment">//getline();//可以存在空格</span><br>    <span class="hljs-built_in">reverse</span>(s1.<span class="hljs-built_in">begin</span>(), s1.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(), s2.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">jiafa</span>();<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//基本的减法<br><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> namespace std;<br>string s1,s2;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>],c[<span class="hljs-number">1000</span>];<br><span class="hljs-type">bool</span> judge(string s1, string s2)&#123;<br>    <span class="hljs-type">int</span> l1 = s1.length();<br>    <span class="hljs-type">int</span> l2 = s2.length();<br>    <span class="hljs-keyword">if</span>(l1&gt;l2) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(l1&lt;l2) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l1 <span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i<span class="hljs-comment">--)&#123;</span><br>        <span class="hljs-keyword">if</span>(s1[i] &gt; s2[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(s1[i] &lt; s2[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">void</span> jian(string s1,string s2)&#123;<br>    memset(a,<span class="hljs-number">0</span>,sizeof(a));//给数组赋初值，这样严谨<br>    memset(b,<span class="hljs-number">0</span>,sizeof(b));<br>    memset(c,<span class="hljs-number">0</span>,sizeof(c));<br>    <span class="hljs-type">int</span> l1 = s1.length();<br>    <span class="hljs-type">int</span> l2 = s2.length();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;l2;i++)<br>        b[i] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span> l =max(l1,l2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;l;i++)&#123;<br>        c[i] += a[i] - b[i];<br>        <span class="hljs-keyword">if</span>(c[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            c[i]+= <span class="hljs-number">10</span>;<br>            c[i+<span class="hljs-number">1</span>]-=<span class="hljs-number">1</span>;//减不够，借一位。<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(l&gt;<span class="hljs-number">1</span> &amp;&amp; c[l<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span>)l<span class="hljs-comment">--; //去掉前面的0，减成0可能有很多，用while,而且不能减没了</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>;i<span class="hljs-comment">--)&#123;</span><br>        cout&lt;&lt;c[i];<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> main()&#123;<br>    cin &gt;&gt;s1&gt;&gt;s2;<br>    reverse(s1.<span class="hljs-keyword">begin</span>(), s1.<span class="hljs-keyword">end</span>());<br>    reverse(s2.<span class="hljs-keyword">begin</span>(), s2.<span class="hljs-keyword">end</span>());<br>    <span class="hljs-keyword">if</span>(judge(s1,s2) == <span class="hljs-number">1</span>) jian(s1,s2);<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;&quot;-&quot;;<br>        jian(s2,s1);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs prolog">void cheng(string s1,string s2)&#123;<br>    memset(a,<span class="hljs-number">0</span>,sizeof(a));<br>    memset(b,<span class="hljs-number">0</span>,sizeof(b));<br>    memset(c,<span class="hljs-number">0</span>,sizeof(c));<br>    int l1 = s1.length();<br>    int l2 = s2.length();<br>    for(int i=<span class="hljs-number">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    for(int i =<span class="hljs-number">0</span>;i&lt;l2;i++)<br>        b[i] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    int l = l1+l2<span class="hljs-number">-1</span>;<br>    for(int i = <span class="hljs-number">0</span>;i &lt;l1; i++)<br>    for(int j =<span class="hljs-number">0</span>;j&lt;l2;j++)&#123;<br>        c[i+j] +=a[i] * b[j];<br>    &#125;<br>    for(int i =<span class="hljs-number">0</span>;i &lt;l;i++)&#123;<br>        if(c[i] &gt;= <span class="hljs-number">10</span>)<br>        &#123;<br>            c[i+<span class="hljs-number">1</span>] += c[i] /<span class="hljs-number">10</span>;//进位<br>            c[i]  <span class="hljs-comment">%=10;</span><br>        &#125;<br>    &#125;<br>    while(c[l] &gt;<span class="hljs-number">0</span>)&#123;<br>        l++;<br>        if(c[l] &gt;= <span class="hljs-number">10</span>)&#123;<br>            c[l+<span class="hljs-number">1</span>] += c[l]/<span class="hljs-number">10</span>;//可能l不够了<br>            c[l] <span class="hljs-comment">%=10;</span><br>        &#125;<br>    &#125;<br>    for(int i = l<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        cout&lt;&lt;c[i];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chu1</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s1,<span class="hljs-built_in">int</span> x</span>)</span>&#123;<br>    memset(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));<br>    memset(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(c));<br>    <span class="hljs-built_in">int</span> l1 = s1.length();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-built_in">int</span> yu =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;l1;i++)&#123;<br>        <span class="hljs-built_in">int</span> b =yu*<span class="hljs-number">10</span> +a[i];<span class="hljs-comment">//b:被除数</span><br>        c[i] = b/x;<br>        yu =b % x;<br>    &#125;<br>    <span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c[i] ==<span class="hljs-number">0</span>)i++;<br>    <span class="hljs-keyword">for</span>(;i&lt; l1;i++)<br>        cout&lt;&lt;c[i];<br>    cout&lt;&lt;endl&lt;&lt;yu;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span>&#123;<br>    <span class="hljs-built_in">int</span> x;<br>    cin &gt;&gt;s1&gt;&gt;x;<br>    chu1(s1,x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>##1ku<br>###鸡兔同笼</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span><span class="hljs-comment">//塞瓦维斯特定理(不定方程)</span></span><br><span class="hljs-comment">//若两数a,b均大于1，且gcd(a,b)等于1（也就是a,b互为素数）。</span><br><span class="hljs-comment">//要满足ax+by=c无整数解的最大的c的值为a*b-a-b。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> n, m,k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);<br>    k= n * m - n - m ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>stl</title>
    <link href="http://example.com/2023/10/19/stl/"/>
    <id>http://example.com/2023/10/19/stl/</id>
    <published>2023-10-19T03:24:26.000Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="title-stl-learncover-OIP-jpegtags"><a href="#title-stl-learncover-OIP-jpegtags" class="headerlink" title="title: stl_learncover: OIP.jpegtags:"></a>title: stl_learn<br>cover: OIP.jpeg<br>tags:</h2><p>##stl fundemental</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 动态数组">int *p = new int[n]<br></code></pre></td></tr></table></figure><p>加大储存空间：<br>1.新申请一个较大的内存空间，即执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> * <span class="hljs-keyword">temp</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[m];<br></code></pre></td></tr></table></figure><p>2.将原内存空间的数据全部复制到新申请的内存空间中，即执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">memecpy(temp, p, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">int</span>)*n);<br></code></pre></td></tr></table></figure><p>3.将原来的堆空间释放，即执行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">delete</span> [] p; <span class="hljs-attribute">p</span> = temp;<br></code></pre></td></tr></table></figure><p>当采用stl向量模板类vector实现以上功能：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">vector &lt;int&gt; a; <span class="hljs-regexp">//</span>定义 a 数组，当前数组长度为 <span class="hljs-number">0</span>，但和普通数组不同的是，此数组 a 可以根据存储数据的数量自动变长。<br><span class="hljs-regexp">//</span>向数组 a 中添加 <span class="hljs-number">10</span> 个元素<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++)<br>    a.push_back(i)<br><span class="hljs-regexp">//</span>还可以手动调整数组 a 的大小<br>a.resize(<span class="hljs-number">100</span>);<br>a[<span class="hljs-number">90</span>] = <span class="hljs-number">100</span>;<br><span class="hljs-regexp">//</span>还可以直接删除数组 a 中所有的元素，此时 a 的长度变为 <span class="hljs-number">0</span><br>a.clear();<br><span class="hljs-regexp">//</span>重新调整 a 的大小为 <span class="hljs-number">20</span>，并存储 <span class="hljs-number">20</span> 个 -<span class="hljs-number">1</span> 元素。<br>a.resize(<span class="hljs-number">20</span>, -<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。<br>size( ) 函数显示向量的大小。<br>begin( ) 函数返回一个指向向量开头的迭代器。<br>end( ) 函数返回一个指向向量末尾的迭代器。<br>###泛型</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">T</span> maxt<span class="hljs-punctuation">(</span><span class="hljs-built_in">T</span> x<span class="hljs-punctuation">,</span> <span class="hljs-built_in">T</span> y<span class="hljs-punctuation">)</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-built_in">return</span> <span class="hljs-punctuation">(</span>x<span class="hljs-operator">&gt;</span>y<span class="hljs-punctuation">)</span><span class="hljs-operator">?</span>x <span class="hljs-operator">:</span>y;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>T 是占位符，为泛型<br>##vector</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#define _CRT_SECURE_NO_WARNINGS<br>#<span class="hljs-keyword">include</span>&lt;iostream&gt;<br>#<span class="hljs-keyword">include</span>&lt;vector&gt;<br>#<span class="hljs-keyword">include</span>&lt;algorithm&gt;<br>using namespace std;<br> <br><span class="hljs-comment">//STL 中的容器 算法 迭代器</span><br>void test01<span class="hljs-literal">()</span><br>&#123;<br>    vector&lt;<span class="hljs-built_in">int</span>&gt; v; <span class="hljs-comment">//STL 中的标准容器之一 ：动态数组</span><br>    v.push<span class="hljs-constructor">_back(1)</span>; <span class="hljs-comment">//vector 容器提供的插入数据的方法</span><br>    v.push<span class="hljs-constructor">_back(5)</span>;<br>    v.push<span class="hljs-constructor">_back(3)</span>;<br>    v.push<span class="hljs-constructor">_back(7)</span>;<br>    <span class="hljs-comment">//迭代器</span><br>    vector&lt;<span class="hljs-built_in">int</span>&gt;::iterator pStart = v.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; <span class="hljs-comment">//vector 容器提供了 begin()方法 返回指向第一个元素的迭代器</span><br>    vector&lt;<span class="hljs-built_in">int</span>&gt;::iterator pEnd = v.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>; <span class="hljs-comment">//vector 容器提供了 end()方法 返回指向最后一个元素下一个位置的迭代器</span><br>    <span class="hljs-comment">//通过迭代器遍历</span><br>    <span class="hljs-keyword">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; *pStart &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-comment">//算法 count 算法 用于统计元素的个数</span><br>    <span class="hljs-built_in">int</span> n = count(pStart, pEnd, <span class="hljs-number">5</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;n:&quot;</span> &lt;&lt; n &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//STL 容器不单单可以存储基础数据类型，也可以存储类对象</span><br><span class="hljs-keyword">class</span> Teacher<br>&#123;<br>public:<br>    <span class="hljs-constructor">Teacher(<span class="hljs-params">int</span> <span class="hljs-params">age</span>)</span> :age(age)&#123;&#125;;<br>    ~<span class="hljs-constructor">Teacher()</span>&#123;&#125;;<br>public:<br>    <span class="hljs-built_in">int</span> age;<br>&#125;;<br>void test02<span class="hljs-literal">()</span>&#123;<br>    vector&lt;Teacher&gt; v; <span class="hljs-comment">//存储 Teacher 类型数据的容器</span><br>    Teacher t1(<span class="hljs-number">10</span>), t2(<span class="hljs-number">20</span>), t3(<span class="hljs-number">30</span>);<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">t1</span>)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">t2</span>)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">t3</span>)</span>;<br>    vector&lt;Teacher&gt;::iterator pStart = v.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>;<br>    vector&lt;Teacher&gt;::iterator pEnd = v.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">//通过迭代器遍历</span><br>    <span class="hljs-keyword">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; pStart-&gt;age &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//存储 Teacher 类型指针</span><br>void test03<span class="hljs-literal">()</span><br>&#123;<br>    vector&lt;Teacher*&gt; v; <span class="hljs-comment">//存储 Teacher 类型指针</span><br>    Teacher* t1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Teacher(10)</span>;<br>    Teacher* t2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Teacher(20)</span>;<br>    Teacher* t3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Teacher(30)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">t1</span>)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">t2</span>)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">t3</span>)</span>;<br>    <span class="hljs-comment">//拿到容器迭代器</span><br>    vector&lt;Teacher*&gt;::iterator pStart = v.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>;<br>    vector&lt;Teacher*&gt;::iterator pEnd = v.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">//通过迭代器遍历</span><br>    <span class="hljs-keyword">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; (*pStart)-&gt;age &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//容器嵌套容器 难点</span><br>void test04<span class="hljs-literal">()</span><br>&#123;<br>    vector&lt; vector&lt;<span class="hljs-built_in">int</span>&gt; &gt; v;<br>    vector&lt;<span class="hljs-built_in">int</span>&gt;v1;<br>    vector&lt;<span class="hljs-built_in">int</span>&gt;v2;<br>    vector&lt;<span class="hljs-built_in">int</span>&gt;v3;<br> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>;i++)<br>    &#123;<br>        v1.push<span class="hljs-constructor">_back(<span class="hljs-params">i</span>)</span>;<br>        v2.push<span class="hljs-constructor">_back(<span class="hljs-params">i</span> <span class="hljs-operator">*</span> 10)</span>;<br>        v3.push<span class="hljs-constructor">_back(<span class="hljs-params">i</span> <span class="hljs-operator">*</span> 100)</span>;<br>    &#125;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">v1</span>)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">v2</span>)</span>;<br>    v.push<span class="hljs-constructor">_back(<span class="hljs-params">v3</span>)</span>;<br> <br>    <span class="hljs-keyword">for</span> (vector&lt; vector&lt;<span class="hljs-built_in">int</span>&gt; &gt;::iterator it = v.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; it != v.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>;it++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-built_in">int</span>&gt;::iterator subIt = (*it).<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; subIt != (*it).<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>; subIt ++)<br>        &#123;<br>            cout &lt;&lt; *subIt &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125; <br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-comment">//test01();</span><br>    <span class="hljs-comment">//test02();</span><br>    <span class="hljs-comment">//test03();</span><br>    test04<span class="hljs-literal">()</span>;<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    return EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>##deque容器<br>deque容器是连续的空间，至少逻辑上看来如此，连续现行空间总是令我们联想到array和vector,array无法成长，vector虽可成长，却只能向尾端成长，而且其成长其实是一个假象，事实上(1) 申请更大空间 (2)原数据复制新空间 (3)释放原空间 三步骤，如果不是vector每次配置新的空间时都留有余裕，其成长假象所带来的代价是非常昂贵的。</p><p>deque是由一段一段的定量的连续空间构成。一旦有必要在deque前端或者尾端增加新的空间，便配置一段连续定量的空间，串接在deque的头端或者尾端。Deque最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口，避开了重新配置空间，复制，释放的轮回，代价就是复杂的迭代器架构。<br>既然deque是分段连续内存空间，那么就必须有中央控制，维持整体连续的假象，数据结构的设计及迭代器的前进后退操作颇为繁琐。Deque代码的实现远比vector或list都多得多。</p><p><img src="/./stl/1.png"><br><img src="/2.png"><br><img src="/3.png"><br><img src="/4.png"><br><img src="/5.png"></p><p>##stack<br><img src="/stack1.png"></p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p><img src="/queue1.png"></p><p>##list<br>双向链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span><br>&#123;<br><span class="hljs-type">int</span> data;<br>ListNode* next;<span class="hljs-comment">//结构体指针</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listprintf</span><span class="hljs-params">(ListNode* phead)</span></span><br><span class="hljs-function"></span>&#123;<br>ListNode* cur=phead;<br><span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">NULL</span>)<br>&#123;<br>cout &lt;&lt; cur-&gt;data &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>cur = cur-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listpushback</span><span class="hljs-params">(ListNode** pphead, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>ListNode* newnode = <span class="hljs-keyword">new</span> ListNode&#123; x,<span class="hljs-literal">NULL</span> &#125;;<br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-literal">NULL</span>)<br>&#123;<br>*pphead = newnode;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ListNode* tail=  *pphead;<br><span class="hljs-keyword">while</span>(tail-&gt;next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>tail = tail-&gt;next;<br>&#125;<br>tail-&gt;next = newnode;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ListNode* phead = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">Listpushback</span>(&amp;phead, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Listpushback</span>(&amp;phead, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">Listpushback</span>(&amp;phead, <span class="hljs-number">3</span>); <br><span class="hljs-built_in">Listprintf</span>(phead);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test_1</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>##二叉树</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//二叉树的节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Linknode</span><br>&#123;<br><span class="hljs-keyword">public</span>：<br>    linknode(); <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">int</span> data;<br>    Linknode* left; <span class="hljs-comment">//左节点</span><br>    Linknode* right;  <span class="hljs-comment">//右节点</span><br>&#125;;<br>Linknode::linknode()<br>&#123;<br>left =NULL;<br>right =Null;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Tree</span><br>&#123;<br>Linknode* root; <span class="hljs-comment">//创建二叉树的根</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>##map<br>map的特性是，所有元素都会根据元素的键值自动排序。<br>map所有的元素都是关联的,同时拥有实值和键值（key,value），第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值.<br>map中的key是唯一的。集合中元素按照一定顺序排列。元素的插入按照规则插入我，所以不能指定插入位置。<br>map的底层是红黑树的变体，平衡二叉树。在插入操作、删除和检索上要比vector快很多。<br>map可以直接存取key所对应的value，支持[]操作符，如map[key]&#x3D;value.<br>#include<map><br>map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符<br>###map和set的区别是：<br>Map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。<br>Set对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://example.com/2023/10/19/mysql/"/>
    <id>http://example.com/2023/10/19/mysql/</id>
    <published>2023-10-19T01:18:32.000Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> student_ID,student_Name<br><span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">where</span> student_Name = <span class="hljs-string">&#x27;Mary Lamb&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> student_Name，student_Address//查找可以有重复的，比如同一个人但是住在不同的地方或者同名的人；不能查找<span class="hljs-keyword">unique</span>的元素。<br><span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>criteria</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs match">select *<br>from student<br>where student_Mobile &gt;111 and student_Age &lt;18;<br></code></pre></td></tr></table></figure><p>not in(‘  ‘,’  ‘);<br>between 1 and 5;(1,2,3,4,5)<br>in(1,5);(1,5)</p><h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><p>A% &#x3D; A____  例如AHMAD;<br>%A &#x3D; _<em><strong>A  例如SERA；<br>%A% &#x3D; <em>A</em></strong></em>  例如 SEAR；<br>A%A；<br>…</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> *<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> student_Name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;L%K%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>记得删除要加from;<br>安全删除日志或单独的记录，可以复原，不删除表的关系等。而drop会删掉所有的并不能复原；</p><h3 id="concat-把两个column合在一起，只是查询临时放在一起"><a href="#concat-把两个column合在一起，只是查询临时放在一起" class="headerlink" title="concat 把两个column合在一起，只是查询临时放在一起"></a>concat 把两个column合在一起，只是查询临时放在一起</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(student_ID,<span class="hljs-string">&#x27;,&#x27;</span>,student_Name)<span class="hljs-keyword">as</span><span class="hljs-string">&#x27;student info&#x27;</span><br><span class="hljs-keyword">from</span> student<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><h3 id="add-datetime-null-default-now"><a href="#add-datetime-null-default-now" class="headerlink" title="add _ datetime null default now()"></a>add _ datetime null default now()</h3><figure class="highlight plaintext"><figcaption><span>_ 中</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 把当前时间加入到表">alter table student<br>add student_time datetime null default now();<br></code></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">student</span></span><br><span class="hljs-function">(<span class="hljs-params">student_Name,student_Mobile,student_Email,student_ID</span>)</span><br><span class="hljs-function"><span class="hljs-title">values</span></span><br><span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;LK&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;xmus004&#x27;</span></span>)</span>;<span class="hljs-comment">//加入新人lk</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student<br>order <span class="hljs-keyword">by</span> student_ID;<span class="hljs-comment">//显示顺序</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 加column">alter table student<br>add DOB date NULL;<br>alter table student<br>add AGE int null;<br></code></pre></td></tr></table></figure><p>然后设置一个DOB：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">update student<br><span class="hljs-keyword">set</span> DOB <span class="hljs-comment">=</span> <span class="hljs-comment">&#x27;2020-03-14&#x27;</span><br>where <span class="hljs-comment">student_ID =</span> <span class="hljs-comment">&#x27;xmus002&#x27;</span>;<br></code></pre></td></tr></table></figure><p>根据设置的DOB来自动计算人年龄：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> student<br><span class="hljs-keyword">set</span> AGE =date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),<span class="hljs-string">&#x27;%Y&#x27;</span>) + <span class="hljs-number">0</span><br><span class="hljs-keyword">where</span> student_ID <span class="hljs-keyword">between</span> <span class="hljs-string">&#x27;xmus001&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;xmus004&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="第6周作业"><a href="#第6周作业" class="headerlink" title="第6周作业"></a>第6周作业</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> shop;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use shop<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> customer<br>(<br>customerID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>FirstName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>LastName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>DateofBirth <span class="hljs-type">date</span> <span class="hljs-keyword">null</span>,<br>street <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">null</span>,<br>city <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">null</span>,<br>state <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">null</span>,<br>MobileNo <span class="hljs-type">int</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> item<br>(<br>ItemID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>ItemName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>Price <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">null</span>,<br>Brand <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> salesman<br>(<br>StaffID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>StaffName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>WorkingDate <span class="hljs-type">date</span> <span class="hljs-keyword">null</span>,<br>Salary <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">transaction</span><br>(<br>InvoiceNo <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary key</span>,<br>CustomeID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,     //<span class="hljs-keyword">primary key</span> 和 forigen key 都不能为<span class="hljs-keyword">null</span><br>ItemID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>StaffID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>Quantity <span class="hljs-type">int</span> <span class="hljs-keyword">null</span>,<br>TotalAmount <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">Foreign Key</span> fk_transaction_CustomerID(customeID) <span class="hljs-keyword">references</span> Customer(customerID),//不用区分大小写<br><span class="hljs-keyword">Foreign Key</span> fk_transaction_ItemID(ItemID) <span class="hljs-keyword">references</span> item(ItemID),<br><span class="hljs-keyword">Foreign Key</span> fk_transaction_StaffID(staffID) <span class="hljs-keyword">references</span> salesman(staffID)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">insert into Customer<br>(customerID, FirstName,LastName,DateofBirth,Street,City,state,MobileNo)<br>values<br>(&#x27;C001&#x27;,&#x27;Britney&#x27;,&#x27;Spears&#x27;,&#x27;<span class="hljs-number">2020-10-04</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Sepang&#x27;,&#x27;Selangor&#x27;,&#x27;<span class="hljs-number">09222333</span>&#x27;),<br>(&#x27;C002&#x27;,&#x27;Britney&#x27;,&#x27;Jackson&#x27;,&#x27;<span class="hljs-number">2007-06-04</span>&#x27;,&#x27;3rd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class="hljs-number">01944433</span>3&#x27;),<br>(&#x27;C003&#x27;,&#x27;John&#x27;,&#x27;Wick&#x27;,&#x27;<span class="hljs-number">1996-04-07</span>&#x27;,&#x27;2nd Level&#x27;,&#x27;Butterworth&#x27;,&#x27;Penang&#x27;,&#x27;<span class="hljs-number">01999933</span>3&#x27;),<br>(&#x27;C004&#x27;,&#x27;John&#x27;,&#x27;Cena&#x27;,&#x27;<span class="hljs-number">1990-03-03</span>&#x27;,&#x27;3rd Floor&#x27;,&#x27;Georgetown&#x27;,&#x27;Penang&#x27;,&#x27;<span class="hljs-number">01222233</span>3&#x27;),<br>(&#x27;C005&#x27;,&#x27;Elizabeth&#x27;,&#x27;Stone&#x27;,&#x27;<span class="hljs-number">1985-04-03</span>&#x27;,&#x27;4th Street&#x27;,&#x27;Sepang&#x27;,&#x27;Selangor&#x27;,&#x27;<span class="hljs-number">01256733</span>3&#x27;),<br>(&#x27;C006&#x27;,&#x27;Jimmy&#x27;,&#x27;Stone&#x27;,&#x27;<span class="hljs-number">2002-10-03</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class="hljs-number">01922443</span>3&#x27;),<br>(&#x27;C007&#x27;,&#x27;Justin&#x27;,&#x27;Timerlake&#x27;,&#x27;<span class="hljs-number">2015-06-04</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class="hljs-number">01944433</span>3&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Item<br>(ItemID, ItemName,Price,Brand)<br><span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;I001&#x27;</span>,<span class="hljs-string">&#x27;Laptop&#x27;</span>,<span class="hljs-string">&#x27;1500&#x27;</span>,<span class="hljs-string">&#x27;Huawei&#x27;</span>),<br>(<span class="hljs-string">&#x27;I002&#x27;</span>,<span class="hljs-string">&#x27;Laptop&#x27;</span>,<span class="hljs-string">&#x27;1700&#x27;</span>,<span class="hljs-string">&#x27;Dell&#x27;</span>),<br>(<span class="hljs-string">&#x27;I003&#x27;</span>,<span class="hljs-string">&#x27;Laptop&#x27;</span>,<span class="hljs-string">&#x27;3500&#x27;</span>,<span class="hljs-string">&#x27;Apple&#x27;</span>),<br>(<span class="hljs-string">&#x27;I004&#x27;</span>,<span class="hljs-string">&#x27;Tablet&#x27;</span>,<span class="hljs-string">&#x27;800&#x27;</span>,<span class="hljs-string">&#x27;Apple&#x27;</span>),<br>(<span class="hljs-string">&#x27;I005&#x27;</span>,<span class="hljs-string">&#x27;Tablet&#x27;</span>,<span class="hljs-string">&#x27;1000&#x27;</span>,<span class="hljs-string">&#x27;Huawei&#x27;</span>),<br>(<span class="hljs-string">&#x27;I006&#x27;</span>,<span class="hljs-string">&#x27;Mouse&#x27;</span>,<span class="hljs-string">&#x27;70&#x27;</span>,<span class="hljs-string">&#x27;Huawei&#x27;</span>),<br>(<span class="hljs-string">&#x27;I007&#x27;</span>,<span class="hljs-string">&#x27;Mouse&#x27;</span>,<span class="hljs-string">&#x27;80&#x27;</span>,<span class="hljs-string">&#x27;Logistech&#x27;</span>),<br>(<span class="hljs-string">&#x27;I008&#x27;</span>,<span class="hljs-string">&#x27;Printer&#x27;</span>,<span class="hljs-string">&#x27;500&#x27;</span>,<span class="hljs-string">&#x27;HP&#x27;</span>),<br>(<span class="hljs-string">&#x27;I009&#x27;</span>,<span class="hljs-string">&#x27;Printer&#x27;</span>,<span class="hljs-string">&#x27;300&#x27;</span>,<span class="hljs-string">&#x27;Canon&#x27;</span>),<br>(<span class="hljs-string">&#x27;I010&#x27;</span>,<span class="hljs-string">&#x27;Speaker&#x27;</span>,<span class="hljs-string">&#x27;50&#x27;</span>,<span class="hljs-string">&#x27;Huawei&#x27;</span>);<br><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> item;<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 1c">insert into transaction<br>(InvoiceNo,customeID,ItemID,StaffID,Quantity)<br>values<br>(&#x27;<span class="hljs-number">1000</span>1&#x27;,&#x27;C001&#x27;,&#x27;I003&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>2&#x27;,&#x27;C001&#x27;,&#x27;I004&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>3&#x27;,&#x27;C002&#x27;,&#x27;I001&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>4&#x27;,&#x27;C002&#x27;,&#x27;I006&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>5&#x27;,&#x27;C003&#x27;,&#x27;I002&#x27;,&#x27;S002&#x27;,&#x27;5&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>6&#x27;,&#x27;C003&#x27;,&#x27;I007&#x27;,&#x27;S002&#x27;,&#x27;5&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>7&#x27;,&#x27;C004&#x27;,&#x27;I009&#x27;,&#x27;S003&#x27;,&#x27;3&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>8&#x27;,&#x27;C004&#x27;,&#x27;I008&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;),<br>(&#x27;<span class="hljs-number">1000</span>9&#x27;,&#x27;C005&#x27;,&#x27;I001&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;),<br>(&#x27;<span class="hljs-number">1001</span>0&#x27;,&#x27;C005&#x27;,&#x27;I005&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;);<br>select *from transaction;<br></code></pre></td></tr></table></figure><p>以上全是准备工作，现在才是重点</p><figure class="highlight plaintext"><figcaption><span>Write a query to display list of purchase item for customer ID (C001, C002).</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1.">select * from Transaction<br>where customeID IN(&#x27;C001&#x27;,&#x27;C002&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display list of customer for Staff ID (S001, S002).</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 2.">select * from Transaction<br>where staffID IN(&#x27;s001&#x27;,&#x27;s002&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display the customer ID, customer full name, and Full Address from customer Table.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 3.">select customerID as&#x27;ID NO&#x27;,<br>concat(FirstName,&#x27; &#x27;,LastName) &#x27;Full Name&#x27;,<br>concat(street,&#x27;,&#x27;,city,&#x27;,&#x27;,state) &#x27;Mailing Address&#x27;<br>from customer;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display the item id, item name, and price that price more than RM700.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 4.">select itemID,itemname,price<br>from item<br>where price &gt;=700<br>order by price;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display the customer id, fullname (First+LastName), state that live in Selangor.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 5.">select customerID, <br>concat(firstname,&#x27; &#x27;,lastname) as &#x27;FULL Name&#x27;, state<br>from customer<br>where state = &#x27;selangor&#x27;;//where state like &#x27;sel%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to list all the state in customer table.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 6.">select distinct state   //避免重复的<br>from customer;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display the price range is between 500 to 2000</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 7.">select *from item<br>where price between 500 and 2000 //注意between和in的区别<br>order by price;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query where clerk salary is less than 1,500 and working before 2011.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 8.">select *from salesman<br>where Salary &lt;= 2000 and WorkingDate &lt;= &#x27;2011-01-01&#x27; //注意日期写法<br>order by WorkingDate;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display customer age.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 9.">select customerID, concat(firstname,&#x27; &#x27;,lastname) as &#x27;full name&#x27;,<br>concat(street,&#x27;,&#x27;,city,&#x27;,&#x27;,state)as&#x27;full address&#x27;,dateofbirth,   //真的复杂，之前合并了，现在就都得写<br>(date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),&#x27;%Y&#x27;) + 0)as age //这个不会真要背吧<br>from customer<br>order by age;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Write a query to display working experience.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 10.">select staffid,staffname,workingdate,<br>(date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),&#x27;%Y&#x27;) + 0)as &#x27;working experience&#x27; //长string用‘ ’括起来<br>from salesman<br>order by workingdate desc;<br></code></pre></td></tr></table></figure><h3 id="第7周作业"><a href="#第7周作业" class="headerlink" title="第7周作业"></a>第7周作业</h3><figure class="highlight plaintext"><figcaption><span>a query to display list of member information where name start with J.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Write">select FirstName,<br>from members<br>where FirstName like &#x27;J%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to display list of member that register for Diamond membership.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Write">select *,<br>from members<br>where tpye_name = &#x27;Diamond&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to list all the state in member table.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Write">select distinct state<br>from members;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to display the member ID, member full name, Full Address, membership and sort by membership.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Write">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,<br>from member<br>order by type_name;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to display member age.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Write">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,DOB,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),&#x27;%Y&#x27;) + 0)as age<br>from member<br>order by age;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to display member that lives in Johor or Selangor.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Write">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,DOB,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),&#x27;%Y&#x27;) + 0)as age<br>from member<br>where state = &#x27;Johor&#x27; or state = &#x27;selangor&#x27; -- where state in (&#x27;Johor&#x27;,&#x27;selangor&#x27;)<br>order by age;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to display MemberID, ClassID, TrainerID and sort by ClassID.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Write">select memberID,classID,<br>from register<br>order by classID;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query to display the class id, class name, and class price between RM50 and RM150.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Write">select classID,ClassName,Fee<br>from class<br>where fee between 50 and 150;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query where trainer salary is less than 3,000 and working before 2015.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Write">select *<br>from trainer<br>where salary &lt;3000 and WorkingDate &lt;&#x27;2015-01-01&#x27;; --第一个是年，第二个是日，最后是月<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>a query where trainer working experience is less than 5 years or specialized in Martial arts.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Write">select trainerID,trainerName,workingDate,skill,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),&#x27;%Y&#x27;) + 0)as experience<br>from trainer<br>where wokingdate &gt;&#x27;2019-01-01&#x27; or skillID = &#x27;s001&#x27;; --大大的注意不能用experience来比较，系统不知道我们新建的这个是什么意思，所以还是只能用已有的workingdate.<br></code></pre></td></tr></table></figure><p>总的来说，给列赋予别名时AS关键字是可选的，而且别名不需要用引号括起来。</p><h3 id="第八周-Adding-Jion-Queries"><a href="#第八周-Adding-Jion-Queries" class="headerlink" title="第八周 Adding Jion Queries"></a>第八周 Adding Jion Queries</h3><h4 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h4><figure class="highlight plaintext"><figcaption><span>和 register 的交集.跟以前不一样是要加例如member.前缀</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 找到members">SELECT register.MemberID , members.firstName,<br>members.LastName, register.ClassId<br>from members inner join register on members.MemberID = register.memberID;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>relationship不要超过2.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 升级版，但是一个table的">SELECT register.MemberID , concat(members.firstName,&#x27; &#x27;,members.LastName) as &#x27;Full Nmae&#x27;, register.ClassId, concat(members.street,&#x27; &#x27;,members.city,&#x27; &#x27;,members.state)&#x27;Address&#x27;,<br>class.classname, class.price, membership.type_name<br>from membership inner join members on membership.type_name = members.type_name <br> inner join register on members.MemberID = register.memberID <br> inner join class on register.classid = class.classid<br></code></pre></td></tr></table></figure><h4 id="outer-join"><a href="#outer-join" class="headerlink" title="outer join"></a>outer join</h4><h4 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h4><h4 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h4><h4 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h4><p>!(){1.png}</p><h4 id="aggreate"><a href="#aggreate" class="headerlink" title="aggreate"></a>aggreate</h4><p>count, sum, min, max, average</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">select</span> a,b,c,<br>count(<span class="hljs-keyword">register</span>.classid) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;Total class&#x27;</span>,<br>sum(<span class="hljs-keyword">class</span>.price)<span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;Total price&#x27;</span><br><span class="hljs-keyword">from</span> member <span class="hljs-keyword">class</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">register</span> <span class="hljs-keyword">on</span> member.memberid = <span class="hljs-keyword">register</span>.memberid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">register</span>.memberid      --<span class="hljs-keyword">group</span> 必不可少<br></code></pre></td></tr></table></figure><h4 id="Mathematic-calculation"><a href="#Mathematic-calculation" class="headerlink" title="Mathematic calculation"></a>Mathematic calculation</h4><ul><li>&#x2F; - +<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">sum</span>(<span class="hljs-keyword">class</span>.price)<span class="hljs-keyword">as</span><span class="hljs-string">&quot;before discount&quot;</span>,<br><span class="hljs-keyword">sum</span>((<span class="hljs-number">1</span>-membership.discout) * <span class="hljs-keyword">class</span>.price)<span class="hljs-keyword">as</span> <span class="hljs-string">&quot;Total Amount&quot;</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> member.memberid;<br></code></pre></td></tr></table></figure></li></ul><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">transaction</span>.staffid, salesman.StaffName,<br><span class="hljs-built_in">count</span>(<span class="hljs-keyword">transaction</span>.itemid)<span class="hljs-string">&#x27;order number&#x27;</span>,<br><span class="hljs-built_in">sum</span>(<span class="hljs-keyword">transaction</span>.quantity)<span class="hljs-string">&#x27;total quantity&#x27;</span>,<br><span class="hljs-built_in">sum</span>(<span class="hljs-keyword">transaction</span>.quantity*item.price) <span class="hljs-string">&#x27;total sales&#x27;</span>,<br>(<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">transaction</span>.quantity*item.price))*<span class="hljs-number">0.1</span>+salesman.Salary <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;salery&#x27;</span><br><span class="hljs-keyword">from</span> salesman  <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">transaction</span> <span class="hljs-keyword">on</span> salesman.staffid = <span class="hljs-keyword">transaction</span>.staffid<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> item <span class="hljs-keyword">on</span> item.itemid = <span class="hljs-keyword">transaction</span>.itemid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">transaction</span>.staffid;<br></code></pre></td></tr></table></figure><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>往已经有的table里加外键</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> registration<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span> (staffid)<br><span class="hljs-keyword">references</span> staff(staffid);<br></code></pre></td></tr></table></figure><p>Exercise</p><ol><li>Write a query to display list of GuestID, Guest Full Name, Guest Address, and RoomID from registration<br>and guest table.</li><li>Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from<br>registration, guest and room table.</li><li>Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from<br>registration, guest and room table where Firstname start with ‘J’ and lives in Selangor. Compare the<br>registration and guest for Null values.</li><li>Write a query to count how many room that every guest has book.</li><li>Write a query for the SUM cost that the guest needs to pay for the room.</li><li>Write a query for the discounted rooms for every guest.</li><li>Write a query to count how many room that every staff has submitted.</li><li>Write a total sum of sales for every staff.</li><li>Calculate the total salary for staff if they get 15% commission from the total sales.</li><li>Calculate the age and working experience from guest and staff where age &lt; 30 years old or working<br>experience &gt; 10.<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">select registration<span class="hljs-selector-class">.guestid</span>,<br><span class="hljs-function"><span class="hljs-title">concat</span><span class="hljs-params">(guest.firstname,<span class="hljs-string">&#x27;  &#x27;</span>,guest.lastname)</span></span> <span class="hljs-string">&#x27;full name&#x27;</span>,<br><span class="hljs-function"><span class="hljs-title">concat</span><span class="hljs-params">(guest.street,<span class="hljs-string">&#x27; ,&#x27;</span>,guest.city,<span class="hljs-string">&#x27; ,&#x27;</span>,guest.state)</span></span> <span class="hljs-string">&#x27;mailing address&#x27;</span>,<br>registration<span class="hljs-selector-class">.roomid</span>, room<span class="hljs-selector-class">.roomtype</span>,room<span class="hljs-selector-class">.price</span><br>from guest inner join registration on guest<span class="hljs-selector-class">.guestid</span> = registration<span class="hljs-selector-class">.guestid</span><br>inner join room on registration<span class="hljs-selector-class">.roomid</span> = room.roomid<br></code></pre></td></tr></table></figure>在后面加where guest.firsname like ‘%kun’； 会发现结果为空，empty output &#x3D; no sharing data on selected condition;<br>但是加 left outer<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> guest <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> registration <span class="hljs-keyword">on</span> guest.guestid <span class="hljs-operator">=</span> registration.guestid<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> room <span class="hljs-keyword">on</span> registration.roomid <span class="hljs-operator">=</span> room.roomid<br><span class="hljs-keyword">where</span> guest.firstname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;j%&#x27;</span> <span class="hljs-keyword">and</span> guest.state <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;selangor&#x27;</span>;<br></code></pre></td></tr></table></figure>有的变成null了 这个意思是no data;<br>再加：where registration.guestid is null; 出来的结果表示还没有订房间的客人；<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> registration.guestid,<br>concat(guest.firstname,<span class="hljs-string">&#x27;  &#x27;</span>,guest.lastname)<span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;full name&#x27;</span>,<br>concat(guest.street,<span class="hljs-string">&#x27; ,&#x27;</span>,guest.city,<span class="hljs-string">&#x27; ,&#x27;</span>,guest.state) <span class="hljs-string">&#x27;mailing address&#x27;</span>,<br>sum(room.price*datediff(registration.checkout,registration.checkin))<span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;total pay&#x27;</span>,<br>((<span class="hljs-number">100</span>-membership.discount)/<span class="hljs-number">100</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;total discount&#x27;</span><br><span class="hljs-keyword">from</span> membership <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> guest <span class="hljs-keyword">on</span> membership.<span class="hljs-keyword">type</span> = guest.<span class="hljs-keyword">type</span><br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> registration <span class="hljs-keyword">on</span> guest.guestid = registration.guestid<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> room <span class="hljs-keyword">on</span> registration.roomid = room.roomid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> registration.guestid;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AI_course</title>
    <link href="http://example.com/2023/09/22/AI-course/"/>
    <id>http://example.com/2023/09/22/AI-course/</id>
    <published>2023-09-22T08:11:52.000Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#lab 01<br>##1 </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int main()<br>&#123;<br>    //array of vectors<br>    int arr[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>];<br>   //result vector<br>    int result[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>   for (int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        cin&gt;&gt;arr[i][<span class="hljs-number">0</span>];//x<br>        result[<span class="hljs-number">0</span>]+= arr[i][<span class="hljs-number">0</span>];<br>        cin&gt;&gt;arr[i][<span class="hljs-number">1</span>];//y<br>        result[<span class="hljs-number">1</span>]+=arr[i][<span class="hljs-number">1</span>];<br>    &#125;<br>    cout&lt;&lt; <span class="hljs-string">&quot; The sum  vector is (&quot;</span>&lt;&lt; result[<span class="hljs-number">0</span>]&lt;&lt; <span class="hljs-string">&quot;, &quot;</span>&lt;&lt;result[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&#x27;)&#x27;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>##2<br><img src="/OIP.jpeg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// number of element in a vector</span><br>    <span class="hljs-type">int</span> N=<span class="hljs-number">4</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">norm_L1</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        result+=<span class="hljs-built_in">abs</span>(arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span>  result;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">norm_L2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> sqrSum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        sqrSum+=arr[i]*arr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(sqrSum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[N];<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;arr[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;]= &quot;</span>;<br>        cin&gt;&gt;arr[i];<br>    &#125;<br>   cout&lt;&lt; <span class="hljs-string">&quot;Vector&#x27;s norm L1 = &quot;</span>&lt;&lt; <span class="hljs-built_in">norm_L1</span>(arr)&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Vecotr&#x27;s norm L2 = &quot;</span>&lt;&lt; <span class="hljs-built_in">norm_L2</span>(arr)&lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_ima</title>
    <link href="http://example.com/2023/09/22/test-ima/"/>
    <id>http://example.com/2023/09/22/test-ima/</id>
    <published>2023-09-22T05:34:02.000Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>！<a href="108879310_p0_square1200.jpg"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javaScript的学习笔记</title>
    <link href="http://example.com/2023/09/19/javaScript/"/>
    <id>http://example.com/2023/09/19/javaScript/</id>
    <published>2023-09-19T14:04:47.000Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&lt;linkrel&#x3D;”stylesheet”href&#x3D;”<a href="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css%22%3E">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;&gt;</a> </p><p>&lt;scriptsrc&#x3D;”<a href="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js%22%3E">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;&gt;</a></script> </p><p>&lt;scriptsrc&#x3D;”<a href="https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js%22%3E">https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;</a></script> </p>    <div id="aplayer-bRMXQIHB" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9129478" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p><a href="https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142%5Ev94%5EchatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187">参考来源</a></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="1-5、JavaScript的输出"><a href="#1-5、JavaScript的输出" class="headerlink" title="1.5、JavaScript的输出"></a>1.5、JavaScript的输出</h4><p>页面输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs codes">&lt;script&gt;<br>    document.write(&quot;Hello,World!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>控制台输出*注意：页面按F12弹出控制台*\</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs codes">&lt;script&gt;<br>    console.log(&quot;输出一条日志&quot;);//最常用<br>    console.info(&quot;输出一条信息&quot;);<br>    console.warn(&quot;输出一条警告&quot;);<br>    console.error(&quot;输出一条错误&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>弹出窗口输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs codes">&lt;script&gt;<br>    alert(&quot;Hello,World!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="2-11-6、嵌套函数"><a href="#2-11-6、嵌套函数" class="headerlink" title="2.11.6、嵌套函数"></a>2.11.6、嵌套函数</h4><p>嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">fu</span>() &#123;<br>    function <span class="hljs-built_in">zi</span>() &#123;<br>        console<span class="hljs-selector-class">.log</span>(&quot;我是儿子&quot;)<br>    &#125;<br><br>    <span class="hljs-built_in">zi</span>();<br>&#125;<br><br><span class="hljs-built_in">fu</span>();<br></code></pre></td></tr></table></figure><h4 id="2-11-8、立即执行函数"><a href="#2-11-8、立即执行函数" class="headerlink" title="2.11.8、立即执行函数"></a>2.11.8、立即执行函数</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">function</span> () &#123;<br>    alert(<span class="hljs-string">&quot;我是一个匿名函数&quot;</span>)<span class="hljs-comment">;</span><br>&#125;)()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="2-12-2、用构造函数创建对象"><a href="#2-12-2、用构造函数创建对象" class="headerlink" title="2.12.2、用构造函数创建对象"></a>2.12.2、用构造函数创建对象</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 使用构造函数来创建对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 设置对象的属性</span><br>    this.name = name;<br>    this.age = age;<br>    <span class="hljs-comment">// 设置对象的方法</span><br>    this.sayName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-number">20</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(person1);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(person2);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(person3);<br><br></code></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>当以函数的形式调用时，this是window<br>当以方法的形式调用时，谁调用方法this就是谁<br>当以构造函数的形式调用时，this就是新创建的那个对象</p><h4 id="2-12-3、原型"><a href="#2-12-3、原型" class="headerlink" title="2.12.3、原型"></a>2.12.3、原型</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 使用构造函数来创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span></span>(name, age) &#123;<br>    <span class="hljs-comment">// 设置对象的属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-comment">// 设置对象的方法</span><br>    <span class="hljs-built_in">this</span>.sayName = sayName<br>&#125;<br><br><span class="hljs-comment">// 抽取方法为全局函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span></span>() &#123;<br>    console.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person3 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-number">20</span>);<br><br>person1.sayName();<br>person2.sayName();<br>person3.sayName();<br></code></pre></td></tr></table></figure><p>但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用构造函数来创建对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 设置对象的属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-comment">// 在Person类的原型对象中添加方法</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-number">20</span>);<br><br>person1.<span class="hljs-title function_">sayName</span>();<br>person2.<span class="hljs-title function_">sayName</span>();<br>person3.<span class="hljs-title function_">sayName</span>();<br></code></pre></td></tr></table></figure><p>我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p><h4 id="2-12-7、对象继承"><a href="#2-12-7、对象继承" class="headerlink" title="2.12.7、对象继承"></a>2.12.7、对象继承</h4><p>JavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：</p><p>原型链继承<br>借用构造函数继承<br>组合继承（重要）</p><h5 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h5><figure class="highlight plaintext"><figcaption><span>定义父类型构造函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs //">function SupperType() &#123;<br>    this.supProp = &#x27;Supper property&#x27;;<br>&#125;<br><br>// 给父类型的原型添加方法<br>SupperType.prototype.showSupperProp = function () &#123;<br>    console.log(this.supProp);<br>&#125;;<br><br>// 定义子类型的构造函数<br>function SubType() &#123;<br>    this.subProp = &#x27;Sub property&#x27;;<br>&#125;<br><br>// 创建父类型的对象赋值给子类型的原型<br>SubType.prototype = new SupperType();<br><br>// 将子类型原型的构造属性设置为子类型<br>SubType.prototype.constructor = SubType;<br><br>// 给子类型原型添加方法<br>SubType.prototype.showSubProp = function () &#123;<br>    console.log(this.subProp)<br>&#125;;<br><br>// 创建子类型的对象: 可以调用父类型的方法<br>var subType = new SubType();<br>subType.showSupperProp();<br>subType.showSubProp();<br></code></pre></td></tr></table></figure><h5 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义父类型构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">showSupperName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-comment">// 定义子类型的构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 在子类型中调用call方法继承自SuperType</span><br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-comment">// 给子类型的原型添加方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">showSubName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><br><span class="hljs-comment">// 创建子类型的对象然后调用</span><br><span class="hljs-keyword">var</span> subType = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">20</span>);<br>subType.<span class="hljs-title function_">showSupperName</span>();<br>subType.<span class="hljs-title function_">showSubName</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(subType.<span class="hljs-property">name</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(subType.<span class="hljs-property">age</span>);<br></code></pre></td></tr></table></figure><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name, age, price</span>) &#123;<br>    <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name, age); <span class="hljs-comment">// 为了得到父类型的实例属性和方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price; <span class="hljs-comment">// 添加子类型私有的属性</span><br>&#125;<br><br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(); <span class="hljs-comment">// 为了得到父类型的原型属性和方法</span><br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Student</span>; <span class="hljs-comment">// 修正constructor属性指向</span><br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setPrice</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123; <span class="hljs-comment">// 添加子类型私有的方法 </span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>&#125;;<br><br><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">15000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">name</span>, s.<span class="hljs-property">age</span>, s.<span class="hljs-property">price</span>);<br>s.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>);<br>s.<span class="hljs-title function_">setPrice</span>(<span class="hljs-number">16000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">name</span>, s.<span class="hljs-property">age</span>, s.<span class="hljs-property">price</span>);<br></code></pre></td></tr></table></figure><h4 id="2-12-8、垃圾回收"><a href="#2-12-8、垃圾回收" class="headerlink" title="2.12.8、垃圾回收"></a>2.12.8、垃圾回收</h4><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 使用构造函数来创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span></span>(name, age) &#123;<br>    <span class="hljs-comment">// 设置对象的属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person3 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-number">20</span>);<br><br>person1 = <span class="hljs-literal">null</span>;<br>person2 = <span class="hljs-literal">null</span>;<br>person3 = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var arr</span> = [1, <span class="hljs-string">&quot;2&quot;</span>, 3, <span class="hljs-string">&quot;4&quot;</span>, 5, <span class="hljs-string">&quot;6&quot;</span>, 7, <span class="hljs-string">&quot;8&quot;</span>, 9];<br></code></pre></td></tr></table></figure><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><p>push()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;玉兔精&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>pop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">pop</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>unshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.unshift(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-string">&quot;二郎神&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>shift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.shift();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>forEach()方法演示：该方法可以用来遍历数组<br>浏览器会在回调函数中传递三个参数：</p><p>第一个参数：就是当前正在遍历的元素<br>第二个参数：就是当前正在遍历的元素的索引<br>第三个参数：就是正在遍历的数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br>arr.forEach(<span class="hljs-keyword">function</span> (<span class="hljs-params">value, index, obj</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value + <span class="hljs-string">&quot; #### &quot;</span> + index + <span class="hljs-string">&quot; #### &quot;</span> + obj);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png" alt="result"><br>slice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-string">&quot;白骨精&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br>result = arr.<span class="hljs-built_in">slice</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br>result = arr.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-2</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png" alt="result"><br>splice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p><p>参数：</p><p>第一个参数：表示开始位置的索引<br>第二个参数：表示要删除的元素数量<br>第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-string">&quot;白骨精&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">splice</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br>result = arr.<span class="hljs-built_in">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-string">&quot;铁扇公主&quot;</span>, <span class="hljs-string">&quot;红孩儿&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png" alt="result"><br>concat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;玉兔精&quot;</span>, <span class="hljs-string">&quot;蜘蛛精&quot;</span>];<br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-string">&quot;二郎神&quot;</span>, <span class="hljs-string">&quot;太上老君&quot;</span>, <span class="hljs-string">&quot;玉皇大帝&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.concat(arr2, arr3, <span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-string">&quot;铁扇公主&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>join()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.join(<span class="hljs-string">&quot;@-@&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png" alt="result"><br>reverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br>arr.<span class="hljs-built_in">reverse</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br></code></pre></td></tr></table></figure><p>sort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序</p><h4 id="RegExp-正则表达式"><a href="#RegExp-正则表达式" class="headerlink" title="RegExp 正则表达式"></a>RegExp 正则表达式</h4><h5 id="3-6-2-1、使用对象创建"><a href="#3-6-2-1、使用对象创建" class="headerlink" title="3.6.2.1、使用对象创建"></a>3.6.2.1、使用对象创建</h5><p>语法格式：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;正则表达式&quot;</span>,<span class="hljs-string">&quot;匹配模式&quot;</span>);<br></code></pre></td></tr></table></figure><p>匹配模式：</p><p>i：忽略大小写<br>g：全局匹配模式<br>ig：忽略大小写且全局匹配模式</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">reg</span> = new RegExp(<span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>);<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Abc&quot;</span>;<br><span class="hljs-keyword">var</span> result = <span class="hljs-keyword">reg</span>.<span class="hljs-keyword">test</span>(str);<br>console.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><h5 id="3-6-2-2、使用字面量创建"><a href="#3-6-2-2、使用字面量创建" class="headerlink" title="3.6.2.2、使用字面量创建"></a>3.6.2.2、使用字面量创建</h5><p>语法格式：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-regexp">/正则表达式/</span>匹配模式;<br></code></pre></td></tr></table></figure><p>注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/i</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Abc&quot;</span>;<br><span class="hljs-keyword">var</span> result = reg.test(str);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><h5 id="3-6-3、正则进阶"><a href="#3-6-3、正则进阶" class="headerlink" title="3.6.3、正则进阶"></a>3.6.3、正则进阶</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 需求信息：创建一个正则表达式，检查一个字符串中是否有a或b">// 这个正则表达式可以来检查一个字符串中是否含有a<br>var reg = /a|b|c/;<br>var str = &quot;Abc&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 需求信息：创建一个正则表达式，检查一个字符串中是否有字母">// 这个正则表达式可以来检查一个字符串中是否含有字母<br>var reg = /[A-z]/;<br>var str = &quot;Abc&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure><p>常见组合：</p><p>[a-z]：任意小写字母<br>[A-Z]：任意大写字母<br>[A-z]：任意字母<br>[0-9]：任意数字</p><figure class="highlight plaintext"><figcaption><span>abc 或 adc 或 aec</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 需求信息：创建一个正则表达式，检查一个字符串中是否含有">// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec<br>var reg = /a[bde]c/;<br>var str = &quot;abc123&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure><p>判断除了某些字符序列，只需要这么写[^字符序列]<br>常见组合：</p><p>[^a-z]：除了任意小写字母<br>[^A-Z]：除了任意大写字母<br>[^A-z]：除了任意字母<br>[^0-9]：除了任意数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母">// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母<br>var reg = /[^0-9]/;<br>var str = &quot;0123456789&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure><h5 id="3-6-4、正则方法"><a href="#3-6-4、正则方法" class="headerlink" title="3.6.4、正则方法"></a>3.6.4、正则方法</h5><p>split()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a2b3c4d5e6f7&quot;</span>;<br><span class="hljs-keyword">var</span> result = str.<span class="hljs-built_in">split</span>(<span class="hljs-regexp">/[A-z]/</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>search()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello abc hello aec afc&quot;</span>;<br><span class="hljs-keyword">var</span> result = str.search(<span class="hljs-regexp">/a[bef]c/</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>match()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class="hljs-keyword">var</span> result = str.match(<span class="hljs-regexp">/[a-z]/ig</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><p>replace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部<br>参数：</p><p>第一个参数：被替换的内容，可以接受一个正则表达式作为参数<br>第二个参数：新的内容</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class="hljs-keyword">var</span> result = str.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/[a-z]/gi</span>, <span class="hljs-string">&quot;@_@&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><h5 id="3-6-5、正则量词"><a href="#3-6-5、正则量词" class="headerlink" title="3.6.5、正则量词"></a>3.6.5、正则量词</h5><p>通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：</p><p>{n} ：正好出现n次<br>{m,} ：出现m次及以上<br>{m,n} ：出现m-n次</p><ul><li>：至少一个，相当于{1,}</li></ul><ul><li>：0个或多个，相当于{0,}<br>? ：0个或1个，相当于{0,1}<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abbc&quot;</span>;<br><br>reg = <span class="hljs-regexp">/(ab)&#123;3&#125;/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br>reg = <span class="hljs-regexp">/b&#123;3&#125;/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br>reg = <span class="hljs-regexp">/ab&#123;1,3&#125;c/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br>reg = <span class="hljs-regexp">/ab&#123;3,&#125;c/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br>reg = <span class="hljs-regexp">/ab+c/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br>reg = <span class="hljs-regexp">/ab*c/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br>reg = <span class="hljs-regexp">/ab?c/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;===============&quot;</span>);<br></code></pre></td></tr></table></figure>f f t f t t f</li></ul><h5 id="3-6-6、正则高阶"><a href="#3-6-6、正则高阶" class="headerlink" title="3.6.6、正则高阶"></a>3.6.6、正则高阶</h5><p>如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。</p><p>^ ：表示开头，注意它在[^字符序列]表达的意思不一样<br>$ ：表示结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：检查一个字符串中是否以a开头">var str = &quot;abcabca&quot;;<br>var reg = /^a/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：检查一个字符串中是否以a结尾">var str = &quot;abcabca&quot;;<br>var reg = /a$/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure><p>如果我们想要检查一个字符串中是否含有.和\就会使用转义字符</p><p>. ：表示.<br>\ ：表示\</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\./</span>;<br><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/\\/</span>;<br><span class="hljs-keyword">var</span> reg3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;\\.&quot;</span>);<br><span class="hljs-keyword">var</span> reg4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;\\\\&quot;</span>);<br></code></pre></td></tr></table></figure><p>除了以上两种特殊的字符，其实还有很多如下所示：</p><p>\w ：任意字母、数字、<em>，相当于[A-z0-9</em>]<br>\W ：除了字母、数字、<em>，相当于[^A-z0-9</em>]<br>\d ：任意的数字，相当于[0-9]<br>\D ：除了任意的数字，相当于[^0-9]<br>\s ：空格<br>\S ：除了空格<br>\b ：单词边界<br>\B ：除了单词边界</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个正则表达式，去除掉字符串中的前后的空格">var str = &quot;  hello child  &quot;<br>var reg = /^\s*|\s*$/g;<br>console.log(str);<br>str = str.replace(reg, &quot;&quot;);<br>console.log(str);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child">var str = &quot;hello child&quot;<br>var reg = /\bchild\b/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure><h5 id="3-6-7、正则案例"><a href="#3-6-7、正则案例" class="headerlink" title="3.6.7、正则案例"></a>3.6.7、正则案例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 检查手机号">var phoneStr = &quot;15131494600&quot;;<br>var phoneReg = /^1[3-9][0-9]&#123;9&#125;$/;<br>console.log(phoneReg.test(phoneStr));<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 检查邮箱号">var emailStr = &quot;abc.def@163.com&quot;;<br>var emailReg = /^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/;<br>console.log(emailReg.test(emailStr));<br></code></pre></td></tr></table></figure><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="JavaScript-DOM"><a href="#JavaScript-DOM" class="headerlink" title="JavaScript DOM"></a>JavaScript DOM</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p>HTML DOM 模型被结构化为 对象树<br>常用节点分为四类：</p><p>文档节点：整个HTML文档<br>元素节点：HTML文档中的HTML标签<br>属性节点：元素的属性<br>文本节点：HTML标签中的文本内容</p><h4 id="4-3-1、查找-HTML-元素"><a href="#4-3-1、查找-HTML-元素" class="headerlink" title="4.3.1、查找 HTML 元素"></a>4.3.1、查找 HTML 元素</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById(id)</td><td>通过元素 id 来查找元素.</td></tr><tr><td>document.getElementsByTagName(name)</td><td>通过标签名来查找元素。</td></tr><tr><td>document.getElementsByClassName(name)</td><td>通过类名来查找元素。</td></tr><tr><td>document.querySelector(CSS选择器)</td><td>通过CSS选择器选择一个元素。</td></tr><tr><td>document.querySelectorAll(CSS选择器)</td><td>通过CSS选择器选择多个元素。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个按钮，通过id获取按钮节点对象">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementById(&quot;btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个按钮，通过标签名获取按钮节点对象数组">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementsByTagName(&quot;button&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个按钮，通过类名获取按钮节点对象数组">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementsByClassName(&quot;btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个按钮，通过CSS选择器选择该按钮">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.querySelector(&quot;.btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;ul class=&quot;list&quot;&gt;<br>    &lt;li&gt;列表项1&lt;/li&gt;<br>    &lt;li&gt;列表项2&lt;/li&gt;<br>    &lt;li&gt;列表项3&lt;/li&gt;<br>    &lt;li&gt;列表项4&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var list = document.querySelectorAll(&quot;.list li&quot;);<br>    console.log(list);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="4-3-2、获取-HTML-的值"><a href="#4-3-2、获取-HTML-的值" class="headerlink" title="4.3.2、获取 HTML 的值"></a>4.3.2、获取 HTML 的值</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>元素节点.innerText</td><td>获取 HTML 元素的 inner Text。</td></tr><tr><td>元素节点.innerHTML</td><td>获取 HTML 元素的 inner HTML。</td></tr><tr><td>元素节点.属性</td><td>获取 HTML 元素的属性值。</td></tr><tr><td>元素节点.getAttribute(attribute)</td><td>获取 HTML 元素的属性值。</td></tr><tr><td>元素节点.style.样式</td><td>获取 HTML 元素的行内样式值。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 需求描述：创建一个按钮，然后获取按钮的文本内容">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementById(&quot;btn&quot;);<br>    console.log(btn.innerText);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/08/31/hello-world/"/>
    <id>http://example.com/2023/08/31/hello-world/</id>
    <published>2023-08-31T02:43:12.894Z</published>
    <updated>2023-11-29T03:11:50.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/">教学</a><br><img src="https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg" alt="鸡鸡女王"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
