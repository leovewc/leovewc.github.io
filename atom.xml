<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li Kun</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-19T03:42:21.264Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Leo Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stl</title>
    <link href="http://example.com/2023/10/19/stl/"/>
    <id>http://example.com/2023/10/19/stl/</id>
    <published>2023-10-19T03:24:26.000Z</published>
    <updated>2023-10-19T03:42:21.264Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="title-stl-learncover-OIP-jpegtags"><a href="#title-stl-learncover-OIP-jpegtags" class="headerlink" title="title: stl_learncover: OIP.jpegtags:"></a>title: stl_learn<br>cover: OIP.jpeg<br>tags:</h2><p>##stl fundemental</p><pre><code class="动态数组">int *p = new int[n]</code></pre><p>加大储存空间：<br>1.新申请一个较大的内存空间，即执行</p><pre><code>int * temp = new int[m];</code></pre><p>2.将原内存空间的数据全部复制到新申请的内存空间中，即执行</p><pre><code>memecpy(temp, p, sizeof(int)*n);</code></pre><p>3.将原来的堆空间释放，即执行</p><pre><code>delete [] p; p = temp;</code></pre><p>当采用stl向量模板类vector实现以上功能：</p><pre><code>vector &lt;int&gt; a; //定义 a 数组，当前数组长度为 0，但和普通数组不同的是，此数组 a 可以根据存储数据的数量自动变长。//向数组 a 中添加 10 个元素for (int i = 0; i &lt; 10 ; i++)    a.push_back(i)//还可以手动调整数组 a 的大小a.resize(100);a[90] = 100;//还可以直接删除数组 a 中所有的元素，此时 a 的长度变为 0a.clear();//重新调整 a 的大小为 20，并存储 20 个 -1 元素。a.resize(20, -1)</code></pre><p>push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。<br>size( ) 函数显示向量的大小。<br>begin( ) 函数返回一个指向向量开头的迭代器。<br>end( ) 函数返回一个指向向量末尾的迭代器。<br>###泛型</p><pre><code>T maxt(T x, T y)&#123;      return (x&gt;y)?x :y;&#125;</code></pre><p>T 是占位符，为泛型<br>##vector</p><pre><code>#define _CRT_SECURE_NO_WARNINGS#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std; //STL 中的容器 算法 迭代器void test01()&#123;    vector&lt;int&gt; v; //STL 中的标准容器之一 ：动态数组    v.push_back(1); //vector 容器提供的插入数据的方法    v.push_back(5);    v.push_back(3);    v.push_back(7);    //迭代器    vector&lt;int&gt;::iterator pStart = v.begin(); //vector 容器提供了 begin()方法 返回指向第一个元素的迭代器    vector&lt;int&gt;::iterator pEnd = v.end(); //vector 容器提供了 end()方法 返回指向最后一个元素下一个位置的迭代器    //通过迭代器遍历    while (pStart != pEnd)&#123;        cout &lt;&lt; *pStart &lt;&lt; &quot; &quot;;        pStart++;    &#125;    cout &lt;&lt; endl;    //算法 count 算法 用于统计元素的个数    int n = count(pStart, pEnd, 5);    cout &lt;&lt; &quot;n:&quot; &lt;&lt; n &lt;&lt; endl;&#125;//STL 容器不单单可以存储基础数据类型，也可以存储类对象class Teacher&#123;public:    Teacher(int age) :age(age)&#123;&#125;;    ~Teacher()&#123;&#125;;public:    int age;&#125;;void test02()&#123;    vector&lt;Teacher&gt; v; //存储 Teacher 类型数据的容器    Teacher t1(10), t2(20), t3(30);    v.push_back(t1);    v.push_back(t2);    v.push_back(t3);    vector&lt;Teacher&gt;::iterator pStart = v.begin();    vector&lt;Teacher&gt;::iterator pEnd = v.end();    //通过迭代器遍历    while (pStart != pEnd)&#123;        cout &lt;&lt; pStart-&gt;age &lt;&lt; &quot; &quot;;        pStart++;    &#125;    cout &lt;&lt; endl;&#125;//存储 Teacher 类型指针void test03()&#123;    vector&lt;Teacher*&gt; v; //存储 Teacher 类型指针    Teacher* t1 = new Teacher(10);    Teacher* t2 = new Teacher(20);    Teacher* t3 = new Teacher(30);    v.push_back(t1);    v.push_back(t2);    v.push_back(t3);    //拿到容器迭代器    vector&lt;Teacher*&gt;::iterator pStart = v.begin();    vector&lt;Teacher*&gt;::iterator pEnd = v.end();    //通过迭代器遍历    while (pStart != pEnd)&#123;        cout &lt;&lt; (*pStart)-&gt;age &lt;&lt; &quot; &quot;;        pStart++;    &#125;    cout &lt;&lt; endl;&#125;//容器嵌套容器 难点void test04()&#123;    vector&lt; vector&lt;int&gt; &gt; v;    vector&lt;int&gt;v1;    vector&lt;int&gt;v2;    vector&lt;int&gt;v3;     for (int i = 0; i &lt; 5;i++)    &#123;        v1.push_back(i);        v2.push_back(i * 10);        v3.push_back(i * 100);    &#125;    v.push_back(v1);    v.push_back(v2);    v.push_back(v3);     for (vector&lt; vector&lt;int&gt; &gt;::iterator it = v.begin(); it != v.end();it++)    &#123;        for (vector&lt;int&gt;::iterator subIt = (*it).begin(); subIt != (*it).end(); subIt ++)        &#123;            cout &lt;&lt; *subIt &lt;&lt; &quot; &quot;;        &#125;        cout &lt;&lt; endl;    &#125;&#125; int main()&#123;    //test01();    //test02();    //test03();    test04();    system(&quot;pause&quot;);    return EXIT_SUCCESS;&#125;</code></pre><p>##deque容器<br>deque容器是连续的空间，至少逻辑上看来如此，连续现行空间总是令我们联想到array和vector,array无法成长，vector虽可成长，却只能向尾端成长，而且其成长其实是一个假象，事实上(1) 申请更大空间 (2)原数据复制新空间 (3)释放原空间 三步骤，如果不是vector每次配置新的空间时都留有余裕，其成长假象所带来的代价是非常昂贵的。</p><p>deque是由一段一段的定量的连续空间构成。一旦有必要在deque前端或者尾端增加新的空间，便配置一段连续定量的空间，串接在deque的头端或者尾端。Deque最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口，避开了重新配置空间，复制，释放的轮回，代价就是复杂的迭代器架构。<br>既然deque是分段连续内存空间，那么就必须有中央控制，维持整体连续的假象，数据结构的设计及迭代器的前进后退操作颇为繁琐。Deque代码的实现远比vector或list都多得多。</p><p><img src="/./stl/1.png"><br><img src="/2.png"><br><img src="/3.png"><br><img src="/4.png"><br><img src="/5.png"></p><p>##stack<br><img src="/stack1.png"></p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p><img src="/queue1.png"></p><p>##list<br>双向链表</p><pre><code>#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;struct ListNode&#123;    int data;    ListNode* next;//结构体指针&#125;;void Listprintf(ListNode* phead)&#123;    ListNode* cur=phead;    while (cur != NULL)    &#123;        cout &lt;&lt; cur-&gt;data &lt;&lt; &quot;-&gt;&quot;;        cur = cur-&gt;next;    &#125;&#125;void Listpushback(ListNode** pphead, int x)&#123;    ListNode* newnode = new ListNode&#123; x,NULL &#125;;    if (*pphead == NULL)    &#123;        *pphead = newnode;    &#125;    else    &#123;        ListNode* tail=  *pphead;        while(tail-&gt;next != NULL)        &#123;            tail = tail-&gt;next;        &#125;        tail-&gt;next = newnode;    &#125;&#125;void test_1()&#123;    ListNode* phead = NULL;    Listpushback(&amp;phead, 1);    Listpushback(&amp;phead, 2);    Listpushback(&amp;phead, 3);     Listprintf(phead);&#125;int main()&#123;    test_1();    return 0;&#125;</code></pre><p>##二叉树</p><pre><code>//二叉树的节点class Linknode&#123;public：    linknode(); //构造函数    int data;    Linknode* left; //左节点    Linknode* right;  //右节点&#125;;Linknode::linknode()&#123;    left =NULL;    right =Null;&#125;class Tree&#123;    Linknode* root; //创建二叉树的根    &#125;</code></pre><p>##map<br>map的特性是，所有元素都会根据元素的键值自动排序。<br>map所有的元素都是关联的,同时拥有实值和键值（key,value），第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值.<br>map中的key是唯一的。集合中元素按照一定顺序排列。元素的插入按照规则插入我，所以不能指定插入位置。<br>map的底层是红黑树的变体，平衡二叉树。在插入操作、删除和检索上要比vector快很多。<br>map可以直接存取key所对应的value，支持[]操作符，如map[key]&#x3D;value.<br>#include<map><br>map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符<br>###map和set的区别是：<br>Map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。<br>Set对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://example.com/2023/10/19/mysql/"/>
    <id>http://example.com/2023/10/19/mysql/</id>
    <published>2023-10-19T01:18:32.000Z</published>
    <updated>2023-10-19T02:54:11.099Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>##指令</p><pre><code>select student_ID,student_Namefrom student;where student_Name = &#39;Mary Lamb&#39;;</code></pre><pre><code>select distinct student_Name，student_Address//查找可以有重复的，比如同一个人但是住在不同的地方或者同名的人；不能查找unique的元素。from student;</code></pre><pre><code class="match">select *from studentwhere student_Mobile &gt;111 and student_Age &lt;18;</code></pre><p>not in(‘  ‘,’  ‘);<br>between 1 and 5;(1,2,3,4,5)<br>in(1.5);(1,5)</p><h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><p>A% &#x3D; A____  例如AHMAD;<br>%A &#x3D; _<em><strong>A  例如SERA；<br>%A% &#x3D; <em>A</em></strong></em>  例如 SEAR；<br>A%A；<br>…</p><pre><code>select *from studentwhere student_Name like &#39;L%K%&#39;;</code></pre><p>###group by<br>###join<br>###drop<br>###delete<br>记得删除要加from;<br>安全删除日志或单独的记录，可以复原，不删除表的关系等。而drop会删掉所有的并不能复原；<br>###concat 把两个column合在一起，只是查询临时放在一起</p><pre><code class="select">as&#39;student info&#39;from student;</code></pre><h3 id="add-datetime-null-default-now"><a href="#add-datetime-null-default-now" class="headerlink" title="add _ datetime null default now()"></a>add _ datetime null default now()</h3><pre><code class="把当前时间加入到表">alter table studentadd student_time datetime null default now();</code></pre><p>###insert </p><pre><code>insert into student(student_Name,student_Mobile,student_Email,student_ID)values(&#39;LK&#39;,&#39;0&#39;,&#39;0&#39;,&#39;xmus004&#39;);//加入新人lkselect * from studentorder by student_ID;//显示顺序</code></pre><pre><code class="加column">alter table studentadd DOB date NULL;alter table studentadd AGE int null;</code></pre><p>然后设置一个DOB：</p><pre><code>update studentset DOB = &#39;2020-03-14&#39;where student_ID = &#39;xmus002&#39;;</code></pre><p>根据设置的DOB来自动计算人年龄：</p><pre><code>update studentset AGE =date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),&#39;%Y&#39;) + 0where student_ID between &#39;xmus001&#39; and &#39;xmus004&#39;;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AI_course</title>
    <link href="http://example.com/2023/09/22/AI-course/"/>
    <id>http://example.com/2023/09/22/AI-course/</id>
    <published>2023-09-22T08:11:52.000Z</published>
    <updated>2023-09-22T08:14:35.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#lab 01<br>##1 </p><pre><code>int main()&#123;    //array of vectors    int arr[5][2];   //result vector    int result[2]=&#123;0,0&#125;;   for (int i=0;i&lt;5;i++)&#123;        cin&gt;&gt;arr[i][0];//x        result[0]+= arr[i][0];        cin&gt;&gt;arr[i][1];//y        result[1]+=arr[i][1];    &#125;    cout&lt;&lt; &quot; The sum  vector is (&quot;&lt;&lt; result[0]&lt;&lt; &quot;, &quot;&lt;&lt;result[1]&lt;&lt;&#39;)&#39;&lt;&lt;endl;&#125;</code></pre><p>##2<br><img src="/OIP.jpeg"></p><pre><code>// number of element in a vector    int N=4;int norm_L1(int arr[])&#123;    long result = 0;    for(int i=0;i&lt;N;i++)&#123;        result+=abs(arr[i]);    &#125;    return  result;&#125;double norm_L2(int arr[])&#123;    double sqrSum=0;    for(int i=0;i&lt;N;i++)&#123;        sqrSum+=arr[i]*arr[i];    &#125;    return sqrt(sqrSum);&#125;int main()&#123;    int arr[N];    for( int i=0;i&lt;N;i++)&#123;        cout&lt;&lt;&quot;arr[&quot;&lt;&lt;i&lt;&lt;&quot;]= &quot;;        cin&gt;&gt;arr[i];    &#125;   cout&lt;&lt; &quot;Vector&#39;s norm L1 = &quot;&lt;&lt; norm_L1(arr)&lt;&lt;&#39;\n&#39;;    cout&lt;&lt; &quot;Vecotr&#39;s norm L2 = &quot;&lt;&lt; norm_L2(arr)&lt;&lt; &#39;\n&#39;;   return 0;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_ima</title>
    <link href="http://example.com/2023/09/22/test-ima/"/>
    <id>http://example.com/2023/09/22/test-ima/</id>
    <published>2023-09-22T05:34:02.000Z</published>
    <updated>2023-09-22T08:06:43.702Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>！<a href="108879310_p0_square1200.jpg"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javaScript的学习笔记</title>
    <link href="http://example.com/2023/09/19/javaScript/"/>
    <id>http://example.com/2023/09/19/javaScript/</id>
    <published>2023-09-19T14:04:47.000Z</published>
    <updated>2023-09-24T05:21:24.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&lt;linkrel&#x3D;”stylesheet”href&#x3D;”<a href="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css%22%3E">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;&gt;</a> </p><p>&lt;scriptsrc&#x3D;”<a href="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js%22%3E">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;&gt;</a></script> </p><p>&lt;scriptsrc&#x3D;”<a href="https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js%22%3E">https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;</a></script> </p>    <div id="aplayer-YSBMkmVk" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9129478" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p><a href="https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142%5Ev94%5EchatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187">参考来源</a></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="1-5、JavaScript的输出"><a href="#1-5、JavaScript的输出" class="headerlink" title="1.5、JavaScript的输出"></a>1.5、JavaScript的输出</h4><p>页面输出</p><pre><code class="codes">&lt;script&gt;    document.write(&quot;Hello,World!&quot;);&lt;/script&gt;</code></pre><p>控制台输出*注意：页面按F12弹出控制台*\</p><pre><code class="codes">&lt;script&gt;    console.log(&quot;输出一条日志&quot;);//最常用    console.info(&quot;输出一条信息&quot;);    console.warn(&quot;输出一条警告&quot;);    console.error(&quot;输出一条错误&quot;);&lt;/script&gt;</code></pre><p>弹出窗口输出</p><pre><code class="codes">&lt;script&gt;    alert(&quot;Hello,World!&quot;);&lt;/script&gt;</code></pre><h4 id="2-11-6、嵌套函数"><a href="#2-11-6、嵌套函数" class="headerlink" title="2.11.6、嵌套函数"></a>2.11.6、嵌套函数</h4><p>嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。</p><pre><code>function fu() &#123;    function zi() &#123;        console.log(&quot;我是儿子&quot;)    &#125;    zi();&#125;fu();</code></pre><h4 id="2-11-8、立即执行函数"><a href="#2-11-8、立即执行函数" class="headerlink" title="2.11.8、立即执行函数"></a>2.11.8、立即执行函数</h4><pre><code>(function () &#123;    alert(&quot;我是一个匿名函数&quot;);&#125;)();</code></pre><h4 id="2-12-2、用构造函数创建对象"><a href="#2-12-2、用构造函数创建对象" class="headerlink" title="2.12.2、用构造函数创建对象"></a>2.12.2、用构造函数创建对象</h4><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;    // 设置对象的方法    this.sayName = function () &#123;        console.log(this.name);    &#125;;&#125;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);console.log(person1);console.log(person2);console.log(person3);</code></pre><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>当以函数的形式调用时，this是window<br>当以方法的形式调用时，谁调用方法this就是谁<br>当以构造函数的形式调用时，this就是新创建的那个对象</p><h4 id="2-12-3、原型"><a href="#2-12-3、原型" class="headerlink" title="2.12.3、原型"></a>2.12.3、原型</h4><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;    // 设置对象的方法    this.sayName = sayName&#125;// 抽取方法为全局函数function sayName() &#123;    console.log(this.name);&#125;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);person1.sayName();person2.sayName();person3.sayName();</code></pre><p>但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。</p><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;&#125;// 在Person类的原型对象中添加方法Person.prototype.sayName = function() &#123;    console.log(this.name);&#125;;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);person1.sayName();person2.sayName();person3.sayName();</code></pre><p>我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p><h4 id="2-12-7、对象继承"><a href="#2-12-7、对象继承" class="headerlink" title="2.12.7、对象继承"></a>2.12.7、对象继承</h4><p>JavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：</p><p>原型链继承<br>借用构造函数继承<br>组合继承（重要）</p><h5 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h5><pre><code class="//">function SupperType() &#123;    this.supProp = &#39;Supper property&#39;;&#125;// 给父类型的原型添加方法SupperType.prototype.showSupperProp = function () &#123;    console.log(this.supProp);&#125;;// 定义子类型的构造函数function SubType() &#123;    this.subProp = &#39;Sub property&#39;;&#125;// 创建父类型的对象赋值给子类型的原型SubType.prototype = new SupperType();// 将子类型原型的构造属性设置为子类型SubType.prototype.constructor = SubType;// 给子类型原型添加方法SubType.prototype.showSubProp = function () &#123;    console.log(this.subProp)&#125;;// 创建子类型的对象: 可以调用父类型的方法var subType = new SubType();subType.showSupperProp();subType.showSubProp();</code></pre><h5 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h5><pre><code>// 定义父类型构造函数function SuperType(name) &#123;    this.name = name;    this.showSupperName = function () &#123;        console.log(this.name);    &#125;;&#125;// 定义子类型的构造函数function SubType(name, age) &#123;    // 在子类型中调用call方法继承自SuperType    SuperType.call(this, name);    this.age = age;&#125;// 给子类型的原型添加方法SubType.prototype.showSubName = function () &#123;    console.log(this.name);&#125;;// 创建子类型的对象然后调用var subType = new SubType(&quot;孙悟空&quot;, 20);subType.showSupperName();subType.showSubName();console.log(subType.name);console.log(subType.age);</code></pre><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><pre><code>function Person(name, age) &#123;    this.name = name;    this.age = age;&#125;Person.prototype.setName = function (name) &#123;    this.name = name;&#125;;function Student(name, age, price) &#123;    Person.call(this, name, age); // 为了得到父类型的实例属性和方法    this.price = price; // 添加子类型私有的属性&#125;Student.prototype = new Person(); // 为了得到父类型的原型属性和方法Student.prototype.constructor = Student; // 修正constructor属性指向Student.prototype.setPrice = function (price) &#123; // 添加子类型私有的方法     this.price = price;&#125;;var s = new Student(&quot;孙悟空&quot;, 24, 15000);console.log(s.name, s.age, s.price);s.setName(&quot;猪八戒&quot;);s.setPrice(16000);console.log(s.name, s.age, s.price);</code></pre><h4 id="2-12-8、垃圾回收"><a href="#2-12-8、垃圾回收" class="headerlink" title="2.12.8、垃圾回收"></a>2.12.8、垃圾回收</h4><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p><pre><code>// 使用构造函数来创建对象function Person(name, age) &#123;    // 设置对象的属性    this.name = name;    this.age = age;&#125;var person1 = new Person(&quot;孙悟空&quot;, 18);var person2 = new Person(&quot;猪八戒&quot;, 19);var person3 = new Person(&quot;沙和尚&quot;, 20);person1 = null;person2 = null;person3 = null;</code></pre><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><pre><code>var arr = [1, &quot;2&quot;, 3, &quot;4&quot;, 5, &quot;6&quot;, 7, &quot;8&quot;, 9];</code></pre><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><p>push()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.push(&quot;唐僧&quot;, &quot;蜘蛛精&quot;, &quot;白骨精&quot;, &quot;玉兔精&quot;);console.log(arr);console.log(result);</code></pre><p>pop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.pop();console.log(arr);console.log(result);</code></pre><p>unshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.unshift(&quot;牛魔王&quot;, &quot;二郎神&quot;);console.log(arr);console.log(result);</code></pre><p>shift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.shift();console.log(arr);console.log(result);</code></pre><p>forEach()方法演示：该方法可以用来遍历数组<br>浏览器会在回调函数中传递三个参数：</p><p>第一个参数：就是当前正在遍历的元素<br>第二个参数：就是当前正在遍历的元素的索引<br>第三个参数：就是正在遍历的数组</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];arr.forEach(function (value, index, obj) &#123;    console.log(value + &quot; #### &quot; + index + &quot; #### &quot; + obj);&#125;);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png" alt="result"><br>slice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;, &quot;唐僧&quot;, &quot;白骨精&quot;];var result = arr.slice(1, 4);console.log(result);result = arr.slice(3);console.log(result);result = arr.slice(1, -2);console.log(result);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png" alt="result"><br>splice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p><p>参数：</p><p>第一个参数：表示开始位置的索引<br>第二个参数：表示要删除的元素数量<br>第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;, &quot;唐僧&quot;, &quot;白骨精&quot;];var result = arr.splice(3, 2);console.log(arr);console.log(result);result = arr.splice(1, 0, &quot;牛魔王&quot;, &quot;铁扇公主&quot;, &quot;红孩儿&quot;);console.log(arr);console.log(result);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png" alt="result"><br>concat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var arr2 = [&quot;白骨精&quot;, &quot;玉兔精&quot;, &quot;蜘蛛精&quot;];var arr3 = [&quot;二郎神&quot;, &quot;太上老君&quot;, &quot;玉皇大帝&quot;];var result = arr.concat(arr2, arr3, &quot;牛魔王&quot;, &quot;铁扇公主&quot;);console.log(result);</code></pre><p>join()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];var result = arr.join(&quot;@-@&quot;);console.log(result);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png" alt="result"><br>reverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组</p><pre><code>var arr = [&quot;孙悟空&quot;, &quot;猪八戒&quot;, &quot;沙和尚&quot;];arr.reverse();console.log(arr);</code></pre><p>sort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序</p><h4 id="RegExp-正则表达式"><a href="#RegExp-正则表达式" class="headerlink" title="RegExp 正则表达式"></a>RegExp 正则表达式</h4><h5 id="3-6-2-1、使用对象创建"><a href="#3-6-2-1、使用对象创建" class="headerlink" title="3.6.2.1、使用对象创建"></a>3.6.2.1、使用对象创建</h5><p>语法格式：</p><pre><code>var 变量名 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;);</code></pre><p>匹配模式：</p><p>i：忽略大小写<br>g：全局匹配模式<br>ig：忽略大小写且全局匹配模式</p><pre><code>// 这个正则表达式可以来检查一个字符串中是否含有avar reg = new RegExp(&quot;ab&quot;, &quot;i&quot;);var str = &quot;Abc&quot;;var result = reg.test(str);console.log(result);</code></pre><h5 id="3-6-2-2、使用字面量创建"><a href="#3-6-2-2、使用字面量创建" class="headerlink" title="3.6.2.2、使用字面量创建"></a>3.6.2.2、使用字面量创建</h5><p>语法格式：</p><pre><code>var 变量名 = /正则表达式/匹配模式;</code></pre><p>注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p><pre><code>// 这个正则表达式可以来检查一个字符串中是否含有avar reg = /a/i;var str = &quot;Abc&quot;;var result = reg.test(str);console.log(result);</code></pre><h5 id="3-6-3、正则进阶"><a href="#3-6-3、正则进阶" class="headerlink" title="3.6.3、正则进阶"></a>3.6.3、正则进阶</h5><pre><code class="需求信息：创建一个正则表达式，检查一个字符串中是否有a或b">// 这个正则表达式可以来检查一个字符串中是否含有avar reg = /a|b|c/;var str = &quot;Abc&quot;;var result = reg.test(str);console.log(result);</code></pre><pre><code class="需求信息：创建一个正则表达式，检查一个字符串中是否有字母">// 这个正则表达式可以来检查一个字符串中是否含有字母var reg = /[A-z]/;var str = &quot;Abc&quot;;var result = reg.test(str);console.log(result);</code></pre><p>常见组合：</p><p>[a-z]：任意小写字母<br>[A-Z]：任意大写字母<br>[A-z]：任意字母<br>[0-9]：任意数字</p><pre><code class="需求信息：创建一个正则表达式，检查一个字符串中是否含有">// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aecvar reg = /a[bde]c/;var str = &quot;abc123&quot;;var result = reg.test(str);console.log(result);</code></pre><p>判断除了某些字符序列，只需要这么写[^字符序列]<br>常见组合：</p><p>[^a-z]：除了任意小写字母<br>[^A-Z]：除了任意大写字母<br>[^A-z]：除了任意字母<br>[^0-9]：除了任意数字</p><pre><code class="需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母">// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母var reg = /[^0-9]/;var str = &quot;0123456789&quot;;var result = reg.test(str);console.log(result);</code></pre><h5 id="3-6-4、正则方法"><a href="#3-6-4、正则方法" class="headerlink" title="3.6.4、正则方法"></a>3.6.4、正则方法</h5><p>split()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分</p><pre><code>var str = &quot;1a2b3c4d5e6f7&quot;;var result = str.split(/[A-z]/);console.log(result);</code></pre><p>search()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用</p><pre><code>var str = &quot;hello abc hello aec afc&quot;;var result = str.search(/a[bef]c/);console.log(result);</code></pre><p>match()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><pre><code>var str = &quot;1a2a3a4a5e6f7A8B9C&quot;;var result = str.match(/[a-z]/ig);console.log(result);</code></pre><p>replace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部<br>参数：</p><p>第一个参数：被替换的内容，可以接受一个正则表达式作为参数<br>第二个参数：新的内容</p><pre><code>var str = &quot;1a2a3a4a5e6f7A8B9C&quot;;var result = str.replace(/[a-z]/gi, &quot;@_@&quot;);console.log(result);</code></pre><h5 id="3-6-5、正则量词"><a href="#3-6-5、正则量词" class="headerlink" title="3.6.5、正则量词"></a>3.6.5、正则量词</h5><p>通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：</p><p>{n} ：正好出现n次<br>{m,} ：出现m次及以上<br>{m,n} ：出现m-n次</p><ul><li>：至少一个，相当于{1,}</li></ul><ul><li>：0个或多个，相当于{0,}<br>? ：0个或1个，相当于{0,1}</li></ul><pre><code>var str = &quot;abbc&quot;;reg = /(ab)&#123;3&#125;/;console.log(reg.test(str));console.log(&quot;===============&quot;);reg = /b&#123;3&#125;/;console.log(reg.test(str));console.log(&quot;===============&quot;);reg = /ab&#123;1,3&#125;c/;console.log(reg.test(str));console.log(&quot;===============&quot;);reg = /ab&#123;3,&#125;c/;console.log(reg.test(str));console.log(&quot;===============&quot;);reg = /ab+c/;console.log(reg.test(str));console.log(&quot;===============&quot;);reg = /ab*c/;console.log(reg.test(str));console.log(&quot;===============&quot;);reg = /ab?c/;console.log(reg.test(str));console.log(&quot;===============&quot;);</code></pre><p>f f t f t t f</p><h5 id="3-6-6、正则高阶"><a href="#3-6-6、正则高阶" class="headerlink" title="3.6.6、正则高阶"></a>3.6.6、正则高阶</h5><p>如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。</p><p>^ ：表示开头，注意它在[^字符序列]表达的意思不一样<br>$ ：表示结尾</p><pre><code class="需求描述：检查一个字符串中是否以a开头">var str = &quot;abcabca&quot;;var reg = /^a/;console.log(reg.test(str));</code></pre><pre><code class="需求描述：检查一个字符串中是否以a结尾">var str = &quot;abcabca&quot;;var reg = /a$/;console.log(reg.test(str));</code></pre><p>如果我们想要检查一个字符串中是否含有.和\就会使用转义字符</p><p>. ：表示.<br>\ ：表示\</p><pre><code>var reg1 = /\./;var reg2 = /\\/;var reg3 = new RegExp(&quot;\\.&quot;);var reg4 = new RegExp(&quot;\\\\&quot;);</code></pre><p>除了以上两种特殊的字符，其实还有很多如下所示：</p><p>\w ：任意字母、数字、<em>，相当于[A-z0-9</em>]<br>\W ：除了字母、数字、<em>，相当于[^A-z0-9</em>]<br>\d ：任意的数字，相当于[0-9]<br>\D ：除了任意的数字，相当于[^0-9]<br>\s ：空格<br>\S ：除了空格<br>\b ：单词边界<br>\B ：除了单词边界</p><pre><code class="需求描述：创建一个正则表达式，去除掉字符串中的前后的空格">var str = &quot;  hello child  &quot;var reg = /^\s*|\s*$/g;console.log(str);str = str.replace(reg, &quot;&quot;);console.log(str);</code></pre><pre><code class="需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child">var str = &quot;hello child&quot;var reg = /\bchild\b/;console.log(reg.test(str));</code></pre><h5 id="3-6-7、正则案例"><a href="#3-6-7、正则案例" class="headerlink" title="3.6.7、正则案例"></a>3.6.7、正则案例</h5><pre><code class="检查手机号">var phoneStr = &quot;15131494600&quot;;var phoneReg = /^1[3-9][0-9]&#123;9&#125;$/;console.log(phoneReg.test(phoneStr));</code></pre><pre><code class="检查邮箱号">var emailStr = &quot;abc.def@163.com&quot;;var emailReg = /^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/;console.log(emailReg.test(emailStr));</code></pre><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="JavaScript-DOM"><a href="#JavaScript-DOM" class="headerlink" title="JavaScript DOM"></a>JavaScript DOM</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p>HTML DOM 模型被结构化为 对象树<br>常用节点分为四类：</p><p>文档节点：整个HTML文档<br>元素节点：HTML文档中的HTML标签<br>属性节点：元素的属性<br>文本节点：HTML标签中的文本内容</p><h4 id="4-3-1、查找-HTML-元素"><a href="#4-3-1、查找-HTML-元素" class="headerlink" title="4.3.1、查找 HTML 元素"></a>4.3.1、查找 HTML 元素</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById(id)</td><td>通过元素 id 来查找元素.</td></tr><tr><td>document.getElementsByTagName(name)</td><td>通过标签名来查找元素。</td></tr><tr><td>document.getElementsByClassName(name)</td><td>通过类名来查找元素。</td></tr><tr><td>document.querySelector(CSS选择器)</td><td>通过CSS选择器选择一个元素。</td></tr><tr><td>document.querySelectorAll(CSS选择器)</td><td>通过CSS选择器选择多个元素。</td></tr></tbody></table><pre><code class="需求描述：创建一个按钮，通过id获取按钮节点对象">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;&lt;script&gt;    var btn = document.getElementById(&quot;btn&quot;);    console.log(btn);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="需求描述：创建一个按钮，通过标签名获取按钮节点对象数组">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;button&gt;我是按钮&lt;/button&gt;&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;&lt;script&gt;    var btn = document.getElementsByTagName(&quot;button&quot;);    console.log(btn);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="需求描述：创建一个按钮，通过类名获取按钮节点对象数组">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;&lt;script&gt;    var btn = document.getElementsByClassName(&quot;btn&quot;);    console.log(btn);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="需求描述：创建一个按钮，通过CSS选择器选择该按钮">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;&lt;script&gt;    var btn = document.querySelector(&quot;.btn&quot;);    console.log(btn);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ul class=&quot;list&quot;&gt;    &lt;li&gt;列表项1&lt;/li&gt;    &lt;li&gt;列表项2&lt;/li&gt;    &lt;li&gt;列表项3&lt;/li&gt;    &lt;li&gt;列表项4&lt;/li&gt;&lt;/ul&gt;&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;&lt;script&gt;    var list = document.querySelectorAll(&quot;.list li&quot;);    console.log(list);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="4-3-2、获取-HTML-的值"><a href="#4-3-2、获取-HTML-的值" class="headerlink" title="4.3.2、获取 HTML 的值"></a>4.3.2、获取 HTML 的值</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>元素节点.innerText</td><td>获取 HTML 元素的 inner Text。</td></tr><tr><td>元素节点.innerHTML</td><td>获取 HTML 元素的 inner HTML。</td></tr><tr><td>元素节点.属性</td><td>获取 HTML 元素的属性值。</td></tr><tr><td>元素节点.getAttribute(attribute)</td><td>获取 HTML 元素的属性值。</td></tr><tr><td>元素节点.style.样式</td><td>获取 HTML 元素的行内样式值。</td></tr></tbody></table><pre><code class="需求描述：创建一个按钮，然后获取按钮的文本内容">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;&lt;script&gt;    var btn = document.getElementById(&quot;btn&quot;);    console.log(btn.innerText);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/08/31/hello-world/"/>
    <id>http://example.com/2023/08/31/hello-world/</id>
    <published>2023-08-31T02:43:12.894Z</published>
    <updated>2023-09-22T02:30:18.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/">教学</a><br><img src="https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg" alt="鸡鸡女王"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
