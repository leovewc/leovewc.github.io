{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/database.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1697074203580},{"_id":"source/_drafts/新建 文本文档.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1697074230312},{"_id":"source/_posts/AI-course.md","hash":"fa64bcd12a97698cea92138a20f081baf10e9d72","modified":1695370475248},{"_id":"source/_posts/javaScript.md","hash":"1cd914df51a94a463dff171bb1c7e6954349eefd","modified":1695532884819},{"_id":"source/_posts/hello-world.md","hash":"1212eea68367110661163fbe41e0b13dcc2001e7","modified":1695349818740},{"_id":"source/_posts/luogu.txt","hash":"a31d0e88c1afdf1207cb6c91ef9b9c5b85c6ccd9","modified":1697621910067},{"_id":"source/_posts/mysql.md","hash":"4bb7d7b280fb6eb438b4cfca14e46370657e9681","modified":1700709796600},{"_id":"source/_posts/stl.md","hash":"77d38f411c001c772d6f005d75a8d56fd06781dc","modified":1697686941264},{"_id":"source/_posts/nowcoder.md","hash":"8a6fb79d45d38484dc9fddc69bdf3070bc106418","modified":1701222216733},{"_id":"source/_posts/test-ima.md","hash":"9aba10b74d4980a58cfd8edc2ea45979a6c9cc1d","modified":1695370003702},{"_id":"source/_drafts/testpage.md","hash":"ec8dfe996e318746fcc56f3ad13f5cea86b68346","modified":1695131931335},{"_id":"source/_drafts/hexo.md","hash":"b7a2c899b9f456e9d59e4b1d006b6bc4465165f5","modified":1695359508874},{"_id":"source/music/index.md","hash":"f1466f1b13dd2ebe105d7547788c155668b1eafd","modified":1695374941675},{"_id":"source/_posts/test-ima/108879310_p0_square1200.jpg","hash":"425d283ab06ca675ec4b975f894144b412faf56c","modified":1693581215311},{"_id":"source/_posts/AI-course/OIP.jpeg","hash":"e6a411d5b52faeab6b867457fec0c2b34e7caa97","modified":1695370380334},{"_id":"source/_posts/javeScript/正则表达式1.png","hash":"6c6c5403b66bcbdff0f7a7319318668f0b206fd3","modified":1695526729555},{"_id":"source/_posts/test-ima/109382470_p0_custom1200.jpg","hash":"e65d0bc13f3f9b99ee78bc87f42aa06b814cadce","modified":1693584132887},{"_id":"source/_posts/stl/2.png","hash":"b2a98e675fbbf8588f117fe9222a83d8f5a4dc95","modified":1697621550635},{"_id":"source/_posts/stl/1.png","hash":"c339c9cf2a97ba4c89c6516e038d511dfec3591b","modified":1697621517698},{"_id":"source/_posts/stl/queue1.png","hash":"27a5eaff892104b0f0fb15ce65f8a75deb5e0003","modified":1697622362837},{"_id":"source/_posts/stl/stack1.png","hash":"f23e8d0f5578673695fe634d5023242b427016c1","modified":1697622280450},{"_id":"source/_posts/stl/5.png","hash":"4ed8ff270b0cb708b1f543330332e7ef59b5e905","modified":1697621626967},{"_id":"source/_posts/stl/4.png","hash":"9cda17b08b6554e97c408947dbf4ee324ecf6d9c","modified":1697621603489},{"_id":"source/_posts/stl/3.png","hash":"203125ef742e43f9060752401c48b0ba4cb7e444","modified":1697621577478},{"_id":"source/_posts/mysql/1.png","hash":"83ad274a851f8c016a8a256d050def60432952e4","modified":1699496521778},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670937168000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1670937168000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1670937168000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1670937168000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1670937168000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1670937168000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1670937168000},{"_id":"themes/fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1670937168000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1670937168000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1670937168000},{"_id":"themes/fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1670937168000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1670937168000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1670937168000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1670937168000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1670937168000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1670937168000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1670937168000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1670937168000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1670937168000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1670937168000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1670937168000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1670937168000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1670937168000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1670937168000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1670937168000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1670937168000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1670937168000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1670937168000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1670937168000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1670937168000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1670937168000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1670937168000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1670937168000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1670937168000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1670937168000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1670937168000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1670937168000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1670937168000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1670937168000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1670937168000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1670937168000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1670937168000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1670937168000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1670937168000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1670937168000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1670937168000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1670937168000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1670937168000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1670937168000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1670937168000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1670937168000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1670937168000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1670937168000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1670937168000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1670937168000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1670937168000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1670937168000},{"_id":"public/atom.xml","hash":"e8353341ce94c94d5cc63ca5cfe20c1d628243f8","modified":1701222323591},{"_id":"public/local-search.xml","hash":"7813b195d336308c37803cc2732afb0c5af9a388","modified":1701222323591},{"_id":"public/music/index.html","hash":"b3279a62a10a2d731a54587e173296c76ebf64b3","modified":1701222323591},{"_id":"public/2023/10/19/stl/index.html","hash":"e6904538e9aeb4090cb3c9878d5dbf3a1b848578","modified":1701222323591},{"_id":"public/2023/09/22/AI-course/index.html","hash":"b447676cc7ff8b386567cbc3701d3c2a05161358","modified":1701222323591},{"_id":"public/2023/09/22/test-ima/index.html","hash":"9680b8ebb849f5f9bfa413a6d187ad9b6f59bf11","modified":1701222323591},{"_id":"public/2023/10/19/mysql/index.html","hash":"ed9cdf001b8267de801b8aedfd53220b725ee8c4","modified":1701222323591},{"_id":"public/2023/10/25/nowcoder/index.html","hash":"ce0877d5c59270742b3a62194a82e69bdc788472","modified":1701222323591},{"_id":"public/2023/09/19/javaScript/index.html","hash":"be9d0d1c5f75511d56cf859f2cfb5bf7aede1aa9","modified":1701222323591},{"_id":"public/2023/08/31/hello-world/index.html","hash":"a7469a185d52ce2e4e999dfa6da8cfa22f14688c","modified":1701222323591},{"_id":"public/archives/2023/08/index.html","hash":"b3e73f106a97cdb78cc6f098e056d022af678691","modified":1701222323591},{"_id":"public/archives/2023/index.html","hash":"813f48f2afc248578ef13ba12121669c643aa2e5","modified":1701222323591},{"_id":"public/archives/2023/09/index.html","hash":"3caef00930d3feee9de766806e739ea3e8608a94","modified":1701222323591},{"_id":"public/archives/index.html","hash":"296936cf0625a5ccf1ff500fc442b990c44a52f3","modified":1701222323591},{"_id":"public/archives/2023/10/index.html","hash":"a3363f891ddb5f675bca4a1c461bc58106757ea2","modified":1701222323591},{"_id":"public/404.html","hash":"394d4cc9e94e949913c71cace2b5bcbc3b88f43b","modified":1701222323591},{"_id":"public/links/index.html","hash":"9be91e52a3d7513f91a4f7b1984ae28fcebe490e","modified":1701222323591},{"_id":"public/categories/index.html","hash":"31f539c76dd139c55eeb85b3a2c15e843e30c82a","modified":1701222323591},{"_id":"public/tags/index.html","hash":"56485803782f5f0df0263c80186c76a9200a5e0b","modified":1701222323591},{"_id":"public/index.html","hash":"08d69e879c56ed4244a676fbde08d9dfc2921930","modified":1701222323591},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1701222323591},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1701222323591},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1701222323591},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1701222323591},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1701222323591},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1701222323591},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1701222323591},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1701222323591},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1701222323591},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1701222323591},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1701222323591},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1701222323591},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1701222323591},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1701222323591},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1701222323591},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1701222323591},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1701222323591},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1701222323591},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1701222323591},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1701222323591},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1701222323591},{"_id":"source/about/index.md","hash":"958b1571f47cc3413c63341f143d01825e706c65","modified":1701222469454},{"_id":"public/about/index.html","hash":"0d1644ddf7963162610b84e203154f0109c3bfc6","modified":1701226445666}],"Category":[],"Data":[],"Page":[{"title":"music","date":"2023-09-22T09:28:30.000Z","_content":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css\"> \n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js\"></script> \n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js\"></script> \n{% meting \"7868005687\" \"tencent\" \"playlist\" \"theme:#555\" \"mutex:true\" \"listmaxheight:1000px\" \"preload:auto\" %}\n","source":"music/index.md","raw":"---\ntitle: music\ndate: 2023-09-22 17:28:30\n---\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css\"> \n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js\"></script> \n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js\"></script> \n{% meting \"7868005687\" \"tencent\" \"playlist\" \"theme:#555\" \"mutex:true\" \"listmaxheight:1000px\" \"preload:auto\" %}\n","updated":"2023-09-22T09:29:01.675Z","path":"music/index.html","comments":1,"layout":"page","_id":"clpj3ujpe0000rcukfas5b0ra","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css\"> \n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js\"></script> \n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js\"></script> \n\n    <div id=\"aplayer-INsORcBg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7868005687\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"1000px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>\n","site":{"data":{}},"excerpt":"","more":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css\"> \n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js\"></script> \n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js\"></script> \n\n    <div id=\"aplayer-INsORcBg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7868005687\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"1000px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>\n"},{"title":"about","date":"2023-11-29T01:47:05.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-11-29 09:47:05\nlayout: about\n---\n","updated":"2023-11-29T01:47:49.454Z","path":"about/index.html","comments":1,"_id":"clpj6avu40000r8uke40927z7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AI_course","date":"2023-09-22T08:11:52.000Z","cover":"OIP.jpeg","_content":"\n#lab 01\n##1 \n```\nint main()\n{\n    //array of vectors\n    int arr[5][2];\n   //result vector\n    int result[2]={0,0};\n   for (int i=0;i<5;i++){\n        cin>>arr[i][0];//x\n        result[0]+= arr[i][0];\n        cin>>arr[i][1];//y\n        result[1]+=arr[i][1];\n    }\n    cout<< \" The sum  vector is (\"<< result[0]<< \", \"<<result[1]<<')'<<endl;\n}\n```\n##2 \n![](OIP.jpeg)\n```\n// number of element in a vector\n    int N=4;\nint norm_L1(int arr[])\n{\n    long result = 0;\n    for(int i=0;i<N;i++){\n        result+=abs(arr[i]);\n    }\n    return  result;\n}\ndouble norm_L2(int arr[])\n{\n    double sqrSum=0;\n    for(int i=0;i<N;i++){\n        sqrSum+=arr[i]*arr[i];\n    }\n    return sqrt(sqrSum);\n}\nint main()\n{\n    int arr[N];\n    for( int i=0;i<N;i++){\n        cout<<\"arr[\"<<i<<\"]= \";\n        cin>>arr[i];\n    }\n   cout<< \"Vector's norm L1 = \"<< norm_L1(arr)<<'\\n';\n    cout<< \"Vecotr's norm L2 = \"<< norm_L2(arr)<< '\\n';\n   return 0;\n```\n\n","source":"_posts/AI-course.md","raw":"---\ntitle: AI_course\ndate: 2023-09-22 16:11:52\ncover: OIP.jpeg\ntags:\n---\n\n#lab 01\n##1 \n```\nint main()\n{\n    //array of vectors\n    int arr[5][2];\n   //result vector\n    int result[2]={0,0};\n   for (int i=0;i<5;i++){\n        cin>>arr[i][0];//x\n        result[0]+= arr[i][0];\n        cin>>arr[i][1];//y\n        result[1]+=arr[i][1];\n    }\n    cout<< \" The sum  vector is (\"<< result[0]<< \", \"<<result[1]<<')'<<endl;\n}\n```\n##2 \n![](OIP.jpeg)\n```\n// number of element in a vector\n    int N=4;\nint norm_L1(int arr[])\n{\n    long result = 0;\n    for(int i=0;i<N;i++){\n        result+=abs(arr[i]);\n    }\n    return  result;\n}\ndouble norm_L2(int arr[])\n{\n    double sqrSum=0;\n    for(int i=0;i<N;i++){\n        sqrSum+=arr[i]*arr[i];\n    }\n    return sqrt(sqrSum);\n}\nint main()\n{\n    int arr[N];\n    for( int i=0;i<N;i++){\n        cout<<\"arr[\"<<i<<\"]= \";\n        cin>>arr[i];\n    }\n   cout<< \"Vector's norm L1 = \"<< norm_L1(arr)<<'\\n';\n    cout<< \"Vecotr's norm L2 = \"<< norm_L2(arr)<< '\\n';\n   return 0;\n```\n\n","slug":"AI-course","published":1,"updated":"2023-09-22T08:14:35.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpi0001rcukaalmcqn8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>#lab 01<br>##1 </p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\">int main()<br>&#123;<br>    //array of vectors<br>    int arr[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">2</span>];<br>   //result vector<br>    int result[<span class=\"hljs-number\">2</span>]=&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>&#125;;<br>   for (int i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)&#123;<br>        cin&gt;&gt;arr[i][<span class=\"hljs-number\">0</span>];//x<br>        result[<span class=\"hljs-number\">0</span>]+= arr[i][<span class=\"hljs-number\">0</span>];<br>        cin&gt;&gt;arr[i][<span class=\"hljs-number\">1</span>];//y<br>        result[<span class=\"hljs-number\">1</span>]+=arr[i][<span class=\"hljs-number\">1</span>];<br>    &#125;<br>    cout&lt;&lt; <span class=\"hljs-string\">&quot; The sum  vector is (&quot;</span>&lt;&lt; result[<span class=\"hljs-number\">0</span>]&lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>&lt;&lt;result[<span class=\"hljs-number\">1</span>]&lt;&lt;<span class=\"hljs-string\">&#x27;)&#x27;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##2<br><img src=\"/OIP.jpeg\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// number of element in a vector</span><br>    <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">norm_L1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">long</span> result = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++)&#123;<br>        result+=<span class=\"hljs-built_in\">abs</span>(arr[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>  result;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">norm_L2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">double</span> sqrSum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++)&#123;<br>        sqrSum+=arr[i]*arr[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sqrt</span>(sqrSum);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> arr[N];<br>    <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++)&#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;arr[&quot;</span>&lt;&lt;i&lt;&lt;<span class=\"hljs-string\">&quot;]= &quot;</span>;<br>        cin&gt;&gt;arr[i];<br>    &#125;<br>   cout&lt;&lt; <span class=\"hljs-string\">&quot;Vector&#x27;s norm L1 = &quot;</span>&lt;&lt; <span class=\"hljs-built_in\">norm_L1</span>(arr)&lt;&lt;<span class=\"hljs-string\">&#x27;\\n&#x27;</span>;<br>    cout&lt;&lt; <span class=\"hljs-string\">&quot;Vecotr&#x27;s norm L2 = &quot;</span>&lt;&lt; <span class=\"hljs-built_in\">norm_L2</span>(arr)&lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>#lab 01<br>##1 </p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\">int main()<br>&#123;<br>    //array of vectors<br>    int arr[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">2</span>];<br>   //result vector<br>    int result[<span class=\"hljs-number\">2</span>]=&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>&#125;;<br>   for (int i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)&#123;<br>        cin&gt;&gt;arr[i][<span class=\"hljs-number\">0</span>];//x<br>        result[<span class=\"hljs-number\">0</span>]+= arr[i][<span class=\"hljs-number\">0</span>];<br>        cin&gt;&gt;arr[i][<span class=\"hljs-number\">1</span>];//y<br>        result[<span class=\"hljs-number\">1</span>]+=arr[i][<span class=\"hljs-number\">1</span>];<br>    &#125;<br>    cout&lt;&lt; <span class=\"hljs-string\">&quot; The sum  vector is (&quot;</span>&lt;&lt; result[<span class=\"hljs-number\">0</span>]&lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>&lt;&lt;result[<span class=\"hljs-number\">1</span>]&lt;&lt;<span class=\"hljs-string\">&#x27;)&#x27;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##2<br><img src=\"/OIP.jpeg\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// number of element in a vector</span><br>    <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">norm_L1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">long</span> result = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++)&#123;<br>        result+=<span class=\"hljs-built_in\">abs</span>(arr[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span>  result;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">norm_L2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">double</span> sqrSum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++)&#123;<br>        sqrSum+=arr[i]*arr[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sqrt</span>(sqrSum);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> arr[N];<br>    <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++)&#123;<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;arr[&quot;</span>&lt;&lt;i&lt;&lt;<span class=\"hljs-string\">&quot;]= &quot;</span>;<br>        cin&gt;&gt;arr[i];<br>    &#125;<br>   cout&lt;&lt; <span class=\"hljs-string\">&quot;Vector&#x27;s norm L1 = &quot;</span>&lt;&lt; <span class=\"hljs-built_in\">norm_L1</span>(arr)&lt;&lt;<span class=\"hljs-string\">&#x27;\\n&#x27;</span>;<br>    cout&lt;&lt; <span class=\"hljs-string\">&quot;Vecotr&#x27;s norm L2 = &quot;</span>&lt;&lt; <span class=\"hljs-built_in\">norm_L2</span>(arr)&lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;<br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"javaScript的学习笔记","date":"2023-09-19T14:04:47.000Z","_content":"\n<linkrel=\"stylesheet\"href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css\"> \n<scriptsrc=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js\"></script> \n<scriptsrc=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js\"></script> \n{% meting \"9129478\" \"tencent\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n## Day 1\n[参考来源](https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142^v94^chatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187)\n### 基本语法\n#### 1.5、JavaScript的输出\n页面输出\n``` codes\n<script>\n    document.write(\"Hello,World!\");\n</script>\n```\n控制台输出\\*注意：页面按F12弹出控制台*\\\n``` codes\n<script>\n    console.log(\"输出一条日志\");//最常用\n    console.info(\"输出一条信息\");\n    console.warn(\"输出一条警告\");\n    console.error(\"输出一条错误\");\n</script>\n```\n弹出窗口输出\n``` codes\n<script>\n    alert(\"Hello,World!\");\n</script>\n```\n#### 2.11.6、嵌套函数\n嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。\n```\nfunction fu() {\n    function zi() {\n        console.log(\"我是儿子\")\n    }\n\n    zi();\n}\n\nfu();\n```\n#### 2.11.8、立即执行函数\n```\n(function () {\n    alert(\"我是一个匿名函数\");\n})();\n```\n#### 2.12.2、用构造函数创建对象\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n    // 设置对象的方法\n    this.sayName = function () {\n        console.log(this.name);\n    };\n}\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nconsole.log(person1);\nconsole.log(person2);\nconsole.log(person3);\n\n```\n#### this\n当以函数的形式调用时，this是window\n当以方法的形式调用时，谁调用方法this就是谁\n当以构造函数的形式调用时，this就是新创建的那个对象\n#### 2.12.3、原型\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n    // 设置对象的方法\n    this.sayName = sayName\n}\n\n// 抽取方法为全局函数\nfunction sayName() {\n    console.log(this.name);\n}\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nperson1.sayName();\nperson2.sayName();\nperson3.sayName();\n```\n但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n}\n\n// 在Person类的原型对象中添加方法\nPerson.prototype.sayName = function() {\n    console.log(this.name);\n};\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nperson1.sayName();\nperson2.sayName();\nperson3.sayName();\n```\n我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。\n#### 2.12.7、对象继承\nJavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：\n\n原型链继承\n借用构造函数继承\n组合继承（重要）\n##### 原型链继承\n```// 定义父类型构造函数\nfunction SupperType() {\n    this.supProp = 'Supper property';\n}\n\n// 给父类型的原型添加方法\nSupperType.prototype.showSupperProp = function () {\n    console.log(this.supProp);\n};\n\n// 定义子类型的构造函数\nfunction SubType() {\n    this.subProp = 'Sub property';\n}\n\n// 创建父类型的对象赋值给子类型的原型\nSubType.prototype = new SupperType();\n\n// 将子类型原型的构造属性设置为子类型\nSubType.prototype.constructor = SubType;\n\n// 给子类型原型添加方法\nSubType.prototype.showSubProp = function () {\n    console.log(this.subProp)\n};\n\n// 创建子类型的对象: 可以调用父类型的方法\nvar subType = new SubType();\nsubType.showSupperProp();\nsubType.showSubProp();\n```\n##### 借用构造函数继承\n```\n// 定义父类型构造函数\nfunction SuperType(name) {\n    this.name = name;\n    this.showSupperName = function () {\n        console.log(this.name);\n    };\n}\n\n// 定义子类型的构造函数\nfunction SubType(name, age) {\n    // 在子类型中调用call方法继承自SuperType\n    SuperType.call(this, name);\n    this.age = age;\n}\n\n// 给子类型的原型添加方法\nSubType.prototype.showSubName = function () {\n    console.log(this.name);\n};\n\n// 创建子类型的对象然后调用\nvar subType = new SubType(\"孙悟空\", 20);\nsubType.showSupperName();\nsubType.showSubName();\nconsole.log(subType.name);\nconsole.log(subType.age);\n```\n##### 组合继承\n```\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nPerson.prototype.setName = function (name) {\n    this.name = name;\n};\n\nfunction Student(name, age, price) {\n    Person.call(this, name, age); // 为了得到父类型的实例属性和方法\n    this.price = price; // 添加子类型私有的属性\n}\n\nStudent.prototype = new Person(); // 为了得到父类型的原型属性和方法\nStudent.prototype.constructor = Student; // 修正constructor属性指向\nStudent.prototype.setPrice = function (price) { // 添加子类型私有的方法 \n    this.price = price;\n};\n\nvar s = new Student(\"孙悟空\", 24, 15000);\nconsole.log(s.name, s.age, s.price);\ns.setName(\"猪八戒\");\ns.setPrice(16000);\nconsole.log(s.name, s.age, s.price);\n```\n#### 2.12.8、垃圾回收\n在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n}\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nperson1 = null;\nperson2 = null;\nperson3 = null;\n```\n#### 创建数组\n```\nvar arr = [1, \"2\", 3, \"4\", 5, \"6\", 7, \"8\", 9];\n```\n#### 数组方法\npush()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.push(\"唐僧\", \"蜘蛛精\", \"白骨精\", \"玉兔精\");\nconsole.log(arr);\nconsole.log(result);\n```\npop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.pop();\nconsole.log(arr);\nconsole.log(result);\n```\nunshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.unshift(\"牛魔王\", \"二郎神\");\nconsole.log(arr);\nconsole.log(result);\n```\nshift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.shift();\nconsole.log(arr);\nconsole.log(result);\n```\nforEach()方法演示：该方法可以用来遍历数组\n浏览器会在回调函数中传递三个参数：\n\n第一个参数：就是当前正在遍历的元素\n第二个参数：就是当前正在遍历的元素的索引\n第三个参数：就是正在遍历的数组\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\narr.forEach(function (value, index, obj) {\n    console.log(value + \" #### \" + index + \" #### \" + obj);\n});\n\n```\n![result](https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png)\nslice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\", \"唐僧\", \"白骨精\"];\nvar result = arr.slice(1, 4);\nconsole.log(result);\nresult = arr.slice(3);\nconsole.log(result);\nresult = arr.slice(1, -2);\nconsole.log(result);\n```\n![result](https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png)\nsplice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回\n\n参数：\n\n第一个参数：表示开始位置的索引\n第二个参数：表示要删除的元素数量\n第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\", \"唐僧\", \"白骨精\"];\nvar result = arr.splice(3, 2);\nconsole.log(arr);\nconsole.log(result);\nresult = arr.splice(1, 0, \"牛魔王\", \"铁扇公主\", \"红孩儿\");\nconsole.log(arr);\nconsole.log(result);\n```\n![result](https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png)\nconcat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar arr2 = [\"白骨精\", \"玉兔精\", \"蜘蛛精\"];\nvar arr3 = [\"二郎神\", \"太上老君\", \"玉皇大帝\"];\nvar result = arr.concat(arr2, arr3, \"牛魔王\", \"铁扇公主\");\nconsole.log(result);\n```\njoin()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.join(\"@-@\");\nconsole.log(result);\n```\n![result](https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png)\nreverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\narr.reverse();\nconsole.log(arr);\n```\nsort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序\n\n#### RegExp 正则表达式\n##### 3.6.2.1、使用对象创建\n语法格式：\n```\nvar 变量名 = new RegExp(\"正则表达式\",\"匹配模式\");\n```\n匹配模式：\n\ni：忽略大小写\ng：全局匹配模式\nig：忽略大小写且全局匹配模式\n```\n// 这个正则表达式可以来检查一个字符串中是否含有a\nvar reg = new RegExp(\"ab\", \"i\");\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n##### 3.6.2.2、使用字面量创建\n语法格式：\n```\nvar 变量名 = /正则表达式/匹配模式;\n```\n注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓\n```\n// 这个正则表达式可以来检查一个字符串中是否含有a\nvar reg = /a/i;\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n##### 3.6.3、正则进阶\n``` 需求信息：创建一个正则表达式，检查一个字符串中是否有a或b\n// 这个正则表达式可以来检查一个字符串中是否含有a\nvar reg = /a|b|c/;\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n``` 需求信息：创建一个正则表达式，检查一个字符串中是否有字母\n// 这个正则表达式可以来检查一个字符串中是否含有字母\nvar reg = /[A-z]/;\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n\n常见组合：\n\n[a-z]：任意小写字母\n[A-Z]：任意大写字母\n[A-z]：任意字母\n[0-9]：任意数字\n```需求信息：创建一个正则表达式，检查一个字符串中是否含有 abc 或 adc 或 aec\n// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec\nvar reg = /a[bde]c/;\nvar str = \"abc123\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n判断除了某些字符序列，只需要这么写[^字符序列]\n常见组合：\n\n[^a-z]：除了任意小写字母\n[^A-Z]：除了任意大写字母\n[^A-z]：除了任意字母\n[^0-9]：除了任意数字\n``` 需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母\n// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母\nvar reg = /[^0-9]/;\nvar str = \"0123456789\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n##### 3.6.4、正则方法\nsplit()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分\n```\nvar str = \"1a2b3c4d5e6f7\";\nvar result = str.split(/[A-z]/);\nconsole.log(result);\n```\nsearch()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用\n```\nvar str = \"hello abc hello aec afc\";\nvar result = str.search(/a[bef]c/);\nconsole.log(result);\n```\nmatch()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果\n```\nvar str = \"1a2a3a4a5e6f7A8B9C\";\nvar result = str.match(/[a-z]/ig);\nconsole.log(result);\n```\nreplace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部\n参数：\n\n第一个参数：被替换的内容，可以接受一个正则表达式作为参数\n第二个参数：新的内容\n```\nvar str = \"1a2a3a4a5e6f7A8B9C\";\nvar result = str.replace(/[a-z]/gi, \"@_@\");\nconsole.log(result);\n```\n##### 3.6.5、正则量词\n通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：\n\n{n} ：正好出现n次\n{m,} ：出现m次及以上\n{m,n} ：出现m-n次\n+ ：至少一个，相当于{1,}\n* ：0个或多个，相当于{0,}\n? ：0个或1个，相当于{0,1}\n```\nvar str = \"abbc\";\n\nreg = /(ab){3}/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /b{3}/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab{1,3}c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab{3,}c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab+c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab*c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab?c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\n```\nf f t f t t f\n##### 3.6.6、正则高阶\n如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。\n\n^ ：表示开头，注意它在[^字符序列]表达的意思不一样\n$ ：表示结尾\n``` 需求描述：检查一个字符串中是否以a开头\nvar str = \"abcabca\";\nvar reg = /^a/;\nconsole.log(reg.test(str));\n```\n``` 需求描述：检查一个字符串中是否以a结尾\nvar str = \"abcabca\";\nvar reg = /a$/;\nconsole.log(reg.test(str));\n```\n如果我们想要检查一个字符串中是否含有.和\\就会使用转义字符\n\n\\. ：表示.\n\\\\ ：表示\\\n```\nvar reg1 = /\\./;\nvar reg2 = /\\\\/;\nvar reg3 = new RegExp(\"\\\\.\");\nvar reg4 = new RegExp(\"\\\\\\\\\");\n```\n除了以上两种特殊的字符，其实还有很多如下所示：\n\n\\w ：任意字母、数字、_，相当于[A-z0-9_]\n\\W ：除了字母、数字、_，相当于[^A-z0-9_]\n\\d ：任意的数字，相当于[0-9]\n\\D ：除了任意的数字，相当于[^0-9]\n\\s ：空格\n\\S ：除了空格\n\\b ：单词边界\n\\B ：除了单词边界\n``` 需求描述：创建一个正则表达式，去除掉字符串中的前后的空格\nvar str = \"  hello child  \"\nvar reg = /^\\s*|\\s*$/g;\nconsole.log(str);\nstr = str.replace(reg, \"\");\nconsole.log(str);\n```\n``` 需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child\nvar str = \"hello child\"\nvar reg = /\\bchild\\b/;\nconsole.log(reg.test(str));\n```\n##### 3.6.7、正则案例\n``` 检查手机号\nvar phoneStr = \"15131494600\";\nvar phoneReg = /^1[3-9][0-9]{9}$/;\nconsole.log(phoneReg.test(phoneStr));\n```\n``` 检查邮箱号\nvar emailStr = \"abc.def@163.com\";\nvar emailReg = /^\\w{3,}(\\.\\w+)*@[A-z0-9]+(\\.[A-z]{2,5}){1,2}$/;\nconsole.log(emailReg.test(emailStr));\n```\n## Day 2 \n### JavaScript DOM\n当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。\n\nHTML DOM 模型被结构化为 对象树\n常用节点分为四类：\n\n文档节点：整个HTML文档\n元素节点：HTML文档中的HTML标签\n属性节点：元素的属性\n文本节点：HTML标签中的文本内容\n#### 4.3.1、查找 HTML 元素\n|             方法                    |\t            描述          |\n|------------------------------------ |---------------------------|\n|document.getElementById(id)\t      |  通过元素 id 来查找元素.  |\n|document.getElementsByTagName(name)  | 通过标签名来查找元素。    |\n|document.getElementsByClassName(name)|通过类名来查找元素。       |\n|document.querySelector(CSS选择器)\t  |通过CSS选择器选择一个元素。|\n|document.querySelectorAll(CSS选择器) |通过CSS选择器选择多个元素。|\n``` 需求描述：创建一个按钮，通过id获取按钮节点对象\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button id=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementById(\"btn\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n```需求描述：创建一个按钮，通过标签名获取按钮节点对象数组\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button>我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementsByTagName(\"button\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n```需求描述：创建一个按钮，通过类名获取按钮节点对象数组\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button class=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementsByClassName(\"btn\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n``` 需求描述：创建一个按钮，通过CSS选择器选择该按钮\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button class=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.querySelector(\".btn\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n``` 需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<ul class=\"list\">\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n    <li>列表项4</li>\n</ul>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var list = document.querySelectorAll(\".list li\");\n    console.log(list);\n</script>\n</body>\n</html>\n```\n#### 4.3.2、获取 HTML 的值\n|方法\t                          |描述                         |\n|---------------------------------| ----------------------------|\n|元素节点.innerText\t              |获取 HTML 元素的 inner Text。|\n|元素节点.innerHTML \t          |获取 HTML 元素的 inner HTML。|\n|元素节点.属性\t                  |获取 HTML 元素的属性值。     |\n|元素节点.getAttribute(attribute) |获取 HTML 元素的属性值。     |\n|元素节点.style.样式\t          |获取 HTML 元素的行内样式值。 |\n``` 需求描述：创建一个按钮，然后获取按钮的文本内容\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button id=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementById(\"btn\");\n    console.log(btn.innerText);\n</script>\n</body>\n</html>\n```\n","source":"_posts/javaScript.md","raw":"---\ntitle: javaScript的学习笔记\ndate: 2023-09-19 22:04:47\ntags:\n---\n\n<linkrel=\"stylesheet\"href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css\"> \n<scriptsrc=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js\"></script> \n<scriptsrc=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js\"></script> \n{% meting \"9129478\" \"tencent\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n## Day 1\n[参考来源](https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142^v94^chatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187)\n### 基本语法\n#### 1.5、JavaScript的输出\n页面输出\n``` codes\n<script>\n    document.write(\"Hello,World!\");\n</script>\n```\n控制台输出\\*注意：页面按F12弹出控制台*\\\n``` codes\n<script>\n    console.log(\"输出一条日志\");//最常用\n    console.info(\"输出一条信息\");\n    console.warn(\"输出一条警告\");\n    console.error(\"输出一条错误\");\n</script>\n```\n弹出窗口输出\n``` codes\n<script>\n    alert(\"Hello,World!\");\n</script>\n```\n#### 2.11.6、嵌套函数\n嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。\n```\nfunction fu() {\n    function zi() {\n        console.log(\"我是儿子\")\n    }\n\n    zi();\n}\n\nfu();\n```\n#### 2.11.8、立即执行函数\n```\n(function () {\n    alert(\"我是一个匿名函数\");\n})();\n```\n#### 2.12.2、用构造函数创建对象\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n    // 设置对象的方法\n    this.sayName = function () {\n        console.log(this.name);\n    };\n}\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nconsole.log(person1);\nconsole.log(person2);\nconsole.log(person3);\n\n```\n#### this\n当以函数的形式调用时，this是window\n当以方法的形式调用时，谁调用方法this就是谁\n当以构造函数的形式调用时，this就是新创建的那个对象\n#### 2.12.3、原型\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n    // 设置对象的方法\n    this.sayName = sayName\n}\n\n// 抽取方法为全局函数\nfunction sayName() {\n    console.log(this.name);\n}\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nperson1.sayName();\nperson2.sayName();\nperson3.sayName();\n```\n但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n}\n\n// 在Person类的原型对象中添加方法\nPerson.prototype.sayName = function() {\n    console.log(this.name);\n};\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nperson1.sayName();\nperson2.sayName();\nperson3.sayName();\n```\n我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。\n#### 2.12.7、对象继承\nJavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：\n\n原型链继承\n借用构造函数继承\n组合继承（重要）\n##### 原型链继承\n```// 定义父类型构造函数\nfunction SupperType() {\n    this.supProp = 'Supper property';\n}\n\n// 给父类型的原型添加方法\nSupperType.prototype.showSupperProp = function () {\n    console.log(this.supProp);\n};\n\n// 定义子类型的构造函数\nfunction SubType() {\n    this.subProp = 'Sub property';\n}\n\n// 创建父类型的对象赋值给子类型的原型\nSubType.prototype = new SupperType();\n\n// 将子类型原型的构造属性设置为子类型\nSubType.prototype.constructor = SubType;\n\n// 给子类型原型添加方法\nSubType.prototype.showSubProp = function () {\n    console.log(this.subProp)\n};\n\n// 创建子类型的对象: 可以调用父类型的方法\nvar subType = new SubType();\nsubType.showSupperProp();\nsubType.showSubProp();\n```\n##### 借用构造函数继承\n```\n// 定义父类型构造函数\nfunction SuperType(name) {\n    this.name = name;\n    this.showSupperName = function () {\n        console.log(this.name);\n    };\n}\n\n// 定义子类型的构造函数\nfunction SubType(name, age) {\n    // 在子类型中调用call方法继承自SuperType\n    SuperType.call(this, name);\n    this.age = age;\n}\n\n// 给子类型的原型添加方法\nSubType.prototype.showSubName = function () {\n    console.log(this.name);\n};\n\n// 创建子类型的对象然后调用\nvar subType = new SubType(\"孙悟空\", 20);\nsubType.showSupperName();\nsubType.showSubName();\nconsole.log(subType.name);\nconsole.log(subType.age);\n```\n##### 组合继承\n```\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nPerson.prototype.setName = function (name) {\n    this.name = name;\n};\n\nfunction Student(name, age, price) {\n    Person.call(this, name, age); // 为了得到父类型的实例属性和方法\n    this.price = price; // 添加子类型私有的属性\n}\n\nStudent.prototype = new Person(); // 为了得到父类型的原型属性和方法\nStudent.prototype.constructor = Student; // 修正constructor属性指向\nStudent.prototype.setPrice = function (price) { // 添加子类型私有的方法 \n    this.price = price;\n};\n\nvar s = new Student(\"孙悟空\", 24, 15000);\nconsole.log(s.name, s.age, s.price);\ns.setName(\"猪八戒\");\ns.setPrice(16000);\nconsole.log(s.name, s.age, s.price);\n```\n#### 2.12.8、垃圾回收\n在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。\n```\n// 使用构造函数来创建对象\nfunction Person(name, age) {\n    // 设置对象的属性\n    this.name = name;\n    this.age = age;\n}\n\nvar person1 = new Person(\"孙悟空\", 18);\nvar person2 = new Person(\"猪八戒\", 19);\nvar person3 = new Person(\"沙和尚\", 20);\n\nperson1 = null;\nperson2 = null;\nperson3 = null;\n```\n#### 创建数组\n```\nvar arr = [1, \"2\", 3, \"4\", 5, \"6\", 7, \"8\", 9];\n```\n#### 数组方法\npush()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.push(\"唐僧\", \"蜘蛛精\", \"白骨精\", \"玉兔精\");\nconsole.log(arr);\nconsole.log(result);\n```\npop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.pop();\nconsole.log(arr);\nconsole.log(result);\n```\nunshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.unshift(\"牛魔王\", \"二郎神\");\nconsole.log(arr);\nconsole.log(result);\n```\nshift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.shift();\nconsole.log(arr);\nconsole.log(result);\n```\nforEach()方法演示：该方法可以用来遍历数组\n浏览器会在回调函数中传递三个参数：\n\n第一个参数：就是当前正在遍历的元素\n第二个参数：就是当前正在遍历的元素的索引\n第三个参数：就是正在遍历的数组\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\narr.forEach(function (value, index, obj) {\n    console.log(value + \" #### \" + index + \" #### \" + obj);\n});\n\n```\n![result](https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png)\nslice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\", \"唐僧\", \"白骨精\"];\nvar result = arr.slice(1, 4);\nconsole.log(result);\nresult = arr.slice(3);\nconsole.log(result);\nresult = arr.slice(1, -2);\nconsole.log(result);\n```\n![result](https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png)\nsplice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回\n\n参数：\n\n第一个参数：表示开始位置的索引\n第二个参数：表示要删除的元素数量\n第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\", \"唐僧\", \"白骨精\"];\nvar result = arr.splice(3, 2);\nconsole.log(arr);\nconsole.log(result);\nresult = arr.splice(1, 0, \"牛魔王\", \"铁扇公主\", \"红孩儿\");\nconsole.log(arr);\nconsole.log(result);\n```\n![result](https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png)\nconcat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar arr2 = [\"白骨精\", \"玉兔精\", \"蜘蛛精\"];\nvar arr3 = [\"二郎神\", \"太上老君\", \"玉皇大帝\"];\nvar result = arr.concat(arr2, arr3, \"牛魔王\", \"铁扇公主\");\nconsole.log(result);\n```\njoin()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\nvar result = arr.join(\"@-@\");\nconsole.log(result);\n```\n![result](https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png)\nreverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组\n```\nvar arr = [\"孙悟空\", \"猪八戒\", \"沙和尚\"];\narr.reverse();\nconsole.log(arr);\n```\nsort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序\n\n#### RegExp 正则表达式\n##### 3.6.2.1、使用对象创建\n语法格式：\n```\nvar 变量名 = new RegExp(\"正则表达式\",\"匹配模式\");\n```\n匹配模式：\n\ni：忽略大小写\ng：全局匹配模式\nig：忽略大小写且全局匹配模式\n```\n// 这个正则表达式可以来检查一个字符串中是否含有a\nvar reg = new RegExp(\"ab\", \"i\");\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n##### 3.6.2.2、使用字面量创建\n语法格式：\n```\nvar 变量名 = /正则表达式/匹配模式;\n```\n注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓\n```\n// 这个正则表达式可以来检查一个字符串中是否含有a\nvar reg = /a/i;\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n##### 3.6.3、正则进阶\n``` 需求信息：创建一个正则表达式，检查一个字符串中是否有a或b\n// 这个正则表达式可以来检查一个字符串中是否含有a\nvar reg = /a|b|c/;\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n``` 需求信息：创建一个正则表达式，检查一个字符串中是否有字母\n// 这个正则表达式可以来检查一个字符串中是否含有字母\nvar reg = /[A-z]/;\nvar str = \"Abc\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n\n常见组合：\n\n[a-z]：任意小写字母\n[A-Z]：任意大写字母\n[A-z]：任意字母\n[0-9]：任意数字\n```需求信息：创建一个正则表达式，检查一个字符串中是否含有 abc 或 adc 或 aec\n// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec\nvar reg = /a[bde]c/;\nvar str = \"abc123\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n判断除了某些字符序列，只需要这么写[^字符序列]\n常见组合：\n\n[^a-z]：除了任意小写字母\n[^A-Z]：除了任意大写字母\n[^A-z]：除了任意字母\n[^0-9]：除了任意数字\n``` 需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母\n// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母\nvar reg = /[^0-9]/;\nvar str = \"0123456789\";\nvar result = reg.test(str);\nconsole.log(result);\n```\n##### 3.6.4、正则方法\nsplit()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分\n```\nvar str = \"1a2b3c4d5e6f7\";\nvar result = str.split(/[A-z]/);\nconsole.log(result);\n```\nsearch()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用\n```\nvar str = \"hello abc hello aec afc\";\nvar result = str.search(/a[bef]c/);\nconsole.log(result);\n```\nmatch()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果\n```\nvar str = \"1a2a3a4a5e6f7A8B9C\";\nvar result = str.match(/[a-z]/ig);\nconsole.log(result);\n```\nreplace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部\n参数：\n\n第一个参数：被替换的内容，可以接受一个正则表达式作为参数\n第二个参数：新的内容\n```\nvar str = \"1a2a3a4a5e6f7A8B9C\";\nvar result = str.replace(/[a-z]/gi, \"@_@\");\nconsole.log(result);\n```\n##### 3.6.5、正则量词\n通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：\n\n{n} ：正好出现n次\n{m,} ：出现m次及以上\n{m,n} ：出现m-n次\n+ ：至少一个，相当于{1,}\n* ：0个或多个，相当于{0,}\n? ：0个或1个，相当于{0,1}\n```\nvar str = \"abbc\";\n\nreg = /(ab){3}/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /b{3}/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab{1,3}c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab{3,}c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab+c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab*c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\nreg = /ab?c/;\nconsole.log(reg.test(str));\nconsole.log(\"===============\");\n```\nf f t f t t f\n##### 3.6.6、正则高阶\n如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。\n\n^ ：表示开头，注意它在[^字符序列]表达的意思不一样\n$ ：表示结尾\n``` 需求描述：检查一个字符串中是否以a开头\nvar str = \"abcabca\";\nvar reg = /^a/;\nconsole.log(reg.test(str));\n```\n``` 需求描述：检查一个字符串中是否以a结尾\nvar str = \"abcabca\";\nvar reg = /a$/;\nconsole.log(reg.test(str));\n```\n如果我们想要检查一个字符串中是否含有.和\\就会使用转义字符\n\n\\. ：表示.\n\\\\ ：表示\\\n```\nvar reg1 = /\\./;\nvar reg2 = /\\\\/;\nvar reg3 = new RegExp(\"\\\\.\");\nvar reg4 = new RegExp(\"\\\\\\\\\");\n```\n除了以上两种特殊的字符，其实还有很多如下所示：\n\n\\w ：任意字母、数字、_，相当于[A-z0-9_]\n\\W ：除了字母、数字、_，相当于[^A-z0-9_]\n\\d ：任意的数字，相当于[0-9]\n\\D ：除了任意的数字，相当于[^0-9]\n\\s ：空格\n\\S ：除了空格\n\\b ：单词边界\n\\B ：除了单词边界\n``` 需求描述：创建一个正则表达式，去除掉字符串中的前后的空格\nvar str = \"  hello child  \"\nvar reg = /^\\s*|\\s*$/g;\nconsole.log(str);\nstr = str.replace(reg, \"\");\nconsole.log(str);\n```\n``` 需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child\nvar str = \"hello child\"\nvar reg = /\\bchild\\b/;\nconsole.log(reg.test(str));\n```\n##### 3.6.7、正则案例\n``` 检查手机号\nvar phoneStr = \"15131494600\";\nvar phoneReg = /^1[3-9][0-9]{9}$/;\nconsole.log(phoneReg.test(phoneStr));\n```\n``` 检查邮箱号\nvar emailStr = \"abc.def@163.com\";\nvar emailReg = /^\\w{3,}(\\.\\w+)*@[A-z0-9]+(\\.[A-z]{2,5}){1,2}$/;\nconsole.log(emailReg.test(emailStr));\n```\n## Day 2 \n### JavaScript DOM\n当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。\n\nHTML DOM 模型被结构化为 对象树\n常用节点分为四类：\n\n文档节点：整个HTML文档\n元素节点：HTML文档中的HTML标签\n属性节点：元素的属性\n文本节点：HTML标签中的文本内容\n#### 4.3.1、查找 HTML 元素\n|             方法                    |\t            描述          |\n|------------------------------------ |---------------------------|\n|document.getElementById(id)\t      |  通过元素 id 来查找元素.  |\n|document.getElementsByTagName(name)  | 通过标签名来查找元素。    |\n|document.getElementsByClassName(name)|通过类名来查找元素。       |\n|document.querySelector(CSS选择器)\t  |通过CSS选择器选择一个元素。|\n|document.querySelectorAll(CSS选择器) |通过CSS选择器选择多个元素。|\n``` 需求描述：创建一个按钮，通过id获取按钮节点对象\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button id=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementById(\"btn\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n```需求描述：创建一个按钮，通过标签名获取按钮节点对象数组\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button>我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementsByTagName(\"button\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n```需求描述：创建一个按钮，通过类名获取按钮节点对象数组\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button class=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementsByClassName(\"btn\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n``` 需求描述：创建一个按钮，通过CSS选择器选择该按钮\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button class=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.querySelector(\".btn\");\n    console.log(btn);\n</script>\n</body>\n</html>\n```\n``` 需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<ul class=\"list\">\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n    <li>列表项4</li>\n</ul>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var list = document.querySelectorAll(\".list li\");\n    console.log(list);\n</script>\n</body>\n</html>\n```\n#### 4.3.2、获取 HTML 的值\n|方法\t                          |描述                         |\n|---------------------------------| ----------------------------|\n|元素节点.innerText\t              |获取 HTML 元素的 inner Text。|\n|元素节点.innerHTML \t          |获取 HTML 元素的 inner HTML。|\n|元素节点.属性\t                  |获取 HTML 元素的属性值。     |\n|元素节点.getAttribute(attribute) |获取 HTML 元素的属性值。     |\n|元素节点.style.样式\t          |获取 HTML 元素的行内样式值。 |\n``` 需求描述：创建一个按钮，然后获取按钮的文本内容\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<button id=\"btn\">我是按钮</button>\n\n<!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 -->\n<script>\n    var btn = document.getElementById(\"btn\");\n    console.log(btn.innerText);\n</script>\n</body>\n</html>\n```\n","slug":"javaScript","published":1,"updated":"2023-09-24T05:21:24.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpn0002rcuk221098gh","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>&lt;linkrel&#x3D;”stylesheet”href&#x3D;”<a href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css%22%3E\">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;&gt;</a> </p>\n<p>&lt;scriptsrc&#x3D;”<a href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js%22%3E\">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;&gt;</a></script> </p>\n<p>&lt;scriptsrc&#x3D;”<a href=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js%22%3E\">https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;</a></script> </p>\n\n    <div id=\"aplayer-yoveprgy\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"9129478\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FF4081\"\n    ></div>\n<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h2><p><a href=\"https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142%5Ev94%5EchatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187\">参考来源</a></p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><h4 id=\"1-5、JavaScript的输出\"><a href=\"#1-5、JavaScript的输出\" class=\"headerlink\" title=\"1.5、JavaScript的输出\"></a>1.5、JavaScript的输出</h4><p>页面输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs codes\">&lt;script&gt;<br>    document.write(&quot;Hello,World!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>控制台输出*注意：页面按F12弹出控制台*\\</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs codes\">&lt;script&gt;<br>    console.log(&quot;输出一条日志&quot;);//最常用<br>    console.info(&quot;输出一条信息&quot;);<br>    console.warn(&quot;输出一条警告&quot;);<br>    console.error(&quot;输出一条错误&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>弹出窗口输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs codes\">&lt;script&gt;<br>    alert(&quot;Hello,World!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-11-6、嵌套函数\"><a href=\"#2-11-6、嵌套函数\" class=\"headerlink\" title=\"2.11.6、嵌套函数\"></a>2.11.6、嵌套函数</h4><p>嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">function <span class=\"hljs-built_in\">fu</span>() &#123;<br>    function <span class=\"hljs-built_in\">zi</span>() &#123;<br>        console<span class=\"hljs-selector-class\">.log</span>(&quot;我是儿子&quot;)<br>    &#125;<br><br>    <span class=\"hljs-built_in\">zi</span>();<br>&#125;<br><br><span class=\"hljs-built_in\">fu</span>();<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-11-8、立即执行函数\"><a href=\"#2-11-8、立即执行函数\" class=\"headerlink\" title=\"2.11.8、立即执行函数\"></a>2.11.8、立即执行函数</h4><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\">(<span class=\"hljs-name\">function</span> () &#123;<br>    alert(<span class=\"hljs-string\">&quot;我是一个匿名函数&quot;</span>)<span class=\"hljs-comment\">;</span><br>&#125;)()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2-12-2、用构造函数创建对象\"><a href=\"#2-12-2、用构造函数创建对象\" class=\"headerlink\" title=\"2.12.2、用构造函数创建对象\"></a>2.12.2、用构造函数创建对象</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    this.name = name;<br>    this.age = age;<br>    <span class=\"hljs-comment\">// 设置对象的方法</span><br>    this.sayName = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(this.name);<br>    &#125;;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(person1);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(person2);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(person3);<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><p>当以函数的形式调用时，this是window<br>当以方法的形式调用时，谁调用方法this就是谁<br>当以构造函数的形式调用时，this就是新创建的那个对象</p>\n<h4 id=\"2-12-3、原型\"><a href=\"#2-12-3、原型\" class=\"headerlink\" title=\"2.12.3、原型\"></a>2.12.3、原型</h4><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span></span>(name, age) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.age = age;<br>    <span class=\"hljs-comment\">// 设置对象的方法</span><br>    <span class=\"hljs-built_in\">this</span>.sayName = sayName<br>&#125;<br><br><span class=\"hljs-comment\">// 抽取方法为全局函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayName</span></span>() &#123;<br>    console.log(<span class=\"hljs-built_in\">this</span>.name);<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br>person1.sayName();<br>person2.sayName();<br>person3.sayName();<br></code></pre></td></tr></table></figure>\n<p>但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-comment\">// 在Person类的原型对象中添加方法</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br>person1.<span class=\"hljs-title function_\">sayName</span>();<br>person2.<span class=\"hljs-title function_\">sayName</span>();<br>person3.<span class=\"hljs-title function_\">sayName</span>();<br></code></pre></td></tr></table></figure>\n<p>我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p>\n<h4 id=\"2-12-7、对象继承\"><a href=\"#2-12-7、对象继承\" class=\"headerlink\" title=\"2.12.7、对象继承\"></a>2.12.7、对象继承</h4><p>JavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：</p>\n<p>原型链继承<br>借用构造函数继承<br>组合继承（重要）</p>\n<h5 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h5><figure class=\"highlight plaintext\"><figcaption><span>定义父类型构造函数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs //\">function SupperType() &#123;<br>    this.supProp = &#x27;Supper property&#x27;;<br>&#125;<br><br>// 给父类型的原型添加方法<br>SupperType.prototype.showSupperProp = function () &#123;<br>    console.log(this.supProp);<br>&#125;;<br><br>// 定义子类型的构造函数<br>function SubType() &#123;<br>    this.subProp = &#x27;Sub property&#x27;;<br>&#125;<br><br>// 创建父类型的对象赋值给子类型的原型<br>SubType.prototype = new SupperType();<br><br>// 将子类型原型的构造属性设置为子类型<br>SubType.prototype.constructor = SubType;<br><br>// 给子类型原型添加方法<br>SubType.prototype.showSubProp = function () &#123;<br>    console.log(this.subProp)<br>&#125;;<br><br>// 创建子类型的对象: 可以调用父类型的方法<br>var subType = new SubType();<br>subType.showSupperProp();<br>subType.showSubProp();<br></code></pre></td></tr></table></figure>\n<h5 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 定义父类型构造函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">showSupperName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>&#125;<br><br><span class=\"hljs-comment\">// 定义子类型的构造函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 在子类型中调用call方法继承自SuperType</span><br>    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-comment\">// 给子类型的原型添加方法</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">showSubName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br><span class=\"hljs-comment\">// 创建子类型的对象然后调用</span><br><span class=\"hljs-keyword\">var</span> subType = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">20</span>);<br>subType.<span class=\"hljs-title function_\">showSupperName</span>();<br>subType.<span class=\"hljs-title function_\">showSubName</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(subType.<span class=\"hljs-property\">name</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(subType.<span class=\"hljs-property\">age</span>);<br></code></pre></td></tr></table></figure>\n<h5 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">setName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Student</span>(<span class=\"hljs-params\">name, age, price</span>) &#123;<br>    <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name, age); <span class=\"hljs-comment\">// 为了得到父类型的实例属性和方法</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">price</span> = price; <span class=\"hljs-comment\">// 添加子类型私有的属性</span><br>&#125;<br><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(); <span class=\"hljs-comment\">// 为了得到父类型的原型属性和方法</span><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Student</span>; <span class=\"hljs-comment\">// 修正constructor属性指向</span><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">setPrice</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">price</span>) &#123; <span class=\"hljs-comment\">// 添加子类型私有的方法 </span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">price</span> = price;<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">15000</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(s.<span class=\"hljs-property\">name</span>, s.<span class=\"hljs-property\">age</span>, s.<span class=\"hljs-property\">price</span>);<br>s.<span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>);<br>s.<span class=\"hljs-title function_\">setPrice</span>(<span class=\"hljs-number\">16000</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(s.<span class=\"hljs-property\">name</span>, s.<span class=\"hljs-property\">age</span>, s.<span class=\"hljs-property\">price</span>);<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-12-8、垃圾回收\"><a href=\"#2-12-8、垃圾回收\" class=\"headerlink\" title=\"2.12.8、垃圾回收\"></a>2.12.8、垃圾回收</h4><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span></span>(name, age) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.age = age;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br>person1 = <span class=\"hljs-literal\">null</span>;<br>person2 = <span class=\"hljs-literal\">null</span>;<br>person3 = <span class=\"hljs-literal\">null</span>;<br></code></pre></td></tr></table></figure>\n<h4 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">var arr</span> = [1, <span class=\"hljs-string\">&quot;2&quot;</span>, 3, <span class=\"hljs-string\">&quot;4&quot;</span>, 5, <span class=\"hljs-string\">&quot;6&quot;</span>, 7, <span class=\"hljs-string\">&quot;8&quot;</span>, 9];<br></code></pre></td></tr></table></figure>\n<h4 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h4><p>push()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-string\">&quot;唐僧&quot;</span>, <span class=\"hljs-string\">&quot;蜘蛛精&quot;</span>, <span class=\"hljs-string\">&quot;白骨精&quot;</span>, <span class=\"hljs-string\">&quot;玉兔精&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>pop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">pop</span>();<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>unshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.unshift(<span class=\"hljs-string\">&quot;牛魔王&quot;</span>, <span class=\"hljs-string\">&quot;二郎神&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>shift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.shift();<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>forEach()方法演示：该方法可以用来遍历数组<br>浏览器会在回调函数中传递三个参数：</p>\n<p>第一个参数：就是当前正在遍历的元素<br>第二个参数：就是当前正在遍历的元素的索引<br>第三个参数：就是正在遍历的数组</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br>arr.forEach(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, obj</span>) &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(value + <span class=\"hljs-string\">&quot; #### &quot;</span> + index + <span class=\"hljs-string\">&quot; #### &quot;</span> + obj);<br>&#125;);<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png\" alt=\"result\"><br>slice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-string\">&quot;唐僧&quot;</span>, <span class=\"hljs-string\">&quot;白骨精&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br>result = arr.<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br>result = arr.<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-2</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png\" alt=\"result\"><br>splice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p>\n<p>参数：</p>\n<p>第一个参数：表示开始位置的索引<br>第二个参数：表示要删除的元素数量<br>第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-string\">&quot;唐僧&quot;</span>, <span class=\"hljs-string\">&quot;白骨精&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">splice</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br>result = arr.<span class=\"hljs-built_in\">splice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;牛魔王&quot;</span>, <span class=\"hljs-string\">&quot;铁扇公主&quot;</span>, <span class=\"hljs-string\">&quot;红孩儿&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png\" alt=\"result\"><br>concat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-string\">&quot;白骨精&quot;</span>, <span class=\"hljs-string\">&quot;玉兔精&quot;</span>, <span class=\"hljs-string\">&quot;蜘蛛精&quot;</span>];<br><span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-string\">&quot;二郎神&quot;</span>, <span class=\"hljs-string\">&quot;太上老君&quot;</span>, <span class=\"hljs-string\">&quot;玉皇大帝&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.concat(arr2, arr3, <span class=\"hljs-string\">&quot;牛魔王&quot;</span>, <span class=\"hljs-string\">&quot;铁扇公主&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>join()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.join(<span class=\"hljs-string\">&quot;@-@&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png\" alt=\"result\"><br>reverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br>arr.<span class=\"hljs-built_in\">reverse</span>();<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br></code></pre></td></tr></table></figure>\n<p>sort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序</p>\n<h4 id=\"RegExp-正则表达式\"><a href=\"#RegExp-正则表达式\" class=\"headerlink\" title=\"RegExp 正则表达式\"></a>RegExp 正则表达式</h4><h5 id=\"3-6-2-1、使用对象创建\"><a href=\"#3-6-2-1、使用对象创建\" class=\"headerlink\" title=\"3.6.2.1、使用对象创建\"></a>3.6.2.1、使用对象创建</h5><p>语法格式：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">var</span> 变量名 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&quot;正则表达式&quot;</span>,<span class=\"hljs-string\">&quot;匹配模式&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>匹配模式：</p>\n<p>i：忽略大小写<br>g：全局匹配模式<br>ig：忽略大小写且全局匹配模式</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"><span class=\"hljs-comment\">// 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">reg</span> = new RegExp(<span class=\"hljs-string\">&quot;ab&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>);<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;Abc&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">reg</span>.<span class=\"hljs-keyword\">test</span>(str);<br>console.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-2-2、使用字面量创建\"><a href=\"#3-6-2-2、使用字面量创建\" class=\"headerlink\" title=\"3.6.2.2、使用字面量创建\"></a>3.6.2.2、使用字面量创建</h5><p>语法格式：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> 变量名 = <span class=\"hljs-regexp\">/正则表达式/</span>匹配模式;<br></code></pre></td></tr></table></figure>\n<p>注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">// 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/a/i</span>;<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;Abc&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = reg.test(str);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-3、正则进阶\"><a href=\"#3-6-3、正则进阶\" class=\"headerlink\" title=\"3.6.3、正则进阶\"></a>3.6.3、正则进阶</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否有a或b\">// 这个正则表达式可以来检查一个字符串中是否含有a<br>var reg = /a|b|c/;<br>var str = &quot;Abc&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否有字母\">// 这个正则表达式可以来检查一个字符串中是否含有字母<br>var reg = /[A-z]/;<br>var str = &quot;Abc&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n\n<p>常见组合：</p>\n<p>[a-z]：任意小写字母<br>[A-Z]：任意大写字母<br>[A-z]：任意字母<br>[0-9]：任意数字</p>\n<figure class=\"highlight plaintext\"><figcaption><span>abc 或 adc 或 aec</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否含有\">// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec<br>var reg = /a[bde]c/;<br>var str = &quot;abc123&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n<p>判断除了某些字符序列，只需要这么写[^字符序列]<br>常见组合：</p>\n<p>[^a-z]：除了任意小写字母<br>[^A-Z]：除了任意大写字母<br>[^A-z]：除了任意字母<br>[^0-9]：除了任意数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母\">// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母<br>var reg = /[^0-9]/;<br>var str = &quot;0123456789&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-4、正则方法\"><a href=\"#3-6-4、正则方法\" class=\"headerlink\" title=\"3.6.4、正则方法\"></a>3.6.4、正则方法</h5><p>split()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;1a2b3c4d5e6f7&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-regexp\">/[A-z]/</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>search()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;hello abc hello aec afc&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.search(<span class=\"hljs-regexp\">/a[bef]c/</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>match()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.match(<span class=\"hljs-regexp\">/[a-z]/ig</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>replace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部<br>参数：</p>\n<p>第一个参数：被替换的内容，可以接受一个正则表达式作为参数<br>第二个参数：新的内容</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[a-z]/gi</span>, <span class=\"hljs-string\">&quot;@_@&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-5、正则量词\"><a href=\"#3-6-5、正则量词\" class=\"headerlink\" title=\"3.6.5、正则量词\"></a>3.6.5、正则量词</h5><p>通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：</p>\n<p>{n} ：正好出现n次<br>{m,} ：出现m次及以上<br>{m,n} ：出现m-n次</p>\n<ul>\n<li>：至少一个，相当于{1,}</li>\n</ul>\n<ul>\n<li>：0个或多个，相当于{0,}<br>? ：0个或1个，相当于{0,1}<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;abbc&quot;</span>;<br><br>reg = <span class=\"hljs-regexp\">/(ab)&#123;3&#125;/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/b&#123;3&#125;/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab&#123;1,3&#125;c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab&#123;3,&#125;c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab+c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab*c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab?c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br></code></pre></td></tr></table></figure>\nf f t f t t f</li>\n</ul>\n<h5 id=\"3-6-6、正则高阶\"><a href=\"#3-6-6、正则高阶\" class=\"headerlink\" title=\"3.6.6、正则高阶\"></a>3.6.6、正则高阶</h5><p>如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。</p>\n<p>^ ：表示开头，注意它在[^字符序列]表达的意思不一样<br>$ ：表示结尾</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：检查一个字符串中是否以a开头\">var str = &quot;abcabca&quot;;<br>var reg = /^a/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：检查一个字符串中是否以a结尾\">var str = &quot;abcabca&quot;;<br>var reg = /a$/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure>\n<p>如果我们想要检查一个字符串中是否含有.和\\就会使用转义字符</p>\n<p>. ：表示.<br>\\ ：表示\\</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> reg1 = <span class=\"hljs-regexp\">/\\./</span>;<br><span class=\"hljs-keyword\">var</span> reg2 = <span class=\"hljs-regexp\">/\\\\/</span>;<br><span class=\"hljs-keyword\">var</span> reg3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&quot;\\\\.&quot;</span>);<br><span class=\"hljs-keyword\">var</span> reg4 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&quot;\\\\\\\\&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>除了以上两种特殊的字符，其实还有很多如下所示：</p>\n<p>\\w ：任意字母、数字、<em>，相当于[A-z0-9</em>]<br>\\W ：除了字母、数字、<em>，相当于[^A-z0-9</em>]<br>\\d ：任意的数字，相当于[0-9]<br>\\D ：除了任意的数字，相当于[^0-9]<br>\\s ：空格<br>\\S ：除了空格<br>\\b ：单词边界<br>\\B ：除了单词边界</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个正则表达式，去除掉字符串中的前后的空格\">var str = &quot;  hello child  &quot;<br>var reg = /^\\s*|\\s*$/g;<br>console.log(str);<br>str = str.replace(reg, &quot;&quot;);<br>console.log(str);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child\">var str = &quot;hello child&quot;<br>var reg = /\\bchild\\b/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-7、正则案例\"><a href=\"#3-6-7、正则案例\" class=\"headerlink\" title=\"3.6.7、正则案例\"></a>3.6.7、正则案例</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 检查手机号\">var phoneStr = &quot;15131494600&quot;;<br>var phoneReg = /^1[3-9][0-9]&#123;9&#125;$/;<br>console.log(phoneReg.test(phoneStr));<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 检查邮箱号\">var emailStr = &quot;abc.def@163.com&quot;;<br>var emailReg = /^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/;<br>console.log(emailReg.test(emailStr));<br></code></pre></td></tr></table></figure>\n<h2 id=\"Day-2\"><a href=\"#Day-2\" class=\"headerlink\" title=\"Day 2\"></a>Day 2</h2><h3 id=\"JavaScript-DOM\"><a href=\"#JavaScript-DOM\" class=\"headerlink\" title=\"JavaScript DOM\"></a>JavaScript DOM</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p>\n<p>HTML DOM 模型被结构化为 对象树<br>常用节点分为四类：</p>\n<p>文档节点：整个HTML文档<br>元素节点：HTML文档中的HTML标签<br>属性节点：元素的属性<br>文本节点：HTML标签中的文本内容</p>\n<h4 id=\"4-3-1、查找-HTML-元素\"><a href=\"#4-3-1、查找-HTML-元素\" class=\"headerlink\" title=\"4.3.1、查找 HTML 元素\"></a>4.3.1、查找 HTML 元素</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>document.getElementById(id)</td>\n<td>通过元素 id 来查找元素.</td>\n</tr>\n<tr>\n<td>document.getElementsByTagName(name)</td>\n<td>通过标签名来查找元素。</td>\n</tr>\n<tr>\n<td>document.getElementsByClassName(name)</td>\n<td>通过类名来查找元素。</td>\n</tr>\n<tr>\n<td>document.querySelector(CSS选择器)</td>\n<td>通过CSS选择器选择一个元素。</td>\n</tr>\n<tr>\n<td>document.querySelectorAll(CSS选择器)</td>\n<td>通过CSS选择器选择多个元素。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过id获取按钮节点对象\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementById(&quot;btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过标签名获取按钮节点对象数组\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementsByTagName(&quot;button&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过类名获取按钮节点对象数组\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementsByClassName(&quot;btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过CSS选择器选择该按钮\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.querySelector(&quot;.btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;ul class=&quot;list&quot;&gt;<br>    &lt;li&gt;列表项1&lt;/li&gt;<br>    &lt;li&gt;列表项2&lt;/li&gt;<br>    &lt;li&gt;列表项3&lt;/li&gt;<br>    &lt;li&gt;列表项4&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var list = document.querySelectorAll(&quot;.list li&quot;);<br>    console.log(list);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"4-3-2、获取-HTML-的值\"><a href=\"#4-3-2、获取-HTML-的值\" class=\"headerlink\" title=\"4.3.2、获取 HTML 的值\"></a>4.3.2、获取 HTML 的值</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素节点.innerText</td>\n<td>获取 HTML 元素的 inner Text。</td>\n</tr>\n<tr>\n<td>元素节点.innerHTML</td>\n<td>获取 HTML 元素的 inner HTML。</td>\n</tr>\n<tr>\n<td>元素节点.属性</td>\n<td>获取 HTML 元素的属性值。</td>\n</tr>\n<tr>\n<td>元素节点.getAttribute(attribute)</td>\n<td>获取 HTML 元素的属性值。</td>\n</tr>\n<tr>\n<td>元素节点.style.样式</td>\n<td>获取 HTML 元素的行内样式值。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，然后获取按钮的文本内容\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementById(&quot;btn&quot;);<br>    console.log(btn.innerText);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>&lt;linkrel&#x3D;”stylesheet”href&#x3D;”<a href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css%22%3E\">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;&gt;</a> </p>\n<p>&lt;scriptsrc&#x3D;”<a href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js%22%3E\">https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;&gt;</a></script> </p>\n<p>&lt;scriptsrc&#x3D;”<a href=\"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js%22%3E\">https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;</a></script> </p>\n\n    <div id=\"aplayer-yoveprgy\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"9129478\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FF4081\"\n    ></div>\n<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h2><p><a href=\"https://blog.csdn.net/qq_38490457/article/details/109257751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169508142416800222822599%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169508142416800222822599&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257751-null-null.142%5Ev94%5EchatsearchT3_1&utm_term=javascript&spm=1018.2226.3001.4187\">参考来源</a></p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><h4 id=\"1-5、JavaScript的输出\"><a href=\"#1-5、JavaScript的输出\" class=\"headerlink\" title=\"1.5、JavaScript的输出\"></a>1.5、JavaScript的输出</h4><p>页面输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs codes\">&lt;script&gt;<br>    document.write(&quot;Hello,World!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>控制台输出*注意：页面按F12弹出控制台*\\</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs codes\">&lt;script&gt;<br>    console.log(&quot;输出一条日志&quot;);//最常用<br>    console.info(&quot;输出一条信息&quot;);<br>    console.warn(&quot;输出一条警告&quot;);<br>    console.error(&quot;输出一条错误&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>弹出窗口输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs codes\">&lt;script&gt;<br>    alert(&quot;Hello,World!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-11-6、嵌套函数\"><a href=\"#2-11-6、嵌套函数\" class=\"headerlink\" title=\"2.11.6、嵌套函数\"></a>2.11.6、嵌套函数</h4><p>嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">function <span class=\"hljs-built_in\">fu</span>() &#123;<br>    function <span class=\"hljs-built_in\">zi</span>() &#123;<br>        console<span class=\"hljs-selector-class\">.log</span>(&quot;我是儿子&quot;)<br>    &#125;<br><br>    <span class=\"hljs-built_in\">zi</span>();<br>&#125;<br><br><span class=\"hljs-built_in\">fu</span>();<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-11-8、立即执行函数\"><a href=\"#2-11-8、立即执行函数\" class=\"headerlink\" title=\"2.11.8、立即执行函数\"></a>2.11.8、立即执行函数</h4><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\">(<span class=\"hljs-name\">function</span> () &#123;<br>    alert(<span class=\"hljs-string\">&quot;我是一个匿名函数&quot;</span>)<span class=\"hljs-comment\">;</span><br>&#125;)()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2-12-2、用构造函数创建对象\"><a href=\"#2-12-2、用构造函数创建对象\" class=\"headerlink\" title=\"2.12.2、用构造函数创建对象\"></a>2.12.2、用构造函数创建对象</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    this.name = name;<br>    this.age = age;<br>    <span class=\"hljs-comment\">// 设置对象的方法</span><br>    this.sayName = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(this.name);<br>    &#125;;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(person1);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(person2);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(person3);<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><p>当以函数的形式调用时，this是window<br>当以方法的形式调用时，谁调用方法this就是谁<br>当以构造函数的形式调用时，this就是新创建的那个对象</p>\n<h4 id=\"2-12-3、原型\"><a href=\"#2-12-3、原型\" class=\"headerlink\" title=\"2.12.3、原型\"></a>2.12.3、原型</h4><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span></span>(name, age) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.age = age;<br>    <span class=\"hljs-comment\">// 设置对象的方法</span><br>    <span class=\"hljs-built_in\">this</span>.sayName = sayName<br>&#125;<br><br><span class=\"hljs-comment\">// 抽取方法为全局函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayName</span></span>() &#123;<br>    console.log(<span class=\"hljs-built_in\">this</span>.name);<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br>person1.sayName();<br>person2.sayName();<br>person3.sayName();<br></code></pre></td></tr></table></figure>\n<p>但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-comment\">// 在Person类的原型对象中添加方法</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br>person1.<span class=\"hljs-title function_\">sayName</span>();<br>person2.<span class=\"hljs-title function_\">sayName</span>();<br>person3.<span class=\"hljs-title function_\">sayName</span>();<br></code></pre></td></tr></table></figure>\n<p>我们可以通过__proto__（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p>\n<h4 id=\"2-12-7、对象继承\"><a href=\"#2-12-7、对象继承\" class=\"headerlink\" title=\"2.12.7、对象继承\"></a>2.12.7、对象继承</h4><p>JavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：</p>\n<p>原型链继承<br>借用构造函数继承<br>组合继承（重要）</p>\n<h5 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h5><figure class=\"highlight plaintext\"><figcaption><span>定义父类型构造函数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs //\">function SupperType() &#123;<br>    this.supProp = &#x27;Supper property&#x27;;<br>&#125;<br><br>// 给父类型的原型添加方法<br>SupperType.prototype.showSupperProp = function () &#123;<br>    console.log(this.supProp);<br>&#125;;<br><br>// 定义子类型的构造函数<br>function SubType() &#123;<br>    this.subProp = &#x27;Sub property&#x27;;<br>&#125;<br><br>// 创建父类型的对象赋值给子类型的原型<br>SubType.prototype = new SupperType();<br><br>// 将子类型原型的构造属性设置为子类型<br>SubType.prototype.constructor = SubType;<br><br>// 给子类型原型添加方法<br>SubType.prototype.showSubProp = function () &#123;<br>    console.log(this.subProp)<br>&#125;;<br><br>// 创建子类型的对象: 可以调用父类型的方法<br>var subType = new SubType();<br>subType.showSupperProp();<br>subType.showSubProp();<br></code></pre></td></tr></table></figure>\n<h5 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 定义父类型构造函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">showSupperName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>    &#125;;<br>&#125;<br><br><span class=\"hljs-comment\">// 定义子类型的构造函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 在子类型中调用call方法继承自SuperType</span><br>    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-comment\">// 给子类型的原型添加方法</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">showSubName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;;<br><br><span class=\"hljs-comment\">// 创建子类型的对象然后调用</span><br><span class=\"hljs-keyword\">var</span> subType = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">20</span>);<br>subType.<span class=\"hljs-title function_\">showSupperName</span>();<br>subType.<span class=\"hljs-title function_\">showSubName</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(subType.<span class=\"hljs-property\">name</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(subType.<span class=\"hljs-property\">age</span>);<br></code></pre></td></tr></table></figure>\n<h5 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">setName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Student</span>(<span class=\"hljs-params\">name, age, price</span>) &#123;<br>    <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name, age); <span class=\"hljs-comment\">// 为了得到父类型的实例属性和方法</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">price</span> = price; <span class=\"hljs-comment\">// 添加子类型私有的属性</span><br>&#125;<br><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(); <span class=\"hljs-comment\">// 为了得到父类型的原型属性和方法</span><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Student</span>; <span class=\"hljs-comment\">// 修正constructor属性指向</span><br><span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">setPrice</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">price</span>) &#123; <span class=\"hljs-comment\">// 添加子类型私有的方法 </span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">price</span> = price;<br>&#125;;<br><br><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">15000</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(s.<span class=\"hljs-property\">name</span>, s.<span class=\"hljs-property\">age</span>, s.<span class=\"hljs-property\">price</span>);<br>s.<span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>);<br>s.<span class=\"hljs-title function_\">setPrice</span>(<span class=\"hljs-number\">16000</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(s.<span class=\"hljs-property\">name</span>, s.<span class=\"hljs-property\">age</span>, s.<span class=\"hljs-property\">price</span>);<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-12-8、垃圾回收\"><a href=\"#2-12-8、垃圾回收\" class=\"headerlink\" title=\"2.12.8、垃圾回收\"></a>2.12.8、垃圾回收</h4><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">// 使用构造函数来创建对象</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span></span>(name, age) &#123;<br>    <span class=\"hljs-comment\">// 设置对象的属性</span><br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.age = age;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-number\">19</span>);<br><span class=\"hljs-keyword\">var</span> person3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Person</span>(<span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-number\">20</span>);<br><br>person1 = <span class=\"hljs-literal\">null</span>;<br>person2 = <span class=\"hljs-literal\">null</span>;<br>person3 = <span class=\"hljs-literal\">null</span>;<br></code></pre></td></tr></table></figure>\n<h4 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">var arr</span> = [1, <span class=\"hljs-string\">&quot;2&quot;</span>, 3, <span class=\"hljs-string\">&quot;4&quot;</span>, 5, <span class=\"hljs-string\">&quot;6&quot;</span>, 7, <span class=\"hljs-string\">&quot;8&quot;</span>, 9];<br></code></pre></td></tr></table></figure>\n<h4 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h4><p>push()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-string\">&quot;唐僧&quot;</span>, <span class=\"hljs-string\">&quot;蜘蛛精&quot;</span>, <span class=\"hljs-string\">&quot;白骨精&quot;</span>, <span class=\"hljs-string\">&quot;玉兔精&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>pop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">pop</span>();<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>unshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.unshift(<span class=\"hljs-string\">&quot;牛魔王&quot;</span>, <span class=\"hljs-string\">&quot;二郎神&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>shift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.shift();<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>forEach()方法演示：该方法可以用来遍历数组<br>浏览器会在回调函数中传递三个参数：</p>\n<p>第一个参数：就是当前正在遍历的元素<br>第二个参数：就是当前正在遍历的元素的索引<br>第三个参数：就是正在遍历的数组</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br>arr.forEach(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, obj</span>) &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(value + <span class=\"hljs-string\">&quot; #### &quot;</span> + index + <span class=\"hljs-string\">&quot; #### &quot;</span> + obj);<br>&#125;);<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png\" alt=\"result\"><br>slice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-string\">&quot;唐僧&quot;</span>, <span class=\"hljs-string\">&quot;白骨精&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br>result = arr.<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br>result = arr.<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-2</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png\" alt=\"result\"><br>splice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p>\n<p>参数：</p>\n<p>第一个参数：表示开始位置的索引<br>第二个参数：表示要删除的元素数量<br>第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>, <span class=\"hljs-string\">&quot;唐僧&quot;</span>, <span class=\"hljs-string\">&quot;白骨精&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.<span class=\"hljs-built_in\">splice</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br>result = arr.<span class=\"hljs-built_in\">splice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;牛魔王&quot;</span>, <span class=\"hljs-string\">&quot;铁扇公主&quot;</span>, <span class=\"hljs-string\">&quot;红孩儿&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png\" alt=\"result\"><br>concat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-string\">&quot;白骨精&quot;</span>, <span class=\"hljs-string\">&quot;玉兔精&quot;</span>, <span class=\"hljs-string\">&quot;蜘蛛精&quot;</span>];<br><span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-string\">&quot;二郎神&quot;</span>, <span class=\"hljs-string\">&quot;太上老君&quot;</span>, <span class=\"hljs-string\">&quot;玉皇大帝&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.concat(arr2, arr3, <span class=\"hljs-string\">&quot;牛魔王&quot;</span>, <span class=\"hljs-string\">&quot;铁扇公主&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>join()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br><span class=\"hljs-keyword\">var</span> result = arr.join(<span class=\"hljs-string\">&quot;@-@&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png\" alt=\"result\"><br>reverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&quot;孙悟空&quot;</span>, <span class=\"hljs-string\">&quot;猪八戒&quot;</span>, <span class=\"hljs-string\">&quot;沙和尚&quot;</span>];<br>arr.<span class=\"hljs-built_in\">reverse</span>();<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arr);<br></code></pre></td></tr></table></figure>\n<p>sort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序</p>\n<h4 id=\"RegExp-正则表达式\"><a href=\"#RegExp-正则表达式\" class=\"headerlink\" title=\"RegExp 正则表达式\"></a>RegExp 正则表达式</h4><h5 id=\"3-6-2-1、使用对象创建\"><a href=\"#3-6-2-1、使用对象创建\" class=\"headerlink\" title=\"3.6.2.1、使用对象创建\"></a>3.6.2.1、使用对象创建</h5><p>语法格式：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">var</span> 变量名 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&quot;正则表达式&quot;</span>,<span class=\"hljs-string\">&quot;匹配模式&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>匹配模式：</p>\n<p>i：忽略大小写<br>g：全局匹配模式<br>ig：忽略大小写且全局匹配模式</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"><span class=\"hljs-comment\">// 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">reg</span> = new RegExp(<span class=\"hljs-string\">&quot;ab&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>);<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;Abc&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">reg</span>.<span class=\"hljs-keyword\">test</span>(str);<br>console.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-2-2、使用字面量创建\"><a href=\"#3-6-2-2、使用字面量创建\" class=\"headerlink\" title=\"3.6.2.2、使用字面量创建\"></a>3.6.2.2、使用字面量创建</h5><p>语法格式：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> 变量名 = <span class=\"hljs-regexp\">/正则表达式/</span>匹配模式;<br></code></pre></td></tr></table></figure>\n<p>注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">// 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/a/i</span>;<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;Abc&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = reg.test(str);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-3、正则进阶\"><a href=\"#3-6-3、正则进阶\" class=\"headerlink\" title=\"3.6.3、正则进阶\"></a>3.6.3、正则进阶</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否有a或b\">// 这个正则表达式可以来检查一个字符串中是否含有a<br>var reg = /a|b|c/;<br>var str = &quot;Abc&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否有字母\">// 这个正则表达式可以来检查一个字符串中是否含有字母<br>var reg = /[A-z]/;<br>var str = &quot;Abc&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n\n<p>常见组合：</p>\n<p>[a-z]：任意小写字母<br>[A-Z]：任意大写字母<br>[A-z]：任意字母<br>[0-9]：任意数字</p>\n<figure class=\"highlight plaintext\"><figcaption><span>abc 或 adc 或 aec</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否含有\">// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec<br>var reg = /a[bde]c/;<br>var str = &quot;abc123&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n<p>判断除了某些字符序列，只需要这么写[^字符序列]<br>常见组合：</p>\n<p>[^a-z]：除了任意小写字母<br>[^A-Z]：除了任意大写字母<br>[^A-z]：除了任意字母<br>[^0-9]：除了任意数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母\">// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母<br>var reg = /[^0-9]/;<br>var str = &quot;0123456789&quot;;<br>var result = reg.test(str);<br>console.log(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-4、正则方法\"><a href=\"#3-6-4、正则方法\" class=\"headerlink\" title=\"3.6.4、正则方法\"></a>3.6.4、正则方法</h5><p>split()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;1a2b3c4d5e6f7&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-regexp\">/[A-z]/</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>search()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;hello abc hello aec afc&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.search(<span class=\"hljs-regexp\">/a[bef]c/</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>match()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.match(<span class=\"hljs-regexp\">/[a-z]/ig</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<p>replace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部<br>参数：</p>\n<p>第一个参数：被替换的内容，可以接受一个正则表达式作为参数<br>第二个参数：新的内容</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class=\"hljs-keyword\">var</span> result = str.<span class=\"hljs-built_in\">replace</span>(<span class=\"hljs-regexp\">/[a-z]/gi</span>, <span class=\"hljs-string\">&quot;@_@&quot;</span>);<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(result);<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-5、正则量词\"><a href=\"#3-6-5、正则量词\" class=\"headerlink\" title=\"3.6.5、正则量词\"></a>3.6.5、正则量词</h5><p>通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：</p>\n<p>{n} ：正好出现n次<br>{m,} ：出现m次及以上<br>{m,n} ：出现m-n次</p>\n<ul>\n<li>：至少一个，相当于{1,}</li>\n</ul>\n<ul>\n<li>：0个或多个，相当于{0,}<br>? ：0个或1个，相当于{0,1}<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;abbc&quot;</span>;<br><br>reg = <span class=\"hljs-regexp\">/(ab)&#123;3&#125;/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/b&#123;3&#125;/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab&#123;1,3&#125;c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab&#123;3,&#125;c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab+c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab*c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br>reg = <span class=\"hljs-regexp\">/ab?c/</span>;<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(reg.test(str));<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;===============&quot;</span>);<br></code></pre></td></tr></table></figure>\nf f t f t t f</li>\n</ul>\n<h5 id=\"3-6-6、正则高阶\"><a href=\"#3-6-6、正则高阶\" class=\"headerlink\" title=\"3.6.6、正则高阶\"></a>3.6.6、正则高阶</h5><p>如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。</p>\n<p>^ ：表示开头，注意它在[^字符序列]表达的意思不一样<br>$ ：表示结尾</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：检查一个字符串中是否以a开头\">var str = &quot;abcabca&quot;;<br>var reg = /^a/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：检查一个字符串中是否以a结尾\">var str = &quot;abcabca&quot;;<br>var reg = /a$/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure>\n<p>如果我们想要检查一个字符串中是否含有.和\\就会使用转义字符</p>\n<p>. ：表示.<br>\\ ：表示\\</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> reg1 = <span class=\"hljs-regexp\">/\\./</span>;<br><span class=\"hljs-keyword\">var</span> reg2 = <span class=\"hljs-regexp\">/\\\\/</span>;<br><span class=\"hljs-keyword\">var</span> reg3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&quot;\\\\.&quot;</span>);<br><span class=\"hljs-keyword\">var</span> reg4 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&quot;\\\\\\\\&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>除了以上两种特殊的字符，其实还有很多如下所示：</p>\n<p>\\w ：任意字母、数字、<em>，相当于[A-z0-9</em>]<br>\\W ：除了字母、数字、<em>，相当于[^A-z0-9</em>]<br>\\d ：任意的数字，相当于[0-9]<br>\\D ：除了任意的数字，相当于[^0-9]<br>\\s ：空格<br>\\S ：除了空格<br>\\b ：单词边界<br>\\B ：除了单词边界</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个正则表达式，去除掉字符串中的前后的空格\">var str = &quot;  hello child  &quot;<br>var reg = /^\\s*|\\s*$/g;<br>console.log(str);<br>str = str.replace(reg, &quot;&quot;);<br>console.log(str);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child\">var str = &quot;hello child&quot;<br>var reg = /\\bchild\\b/;<br>console.log(reg.test(str));<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-6-7、正则案例\"><a href=\"#3-6-7、正则案例\" class=\"headerlink\" title=\"3.6.7、正则案例\"></a>3.6.7、正则案例</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 检查手机号\">var phoneStr = &quot;15131494600&quot;;<br>var phoneReg = /^1[3-9][0-9]&#123;9&#125;$/;<br>console.log(phoneReg.test(phoneStr));<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 检查邮箱号\">var emailStr = &quot;abc.def@163.com&quot;;<br>var emailReg = /^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/;<br>console.log(emailReg.test(emailStr));<br></code></pre></td></tr></table></figure>\n<h2 id=\"Day-2\"><a href=\"#Day-2\" class=\"headerlink\" title=\"Day 2\"></a>Day 2</h2><h3 id=\"JavaScript-DOM\"><a href=\"#JavaScript-DOM\" class=\"headerlink\" title=\"JavaScript DOM\"></a>JavaScript DOM</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p>\n<p>HTML DOM 模型被结构化为 对象树<br>常用节点分为四类：</p>\n<p>文档节点：整个HTML文档<br>元素节点：HTML文档中的HTML标签<br>属性节点：元素的属性<br>文本节点：HTML标签中的文本内容</p>\n<h4 id=\"4-3-1、查找-HTML-元素\"><a href=\"#4-3-1、查找-HTML-元素\" class=\"headerlink\" title=\"4.3.1、查找 HTML 元素\"></a>4.3.1、查找 HTML 元素</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>document.getElementById(id)</td>\n<td>通过元素 id 来查找元素.</td>\n</tr>\n<tr>\n<td>document.getElementsByTagName(name)</td>\n<td>通过标签名来查找元素。</td>\n</tr>\n<tr>\n<td>document.getElementsByClassName(name)</td>\n<td>通过类名来查找元素。</td>\n</tr>\n<tr>\n<td>document.querySelector(CSS选择器)</td>\n<td>通过CSS选择器选择一个元素。</td>\n</tr>\n<tr>\n<td>document.querySelectorAll(CSS选择器)</td>\n<td>通过CSS选择器选择多个元素。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过id获取按钮节点对象\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementById(&quot;btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过标签名获取按钮节点对象数组\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementsByTagName(&quot;button&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过类名获取按钮节点对象数组\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementsByClassName(&quot;btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，通过CSS选择器选择该按钮\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button class=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.querySelector(&quot;.btn&quot;);<br>    console.log(btn);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;ul class=&quot;list&quot;&gt;<br>    &lt;li&gt;列表项1&lt;/li&gt;<br>    &lt;li&gt;列表项2&lt;/li&gt;<br>    &lt;li&gt;列表项3&lt;/li&gt;<br>    &lt;li&gt;列表项4&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var list = document.querySelectorAll(&quot;.list li&quot;);<br>    console.log(list);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"4-3-2、获取-HTML-的值\"><a href=\"#4-3-2、获取-HTML-的值\" class=\"headerlink\" title=\"4.3.2、获取 HTML 的值\"></a>4.3.2、获取 HTML 的值</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素节点.innerText</td>\n<td>获取 HTML 元素的 inner Text。</td>\n</tr>\n<tr>\n<td>元素节点.innerHTML</td>\n<td>获取 HTML 元素的 inner HTML。</td>\n</tr>\n<tr>\n<td>元素节点.属性</td>\n<td>获取 HTML 元素的属性值。</td>\n</tr>\n<tr>\n<td>元素节点.getAttribute(attribute)</td>\n<td>获取 HTML 元素的属性值。</td>\n</tr>\n<tr>\n<td>元素节点.style.样式</td>\n<td>获取 HTML 元素的行内样式值。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 需求描述：创建一个按钮，然后获取按钮的文本内容\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;我是按钮&lt;/button&gt;<br><br>&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;<br>&lt;script&gt;<br>    var btn = document.getElementById(&quot;btn&quot;);<br>    console.log(btn.innerText);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"# test\n[教学](https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/)\n![鸡鸡女王](https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg)\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n# test\n[教学](https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/)\n![鸡鸡女王](https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg)\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-08-31T02:43:12.894Z","updated":"2023-09-22T02:30:18.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpp0003rcuk4i6j82sp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h1><p><a href=\"https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/\">教学</a><br><img src=\"https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg\" alt=\"鸡鸡女王\"></p>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h1><p><a href=\"https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/\">教学</a><br><img src=\"https://c-ssl.duitang.com/uploads/blog/202211/02/20221102111245_e2a9e.jpg\" alt=\"鸡鸡女王\"></p>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"layout":"mysql","title":"mysql","date":"2023-10-19T01:18:32.000Z","_content":"## 指令\n```\nselect student_ID,student_Name\nfrom student;\nwhere student_Name = 'Mary Lamb';\n```\n```\nselect distinct student_Name，student_Address//查找可以有重复的，比如同一个人但是住在不同的地方或者同名的人；不能查找unique的元素。\nfrom student;\n```\n```match criteria\nselect *\nfrom student\nwhere student_Mobile >111 and student_Age <18;\n```\nnot in('  ','  ');\nbetween 1 and 5;(1,2,3,4,5)\nin(1,5);(1,5)\n### %\nA% = A____  例如AHMAD;\n%A = ____A  例如SERA；\n%A% = _A____  例如 SEAR；\nA%A；\n...\n```\nselect *\nfrom student\nwhere student_Name like 'L%K%';\n```\n### group by\n### join\n### drop\n### delete\n记得删除要加from;\n安全删除日志或单独的记录，可以复原，不删除表的关系等。而drop会删掉所有的并不能复原；\n### concat 把两个column合在一起，只是查询临时放在一起\n```\nselect concat(student_ID,',',student_Name)as'student info'\nfrom student;\n```\n### add _ datetime null default now()\n```把当前时间加入到表 _ 中\nalter table student\nadd student_time datetime null default now();\n```\n### insert \n```\ninsert into student\n(student_Name,student_Mobile,student_Email,student_ID)\nvalues\n('LK','0','0','xmus004');//加入新人lk\nselect * from student\norder by student_ID;//显示顺序\n```\n```加column\nalter table student\nadd DOB date NULL;\nalter table student\nadd AGE int null;\n```\n然后设置一个DOB：\n```\nupdate student\nset DOB = '2020-03-14'\nwhere student_ID = 'xmus002';\n```\n根据设置的DOB来自动计算人年龄：\n```\nupdate student\nset AGE =date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),'%Y') + 0\nwhere student_ID between 'xmus001' and 'xmus004';\n```\n## 第6周作业\n```\ncreate database shop;\n```\n```\nuse shop;\n```\n```\ncreate table customer\n(\ncustomerID varchar(10) not null primary key,\nFirstName varchar(20) not null,\nLastName varchar(20) not null,\nDateofBirth date null,\nstreet varchar(20) null,\ncity varchar(20) null,\nstate varchar(20) null,\nMobileNo int null\n);\n```\n```\ncreate table item\n(\nItemID varchar(10) not null primary key,\nItemName varchar(20) not null,\nPrice decimal(10,2) null,\nBrand varchar(20) not null\n);\n```\n```\ncreate table salesman\n(\nStaffID varchar(10) not null primary key,\nStaffName varchar(20) not null,\nWorkingDate date null,\nSalary decimal(10,2) null\n);\n```\n```\ncreate table transaction\n(\nInvoiceNo int not null primary key,\nCustomeID varchar(10) not null,     //primary key 和 forigen key 都不能为null\nItemID varchar(10) not null,\nStaffID varchar(10) not null,\nQuantity int null,\nTotalAmount decimal(10,2) null,\nForeign Key fk_transaction_CustomerID(customeID) references Customer(customerID),//不用区分大小写\nForeign Key fk_transaction_ItemID(ItemID) references item(ItemID),\nForeign Key fk_transaction_StaffID(staffID) references salesman(staffID)\n);\n```\n```\ninsert into Customer\n(customerID, FirstName,LastName,DateofBirth,Street,City,state,MobileNo)\nvalues\n('C001','Britney','Spears','2020-10-04','2nd Street','Sepang','Selangor','09222333'),\n('C002','Britney','Jackson','2007-06-04','3rd Street','Shah Alam','Selangor','019444333'),\n('C003','John','Wick','1996-04-07','2nd Level','Butterworth','Penang','019999333'),\n('C004','John','Cena','1990-03-03','3rd Floor','Georgetown','Penang','012222333'),\n('C005','Elizabeth','Stone','1985-04-03','4th Street','Sepang','Selangor','012567333'),\n('C006','Jimmy','Stone','2002-10-03','2nd Street','Shah Alam','Selangor','019224433'),\n('C007','Justin','Timerlake','2015-06-04','2nd Street','Shah Alam','Selangor','019444333');\n```\n```\ninsert into Item\n(ItemID, ItemName,Price,Brand)\nvalues\n('I001','Laptop','1500','Huawei'),\n('I002','Laptop','1700','Dell'),\n('I003','Laptop','3500','Apple'),\n('I004','Tablet','800','Apple'),\n('I005','Tablet','1000','Huawei'),\n('I006','Mouse','70','Huawei'),\n('I007','Mouse','80','Logistech'),\n('I008','Printer','500','HP'),\n('I009','Printer','300','Canon'),\n('I010','Speaker','50','Huawei');\nselect *from item;\n```\n```\ninsert into transaction\n(InvoiceNo,customeID,ItemID,StaffID,Quantity)\nvalues\n('10001','C001','I003','S001','1'),\n('10002','C001','I004','S001','1'),\n('10003','C002','I001','S001','1'),\n('10004','C002','I006','S001','1'),\n('10005','C003','I002','S002','5'),\n('10006','C003','I007','S002','5'),\n('10007','C004','I009','S003','3'),\n('10008','C004','I008','S003','2'),\n('10009','C005','I001','S003','2'),\n('10010','C005','I005','S003','2');\nselect *from transaction;\n```\n以上全是准备工作，现在才是重点\n```1.  Write a query to display list of purchase item for customer ID (C001, C002).\nselect * from Transaction\nwhere customeID IN('C001','C002');\n```\n```2.  Write a query to display list of customer for Staff ID (S001, S002).\nselect * from Transaction\nwhere staffID IN('s001','s002');\n```\n```3. Write a query to display the customer ID, customer full name, and Full Address from customer Table.\nselect customerID as'ID NO',\nconcat(FirstName,' ',LastName) 'Full Name',\nconcat(street,',',city,',',state) 'Mailing Address'\nfrom customer;\n```\n```4. Write a query to display the item id, item name, and price that price more than RM700.\nselect itemID,itemname,price\nfrom item\nwhere price >=700\norder by price;\n```\n```5. Write a query to display the customer id, fullname (First+LastName), state that live in Selangor.\nselect customerID, \nconcat(firstname,' ',lastname) as 'FULL Name', state\nfrom customer\nwhere state = 'selangor';//where state like 'sel%';\n```\n```6.  Write a query to list all the state in customer table.\nselect distinct state   //避免重复的\nfrom customer;\n```\n```7. Write a query to display the price range is between 500 to 2000\nselect *from item\nwhere price between 500 and 2000 //注意between和in的区别\norder by price;\n```\n```8. Write a query where clerk salary is less than 1,500 and working before 2011.\nselect *from salesman\nwhere Salary <= 2000 and WorkingDate <= '2011-01-01' //注意日期写法\norder by WorkingDate;\n```\n```9. Write a query to display customer age.\nselect customerID, concat(firstname,' ',lastname) as 'full name',\nconcat(street,',',city,',',state)as'full address',dateofbirth,   //真的复杂，之前合并了，现在就都得写\n(date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),'%Y') + 0)as age //这个不会真要背吧\nfrom customer\norder by age;\n```\n```10. Write a query to display working experience.\nselect staffid,staffname,workingdate,\n(date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),'%Y') + 0)as 'working experience' //长string用‘ ’括起来\nfrom salesman\norder by workingdate desc;\n```\n### 第7周作业\n``` Write a query to display list of member information where name start with J.\nselect FirstName,\nfrom members\nwhere FirstName like 'J%';\n```\n```Write a query to display list of member that register for Diamond membership.\nselect *,\nfrom members\nwhere tpye_name = 'Diamond';\n```\n```Write a query to list all the state in member table.\nselect distinct state\nfrom members;\n```\n```Write a query to display the member ID, member full name, Full Address, membership and sort by membership.\nselect memberID,\nconcat(LastName,',',city,',',FirstName)'Full Name',\nconcat(Street,',',City,',',State)'Full Address'),type_name,\nfrom member\norder by type_name;\n```\n```Write a query to display member age.\nselect memberID,\nconcat(LastName,',',city,',',FirstName)'Full Name',\nconcat(Street,',',City,',',State)'Full Address'),type_name,DOB,\n((date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),'%Y') + 0)as age\nfrom member\norder by age;\n```\n```Write a query to display member that lives in Johor or Selangor.\nselect memberID,\nconcat(LastName,',',city,',',FirstName)'Full Name',\nconcat(Street,',',City,',',State)'Full Address'),type_name,DOB,\n((date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),'%Y') + 0)as age\nfrom member\nwhere state = 'Johor' or state = 'selangor' -- where state in ('Johor','selangor')\norder by age;\n```\n```Write a query to display MemberID, ClassID, TrainerID and sort by ClassID.\nselect memberID,classID,\nfrom register\norder by classID;\n```\n```Write a query to display the class id, class name, and class price between RM50 and RM150.\nselect classID,ClassName,Fee\nfrom class\nwhere fee between 50 and 150;\n```\n```Write a query where trainer salary is less than 3,000 and working before 2015.\nselect *\nfrom trainer\nwhere salary <3000 and WorkingDate <'2015-01-01'; --第一个是年，第二个是日，最后是月\n```\n```Write a query where trainer working experience is less than 5 years or specialized in Martial arts.\nselect trainerID,trainerName,workingDate,skill,\n((date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),'%Y') + 0)as experience\nfrom trainer\nwhere wokingdate >'2019-01-01' or skillID = 's001'; --大大的注意不能用experience来比较，系统不知道我们新建的这个是什么意思，所以还是只能用已有的workingdate.\n```\n总的来说，给列赋予别名时AS关键字是可选的，而且别名不需要用引号括起来。\n### 第八周 Adding Jion Queries\n#### inner join\n```找到members 和 register 的交集.跟以前不一样是要加例如member.前缀\nSELECT register.MemberID , members.firstName,\nmembers.LastName, register.ClassId\nfrom members inner join register on members.MemberID = register.memberID;\n```\n```升级版，但是一个table的 relationship不要超过2.\nSELECT register.MemberID , concat(members.firstName,' ',members.LastName) as 'Full Nmae', register.ClassId, concat(members.street,' ',members.city,' ',members.state)'Address',\nclass.classname, class.price, membership.type_name\nfrom membership inner join members on membership.type_name = members.type_name \n inner join register on members.MemberID = register.memberID \n inner join class on register.classid = class.classid\n```\n#### outer join\n#### left join\n#### right join\n#### full join\n!(){1.png}\n#### aggreate\ncount, sum, min, max, average\n```\nselect a,b,c,\ncount(register.classid) as 'Total class',\nsum(class.price)as 'Total price'\nfrom member class join register on member.memberid = register.memberid\ngroup by register.memberid      --group 必不可少\n```\n#### Mathematic calculation\n* / - +\n```\nsum(class.price)as\"before discount\",\nsum((1-membership.discout) * class.price)as \"Total Amount\"\ngroup by member.memberid;\n```\n### 9\n```\nselect transaction.staffid, salesman.StaffName,\ncount(transaction.itemid)'order number',\nsum(transaction.quantity)'total quantity',\nsum(transaction.quantity*item.price) 'total sales',\n(sum(transaction.quantity*item.price))*0.1+salesman.Salary as 'salery'\nfrom salesman  inner join transaction on salesman.staffid = transaction.staffid\ninner join item on item.itemid = transaction.itemid\ngroup by transaction.staffid;\n```\n### 10\n往已经有的table里加外键\n```\nalter table registration\nadd foreign key (staffid)\nreferences staff(staffid);\n```\nExercise\n1. Write a query to display list of GuestID, Guest Full Name, Guest Address, and RoomID from registration\nand guest table.\n2. Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from\nregistration, guest and room table.\n3. Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from\nregistration, guest and room table where Firstname start with ‘J’ and lives in Selangor. Compare the\nregistration and guest for Null values.\n4. Write a query to count how many room that every guest has book.\n5. Write a query for the SUM cost that the guest needs to pay for the room.\n6. Write a query for the discounted rooms for every guest.\n7. Write a query to count how many room that every staff has submitted.\n8. Write a total sum of sales for every staff.\n9. Calculate the total salary for staff if they get 15% commission from the total sales.\n10. Calculate the age and working experience from guest and staff where age < 30 years old or working\nexperience > 10.\n```\nselect registration.guestid,\nconcat(guest.firstname,'  ',guest.lastname) 'full name',\nconcat(guest.street,' ,',guest.city,' ,',guest.state) 'mailing address',\nregistration.roomid, room.roomtype,room.price\nfrom guest inner join registration on guest.guestid = registration.guestid\ninner join room on registration.roomid = room.roomid\n```\n在后面加where guest.firsname like '%kun'； 会发现结果为空，empty output = no sharing data on selected condition;\n但是加 left outer\n```\nfrom guest left outer join registration on guest.guestid = registration.guestid\nleft outer join room on registration.roomid = room.roomid\nwhere guest.firstname like 'j%' and guest.state = 'selangor';\n```\n有的变成null了 这个意思是no data;\n再加：where registration.guestid is null; 出来的结果表示还没有订房间的客人；\n```\nselect registration.guestid,\nconcat(guest.firstname,'  ',guest.lastname)as 'full name',\nconcat(guest.street,' ,',guest.city,' ,',guest.state) 'mailing address',\nsum(room.price*datediff(registration.checkout,registration.checkin))as 'total pay',\n((100-membership.discount)/100) as 'total discount'\nfrom membership inner join guest on membership.type = guest.type\ninner join registration on guest.guestid = registration.guestid\ninner join room on registration.roomid = room.roomid\ngroup by registration.guestid;\n```\n\n\n\n","source":"_posts/mysql.md","raw":"---\nlayout: mysql\ntitle: mysql\ndate: 2023-10-19 09:18:32\ntags:\n---\n## 指令\n```\nselect student_ID,student_Name\nfrom student;\nwhere student_Name = 'Mary Lamb';\n```\n```\nselect distinct student_Name，student_Address//查找可以有重复的，比如同一个人但是住在不同的地方或者同名的人；不能查找unique的元素。\nfrom student;\n```\n```match criteria\nselect *\nfrom student\nwhere student_Mobile >111 and student_Age <18;\n```\nnot in('  ','  ');\nbetween 1 and 5;(1,2,3,4,5)\nin(1,5);(1,5)\n### %\nA% = A____  例如AHMAD;\n%A = ____A  例如SERA；\n%A% = _A____  例如 SEAR；\nA%A；\n...\n```\nselect *\nfrom student\nwhere student_Name like 'L%K%';\n```\n### group by\n### join\n### drop\n### delete\n记得删除要加from;\n安全删除日志或单独的记录，可以复原，不删除表的关系等。而drop会删掉所有的并不能复原；\n### concat 把两个column合在一起，只是查询临时放在一起\n```\nselect concat(student_ID,',',student_Name)as'student info'\nfrom student;\n```\n### add _ datetime null default now()\n```把当前时间加入到表 _ 中\nalter table student\nadd student_time datetime null default now();\n```\n### insert \n```\ninsert into student\n(student_Name,student_Mobile,student_Email,student_ID)\nvalues\n('LK','0','0','xmus004');//加入新人lk\nselect * from student\norder by student_ID;//显示顺序\n```\n```加column\nalter table student\nadd DOB date NULL;\nalter table student\nadd AGE int null;\n```\n然后设置一个DOB：\n```\nupdate student\nset DOB = '2020-03-14'\nwhere student_ID = 'xmus002';\n```\n根据设置的DOB来自动计算人年龄：\n```\nupdate student\nset AGE =date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),'%Y') + 0\nwhere student_ID between 'xmus001' and 'xmus004';\n```\n## 第6周作业\n```\ncreate database shop;\n```\n```\nuse shop;\n```\n```\ncreate table customer\n(\ncustomerID varchar(10) not null primary key,\nFirstName varchar(20) not null,\nLastName varchar(20) not null,\nDateofBirth date null,\nstreet varchar(20) null,\ncity varchar(20) null,\nstate varchar(20) null,\nMobileNo int null\n);\n```\n```\ncreate table item\n(\nItemID varchar(10) not null primary key,\nItemName varchar(20) not null,\nPrice decimal(10,2) null,\nBrand varchar(20) not null\n);\n```\n```\ncreate table salesman\n(\nStaffID varchar(10) not null primary key,\nStaffName varchar(20) not null,\nWorkingDate date null,\nSalary decimal(10,2) null\n);\n```\n```\ncreate table transaction\n(\nInvoiceNo int not null primary key,\nCustomeID varchar(10) not null,     //primary key 和 forigen key 都不能为null\nItemID varchar(10) not null,\nStaffID varchar(10) not null,\nQuantity int null,\nTotalAmount decimal(10,2) null,\nForeign Key fk_transaction_CustomerID(customeID) references Customer(customerID),//不用区分大小写\nForeign Key fk_transaction_ItemID(ItemID) references item(ItemID),\nForeign Key fk_transaction_StaffID(staffID) references salesman(staffID)\n);\n```\n```\ninsert into Customer\n(customerID, FirstName,LastName,DateofBirth,Street,City,state,MobileNo)\nvalues\n('C001','Britney','Spears','2020-10-04','2nd Street','Sepang','Selangor','09222333'),\n('C002','Britney','Jackson','2007-06-04','3rd Street','Shah Alam','Selangor','019444333'),\n('C003','John','Wick','1996-04-07','2nd Level','Butterworth','Penang','019999333'),\n('C004','John','Cena','1990-03-03','3rd Floor','Georgetown','Penang','012222333'),\n('C005','Elizabeth','Stone','1985-04-03','4th Street','Sepang','Selangor','012567333'),\n('C006','Jimmy','Stone','2002-10-03','2nd Street','Shah Alam','Selangor','019224433'),\n('C007','Justin','Timerlake','2015-06-04','2nd Street','Shah Alam','Selangor','019444333');\n```\n```\ninsert into Item\n(ItemID, ItemName,Price,Brand)\nvalues\n('I001','Laptop','1500','Huawei'),\n('I002','Laptop','1700','Dell'),\n('I003','Laptop','3500','Apple'),\n('I004','Tablet','800','Apple'),\n('I005','Tablet','1000','Huawei'),\n('I006','Mouse','70','Huawei'),\n('I007','Mouse','80','Logistech'),\n('I008','Printer','500','HP'),\n('I009','Printer','300','Canon'),\n('I010','Speaker','50','Huawei');\nselect *from item;\n```\n```\ninsert into transaction\n(InvoiceNo,customeID,ItemID,StaffID,Quantity)\nvalues\n('10001','C001','I003','S001','1'),\n('10002','C001','I004','S001','1'),\n('10003','C002','I001','S001','1'),\n('10004','C002','I006','S001','1'),\n('10005','C003','I002','S002','5'),\n('10006','C003','I007','S002','5'),\n('10007','C004','I009','S003','3'),\n('10008','C004','I008','S003','2'),\n('10009','C005','I001','S003','2'),\n('10010','C005','I005','S003','2');\nselect *from transaction;\n```\n以上全是准备工作，现在才是重点\n```1.  Write a query to display list of purchase item for customer ID (C001, C002).\nselect * from Transaction\nwhere customeID IN('C001','C002');\n```\n```2.  Write a query to display list of customer for Staff ID (S001, S002).\nselect * from Transaction\nwhere staffID IN('s001','s002');\n```\n```3. Write a query to display the customer ID, customer full name, and Full Address from customer Table.\nselect customerID as'ID NO',\nconcat(FirstName,' ',LastName) 'Full Name',\nconcat(street,',',city,',',state) 'Mailing Address'\nfrom customer;\n```\n```4. Write a query to display the item id, item name, and price that price more than RM700.\nselect itemID,itemname,price\nfrom item\nwhere price >=700\norder by price;\n```\n```5. Write a query to display the customer id, fullname (First+LastName), state that live in Selangor.\nselect customerID, \nconcat(firstname,' ',lastname) as 'FULL Name', state\nfrom customer\nwhere state = 'selangor';//where state like 'sel%';\n```\n```6.  Write a query to list all the state in customer table.\nselect distinct state   //避免重复的\nfrom customer;\n```\n```7. Write a query to display the price range is between 500 to 2000\nselect *from item\nwhere price between 500 and 2000 //注意between和in的区别\norder by price;\n```\n```8. Write a query where clerk salary is less than 1,500 and working before 2011.\nselect *from salesman\nwhere Salary <= 2000 and WorkingDate <= '2011-01-01' //注意日期写法\norder by WorkingDate;\n```\n```9. Write a query to display customer age.\nselect customerID, concat(firstname,' ',lastname) as 'full name',\nconcat(street,',',city,',',state)as'full address',dateofbirth,   //真的复杂，之前合并了，现在就都得写\n(date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),'%Y') + 0)as age //这个不会真要背吧\nfrom customer\norder by age;\n```\n```10. Write a query to display working experience.\nselect staffid,staffname,workingdate,\n(date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),'%Y') + 0)as 'working experience' //长string用‘ ’括起来\nfrom salesman\norder by workingdate desc;\n```\n### 第7周作业\n``` Write a query to display list of member information where name start with J.\nselect FirstName,\nfrom members\nwhere FirstName like 'J%';\n```\n```Write a query to display list of member that register for Diamond membership.\nselect *,\nfrom members\nwhere tpye_name = 'Diamond';\n```\n```Write a query to list all the state in member table.\nselect distinct state\nfrom members;\n```\n```Write a query to display the member ID, member full name, Full Address, membership and sort by membership.\nselect memberID,\nconcat(LastName,',',city,',',FirstName)'Full Name',\nconcat(Street,',',City,',',State)'Full Address'),type_name,\nfrom member\norder by type_name;\n```\n```Write a query to display member age.\nselect memberID,\nconcat(LastName,',',city,',',FirstName)'Full Name',\nconcat(Street,',',City,',',State)'Full Address'),type_name,DOB,\n((date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),'%Y') + 0)as age\nfrom member\norder by age;\n```\n```Write a query to display member that lives in Johor or Selangor.\nselect memberID,\nconcat(LastName,',',city,',',FirstName)'Full Name',\nconcat(Street,',',City,',',State)'Full Address'),type_name,DOB,\n((date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),'%Y') + 0)as age\nfrom member\nwhere state = 'Johor' or state = 'selangor' -- where state in ('Johor','selangor')\norder by age;\n```\n```Write a query to display MemberID, ClassID, TrainerID and sort by ClassID.\nselect memberID,classID,\nfrom register\norder by classID;\n```\n```Write a query to display the class id, class name, and class price between RM50 and RM150.\nselect classID,ClassName,Fee\nfrom class\nwhere fee between 50 and 150;\n```\n```Write a query where trainer salary is less than 3,000 and working before 2015.\nselect *\nfrom trainer\nwhere salary <3000 and WorkingDate <'2015-01-01'; --第一个是年，第二个是日，最后是月\n```\n```Write a query where trainer working experience is less than 5 years or specialized in Martial arts.\nselect trainerID,trainerName,workingDate,skill,\n((date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),'%Y') + 0)as experience\nfrom trainer\nwhere wokingdate >'2019-01-01' or skillID = 's001'; --大大的注意不能用experience来比较，系统不知道我们新建的这个是什么意思，所以还是只能用已有的workingdate.\n```\n总的来说，给列赋予别名时AS关键字是可选的，而且别名不需要用引号括起来。\n### 第八周 Adding Jion Queries\n#### inner join\n```找到members 和 register 的交集.跟以前不一样是要加例如member.前缀\nSELECT register.MemberID , members.firstName,\nmembers.LastName, register.ClassId\nfrom members inner join register on members.MemberID = register.memberID;\n```\n```升级版，但是一个table的 relationship不要超过2.\nSELECT register.MemberID , concat(members.firstName,' ',members.LastName) as 'Full Nmae', register.ClassId, concat(members.street,' ',members.city,' ',members.state)'Address',\nclass.classname, class.price, membership.type_name\nfrom membership inner join members on membership.type_name = members.type_name \n inner join register on members.MemberID = register.memberID \n inner join class on register.classid = class.classid\n```\n#### outer join\n#### left join\n#### right join\n#### full join\n!(){1.png}\n#### aggreate\ncount, sum, min, max, average\n```\nselect a,b,c,\ncount(register.classid) as 'Total class',\nsum(class.price)as 'Total price'\nfrom member class join register on member.memberid = register.memberid\ngroup by register.memberid      --group 必不可少\n```\n#### Mathematic calculation\n* / - +\n```\nsum(class.price)as\"before discount\",\nsum((1-membership.discout) * class.price)as \"Total Amount\"\ngroup by member.memberid;\n```\n### 9\n```\nselect transaction.staffid, salesman.StaffName,\ncount(transaction.itemid)'order number',\nsum(transaction.quantity)'total quantity',\nsum(transaction.quantity*item.price) 'total sales',\n(sum(transaction.quantity*item.price))*0.1+salesman.Salary as 'salery'\nfrom salesman  inner join transaction on salesman.staffid = transaction.staffid\ninner join item on item.itemid = transaction.itemid\ngroup by transaction.staffid;\n```\n### 10\n往已经有的table里加外键\n```\nalter table registration\nadd foreign key (staffid)\nreferences staff(staffid);\n```\nExercise\n1. Write a query to display list of GuestID, Guest Full Name, Guest Address, and RoomID from registration\nand guest table.\n2. Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from\nregistration, guest and room table.\n3. Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from\nregistration, guest and room table where Firstname start with ‘J’ and lives in Selangor. Compare the\nregistration and guest for Null values.\n4. Write a query to count how many room that every guest has book.\n5. Write a query for the SUM cost that the guest needs to pay for the room.\n6. Write a query for the discounted rooms for every guest.\n7. Write a query to count how many room that every staff has submitted.\n8. Write a total sum of sales for every staff.\n9. Calculate the total salary for staff if they get 15% commission from the total sales.\n10. Calculate the age and working experience from guest and staff where age < 30 years old or working\nexperience > 10.\n```\nselect registration.guestid,\nconcat(guest.firstname,'  ',guest.lastname) 'full name',\nconcat(guest.street,' ,',guest.city,' ,',guest.state) 'mailing address',\nregistration.roomid, room.roomtype,room.price\nfrom guest inner join registration on guest.guestid = registration.guestid\ninner join room on registration.roomid = room.roomid\n```\n在后面加where guest.firsname like '%kun'； 会发现结果为空，empty output = no sharing data on selected condition;\n但是加 left outer\n```\nfrom guest left outer join registration on guest.guestid = registration.guestid\nleft outer join room on registration.roomid = room.roomid\nwhere guest.firstname like 'j%' and guest.state = 'selangor';\n```\n有的变成null了 这个意思是no data;\n再加：where registration.guestid is null; 出来的结果表示还没有订房间的客人；\n```\nselect registration.guestid,\nconcat(guest.firstname,'  ',guest.lastname)as 'full name',\nconcat(guest.street,' ,',guest.city,' ,',guest.state) 'mailing address',\nsum(room.price*datediff(registration.checkout,registration.checkin))as 'total pay',\n((100-membership.discount)/100) as 'total discount'\nfrom membership inner join guest on membership.type = guest.type\ninner join registration on guest.guestid = registration.guestid\ninner join room on registration.roomid = room.roomid\ngroup by registration.guestid;\n```\n\n\n\n","slug":"mysql","published":1,"updated":"2023-11-23T03:23:16.600Z","comments":1,"photos":[],"link":"","_id":"clpj3ujpq0004rcuk3dwy35vj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">select</span> student_ID,student_Name<br><span class=\"hljs-keyword\">from</span> student;<br><span class=\"hljs-keyword\">where</span> student_Name = <span class=\"hljs-string\">&#x27;Mary Lamb&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">distinct</span> student_Name，student_Address//查找可以有重复的，比如同一个人但是住在不同的地方或者同名的人；不能查找<span class=\"hljs-keyword\">unique</span>的元素。<br><span class=\"hljs-keyword\">from</span> student;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>criteria</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs match\">select *<br>from student<br>where student_Mobile &gt;111 and student_Age &lt;18;<br></code></pre></td></tr></table></figure>\n<p>not in(‘  ‘,’  ‘);<br>between 1 and 5;(1,2,3,4,5)<br>in(1,5);(1,5)</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%\"></a>%</h3><p>A% &#x3D; A____  例如AHMAD;<br>%A &#x3D; _<em><strong>A  例如SERA；<br>%A% &#x3D; <em>A</em></strong></em>  例如 SEAR；<br>A%A；<br>…</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">select</span> *<br><span class=\"hljs-keyword\">from</span> student<br><span class=\"hljs-keyword\">where</span> student_Name <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;L%K%&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"group-by\"><a href=\"#group-by\" class=\"headerlink\" title=\"group by\"></a>group by</h3><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><h3 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"drop\"></a>drop</h3><h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>记得删除要加from;<br>安全删除日志或单独的记录，可以复原，不删除表的关系等。而drop会删掉所有的并不能复原；</p>\n<h3 id=\"concat-把两个column合在一起，只是查询临时放在一起\"><a href=\"#concat-把两个column合在一起，只是查询临时放在一起\" class=\"headerlink\" title=\"concat 把两个column合在一起，只是查询临时放在一起\"></a>concat 把两个column合在一起，只是查询临时放在一起</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">concat</span>(student_ID,<span class=\"hljs-string\">&#x27;,&#x27;</span>,student_Name)<span class=\"hljs-keyword\">as</span><span class=\"hljs-string\">&#x27;student info&#x27;</span><br><span class=\"hljs-keyword\">from</span> student<span class=\"hljs-punctuation\">;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"add-datetime-null-default-now\"><a href=\"#add-datetime-null-default-now\" class=\"headerlink\" title=\"add _ datetime null default now()\"></a>add _ datetime null default now()</h3><figure class=\"highlight plaintext\"><figcaption><span>_ 中</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 把当前时间加入到表\">alter table student<br>add student_time datetime null default now();<br></code></pre></td></tr></table></figure>\n<h3 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\">insert <span class=\"hljs-keyword\">into</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-function\">(<span class=\"hljs-params\">student_Name,student_Mobile,student_Email,student_ID</span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">values</span></span><br><span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;LK&#x27;</span>,<span class=\"hljs-string\">&#x27;0&#x27;</span>,<span class=\"hljs-string\">&#x27;0&#x27;</span>,<span class=\"hljs-string\">&#x27;xmus004&#x27;</span></span>)</span>;<span class=\"hljs-comment\">//加入新人lk</span><br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> student<br>order <span class=\"hljs-keyword\">by</span> student_ID;<span class=\"hljs-comment\">//显示顺序</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 加column\">alter table student<br>add DOB date NULL;<br>alter table student<br>add AGE int null;<br></code></pre></td></tr></table></figure>\n<p>然后设置一个DOB：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">update student<br><span class=\"hljs-keyword\">set</span> DOB <span class=\"hljs-comment\">=</span> <span class=\"hljs-comment\">&#x27;2020-03-14&#x27;</span><br>where <span class=\"hljs-comment\">student_ID =</span> <span class=\"hljs-comment\">&#x27;xmus002&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>根据设置的DOB来自动计算人年龄：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">update</span> student<br><span class=\"hljs-keyword\">set</span> AGE =date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),<span class=\"hljs-string\">&#x27;%Y&#x27;</span>) + <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">where</span> student_ID <span class=\"hljs-keyword\">between</span> <span class=\"hljs-string\">&#x27;xmus001&#x27;</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">&#x27;xmus004&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"第6周作业\"><a href=\"#第6周作业\" class=\"headerlink\" title=\"第6周作业\"></a>第6周作业</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">database</span> shop;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">use shop<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> customer<br>(<br>customerID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,<br>FirstName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>LastName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>DateofBirth <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">null</span>,<br>street <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">null</span>,<br>city <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">null</span>,<br>state <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">null</span>,<br>MobileNo <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">null</span><br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> item<br>(<br>ItemID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,<br>ItemName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>Price <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">null</span>,<br>Brand <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span><br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> salesman<br>(<br>StaffID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,<br>StaffName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>WorkingDate <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">null</span>,<br>Salary <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">null</span><br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">transaction</span><br>(<br>InvoiceNo <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary key</span>,<br>CustomeID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,     //<span class=\"hljs-keyword\">primary key</span> 和 forigen key 都不能为<span class=\"hljs-keyword\">null</span><br>ItemID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>StaffID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>Quantity <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">null</span>,<br>TotalAmount <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">null</span>,<br><span class=\"hljs-keyword\">Foreign Key</span> fk_transaction_CustomerID(customeID) <span class=\"hljs-keyword\">references</span> Customer(customerID),//不用区分大小写<br><span class=\"hljs-keyword\">Foreign Key</span> fk_transaction_ItemID(ItemID) <span class=\"hljs-keyword\">references</span> item(ItemID),<br><span class=\"hljs-keyword\">Foreign Key</span> fk_transaction_StaffID(staffID) <span class=\"hljs-keyword\">references</span> salesman(staffID)<br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">insert into Customer<br>(customerID, FirstName,LastName,DateofBirth,Street,City,state,MobileNo)<br>values<br>(&#x27;C001&#x27;,&#x27;Britney&#x27;,&#x27;Spears&#x27;,&#x27;<span class=\"hljs-number\">2020-10-04</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Sepang&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">09222333</span>&#x27;),<br>(&#x27;C002&#x27;,&#x27;Britney&#x27;,&#x27;Jackson&#x27;,&#x27;<span class=\"hljs-number\">2007-06-04</span>&#x27;,&#x27;3rd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01944433</span>3&#x27;),<br>(&#x27;C003&#x27;,&#x27;John&#x27;,&#x27;Wick&#x27;,&#x27;<span class=\"hljs-number\">1996-04-07</span>&#x27;,&#x27;2nd Level&#x27;,&#x27;Butterworth&#x27;,&#x27;Penang&#x27;,&#x27;<span class=\"hljs-number\">01999933</span>3&#x27;),<br>(&#x27;C004&#x27;,&#x27;John&#x27;,&#x27;Cena&#x27;,&#x27;<span class=\"hljs-number\">1990-03-03</span>&#x27;,&#x27;3rd Floor&#x27;,&#x27;Georgetown&#x27;,&#x27;Penang&#x27;,&#x27;<span class=\"hljs-number\">01222233</span>3&#x27;),<br>(&#x27;C005&#x27;,&#x27;Elizabeth&#x27;,&#x27;Stone&#x27;,&#x27;<span class=\"hljs-number\">1985-04-03</span>&#x27;,&#x27;4th Street&#x27;,&#x27;Sepang&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01256733</span>3&#x27;),<br>(&#x27;C006&#x27;,&#x27;Jimmy&#x27;,&#x27;Stone&#x27;,&#x27;<span class=\"hljs-number\">2002-10-03</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01922443</span>3&#x27;),<br>(&#x27;C007&#x27;,&#x27;Justin&#x27;,&#x27;Timerlake&#x27;,&#x27;<span class=\"hljs-number\">2015-06-04</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01944433</span>3&#x27;);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> Item<br>(ItemID, ItemName,Price,Brand)<br><span class=\"hljs-keyword\">values</span><br>(<span class=\"hljs-string\">&#x27;I001&#x27;</span>,<span class=\"hljs-string\">&#x27;Laptop&#x27;</span>,<span class=\"hljs-string\">&#x27;1500&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I002&#x27;</span>,<span class=\"hljs-string\">&#x27;Laptop&#x27;</span>,<span class=\"hljs-string\">&#x27;1700&#x27;</span>,<span class=\"hljs-string\">&#x27;Dell&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I003&#x27;</span>,<span class=\"hljs-string\">&#x27;Laptop&#x27;</span>,<span class=\"hljs-string\">&#x27;3500&#x27;</span>,<span class=\"hljs-string\">&#x27;Apple&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I004&#x27;</span>,<span class=\"hljs-string\">&#x27;Tablet&#x27;</span>,<span class=\"hljs-string\">&#x27;800&#x27;</span>,<span class=\"hljs-string\">&#x27;Apple&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I005&#x27;</span>,<span class=\"hljs-string\">&#x27;Tablet&#x27;</span>,<span class=\"hljs-string\">&#x27;1000&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I006&#x27;</span>,<span class=\"hljs-string\">&#x27;Mouse&#x27;</span>,<span class=\"hljs-string\">&#x27;70&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I007&#x27;</span>,<span class=\"hljs-string\">&#x27;Mouse&#x27;</span>,<span class=\"hljs-string\">&#x27;80&#x27;</span>,<span class=\"hljs-string\">&#x27;Logistech&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I008&#x27;</span>,<span class=\"hljs-string\">&#x27;Printer&#x27;</span>,<span class=\"hljs-string\">&#x27;500&#x27;</span>,<span class=\"hljs-string\">&#x27;HP&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I009&#x27;</span>,<span class=\"hljs-string\">&#x27;Printer&#x27;</span>,<span class=\"hljs-string\">&#x27;300&#x27;</span>,<span class=\"hljs-string\">&#x27;Canon&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I010&#x27;</span>,<span class=\"hljs-string\">&#x27;Speaker&#x27;</span>,<span class=\"hljs-string\">&#x27;50&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>);<br><span class=\"hljs-keyword\">select</span> *<span class=\"hljs-keyword\">from</span> item;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">insert into transaction<br>(InvoiceNo,customeID,ItemID,StaffID,Quantity)<br>values<br>(&#x27;<span class=\"hljs-number\">1000</span>1&#x27;,&#x27;C001&#x27;,&#x27;I003&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>2&#x27;,&#x27;C001&#x27;,&#x27;I004&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>3&#x27;,&#x27;C002&#x27;,&#x27;I001&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>4&#x27;,&#x27;C002&#x27;,&#x27;I006&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>5&#x27;,&#x27;C003&#x27;,&#x27;I002&#x27;,&#x27;S002&#x27;,&#x27;5&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>6&#x27;,&#x27;C003&#x27;,&#x27;I007&#x27;,&#x27;S002&#x27;,&#x27;5&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>7&#x27;,&#x27;C004&#x27;,&#x27;I009&#x27;,&#x27;S003&#x27;,&#x27;3&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>8&#x27;,&#x27;C004&#x27;,&#x27;I008&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>9&#x27;,&#x27;C005&#x27;,&#x27;I001&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;),<br>(&#x27;<span class=\"hljs-number\">1001</span>0&#x27;,&#x27;C005&#x27;,&#x27;I005&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;);<br>select *from transaction;<br></code></pre></td></tr></table></figure>\n<p>以上全是准备工作，现在才是重点</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display list of purchase item for customer ID (C001, C002).</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1.\">select * from Transaction<br>where customeID IN(&#x27;C001&#x27;,&#x27;C002&#x27;);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display list of customer for Staff ID (S001, S002).</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 2.\">select * from Transaction<br>where staffID IN(&#x27;s001&#x27;,&#x27;s002&#x27;);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the customer ID, customer full name, and Full Address from customer Table.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 3.\">select customerID as&#x27;ID NO&#x27;,<br>concat(FirstName,&#x27; &#x27;,LastName) &#x27;Full Name&#x27;,<br>concat(street,&#x27;,&#x27;,city,&#x27;,&#x27;,state) &#x27;Mailing Address&#x27;<br>from customer;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the item id, item name, and price that price more than RM700.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 4.\">select itemID,itemname,price<br>from item<br>where price &gt;=700<br>order by price;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the customer id, fullname (First+LastName), state that live in Selangor.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 5.\">select customerID, <br>concat(firstname,&#x27; &#x27;,lastname) as &#x27;FULL Name&#x27;, state<br>from customer<br>where state = &#x27;selangor&#x27;;//where state like &#x27;sel%&#x27;;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to list all the state in customer table.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 6.\">select distinct state   //避免重复的<br>from customer;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the price range is between 500 to 2000</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 7.\">select *from item<br>where price between 500 and 2000 //注意between和in的区别<br>order by price;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query where clerk salary is less than 1,500 and working before 2011.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 8.\">select *from salesman<br>where Salary &lt;= 2000 and WorkingDate &lt;= &#x27;2011-01-01&#x27; //注意日期写法<br>order by WorkingDate;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display customer age.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 9.\">select customerID, concat(firstname,&#x27; &#x27;,lastname) as &#x27;full name&#x27;,<br>concat(street,&#x27;,&#x27;,city,&#x27;,&#x27;,state)as&#x27;full address&#x27;,dateofbirth,   //真的复杂，之前合并了，现在就都得写<br>(date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),&#x27;%Y&#x27;) + 0)as age //这个不会真要背吧<br>from customer<br>order by age;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display working experience.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 10.\">select staffid,staffname,workingdate,<br>(date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),&#x27;%Y&#x27;) + 0)as &#x27;working experience&#x27; //长string用‘ ’括起来<br>from salesman<br>order by workingdate desc;<br></code></pre></td></tr></table></figure>\n<h3 id=\"第7周作业\"><a href=\"#第7周作业\" class=\"headerlink\" title=\"第7周作业\"></a>第7周作业</h3><figure class=\"highlight plaintext\"><figcaption><span>a query to display list of member information where name start with J.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select FirstName,<br>from members<br>where FirstName like &#x27;J%&#x27;;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display list of member that register for Diamond membership.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select *,<br>from members<br>where tpye_name = &#x27;Diamond&#x27;;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to list all the state in member table.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select distinct state<br>from members;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display the member ID, member full name, Full Address, membership and sort by membership.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,<br>from member<br>order by type_name;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display member age.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,DOB,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),&#x27;%Y&#x27;) + 0)as age<br>from member<br>order by age;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display member that lives in Johor or Selangor.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,DOB,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),&#x27;%Y&#x27;) + 0)as age<br>from member<br>where state = &#x27;Johor&#x27; or state = &#x27;selangor&#x27; -- where state in (&#x27;Johor&#x27;,&#x27;selangor&#x27;)<br>order by age;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display MemberID, ClassID, TrainerID and sort by ClassID.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,classID,<br>from register<br>order by classID;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display the class id, class name, and class price between RM50 and RM150.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select classID,ClassName,Fee<br>from class<br>where fee between 50 and 150;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query where trainer salary is less than 3,000 and working before 2015.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select *<br>from trainer<br>where salary &lt;3000 and WorkingDate &lt;&#x27;2015-01-01&#x27;; --第一个是年，第二个是日，最后是月<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query where trainer working experience is less than 5 years or specialized in Martial arts.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select trainerID,trainerName,workingDate,skill,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),&#x27;%Y&#x27;) + 0)as experience<br>from trainer<br>where wokingdate &gt;&#x27;2019-01-01&#x27; or skillID = &#x27;s001&#x27;; --大大的注意不能用experience来比较，系统不知道我们新建的这个是什么意思，所以还是只能用已有的workingdate.<br></code></pre></td></tr></table></figure>\n<p>总的来说，给列赋予别名时AS关键字是可选的，而且别名不需要用引号括起来。</p>\n<h3 id=\"第八周-Adding-Jion-Queries\"><a href=\"#第八周-Adding-Jion-Queries\" class=\"headerlink\" title=\"第八周 Adding Jion Queries\"></a>第八周 Adding Jion Queries</h3><h4 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h4><figure class=\"highlight plaintext\"><figcaption><span>和 register 的交集.跟以前不一样是要加例如member.前缀</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 找到members\">SELECT register.MemberID , members.firstName,<br>members.LastName, register.ClassId<br>from members inner join register on members.MemberID = register.memberID;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>relationship不要超过2.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 升级版，但是一个table的\">SELECT register.MemberID , concat(members.firstName,&#x27; &#x27;,members.LastName) as &#x27;Full Nmae&#x27;, register.ClassId, concat(members.street,&#x27; &#x27;,members.city,&#x27; &#x27;,members.state)&#x27;Address&#x27;,<br>class.classname, class.price, membership.type_name<br>from membership inner join members on membership.type_name = members.type_name <br> inner join register on members.MemberID = register.memberID <br> inner join class on register.classid = class.classid<br></code></pre></td></tr></table></figure>\n<h4 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h4><h4 id=\"left-join\"><a href=\"#left-join\" class=\"headerlink\" title=\"left join\"></a>left join</h4><h4 id=\"right-join\"><a href=\"#right-join\" class=\"headerlink\" title=\"right join\"></a>right join</h4><h4 id=\"full-join\"><a href=\"#full-join\" class=\"headerlink\" title=\"full join\"></a>full join</h4><p>!(){1.png}</p>\n<h4 id=\"aggreate\"><a href=\"#aggreate\" class=\"headerlink\" title=\"aggreate\"></a>aggreate</h4><p>count, sum, min, max, average</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-keyword\">select</span> a,b,c,<br>count(<span class=\"hljs-keyword\">register</span>.classid) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;Total class&#x27;</span>,<br>sum(<span class=\"hljs-keyword\">class</span>.price)<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;Total price&#x27;</span><br><span class=\"hljs-keyword\">from</span> member <span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">join</span> <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">on</span> member.memberid = <span class=\"hljs-keyword\">register</span>.memberid<br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">register</span>.memberid      --<span class=\"hljs-keyword\">group</span> 必不可少<br></code></pre></td></tr></table></figure>\n<h4 id=\"Mathematic-calculation\"><a href=\"#Mathematic-calculation\" class=\"headerlink\" title=\"Mathematic calculation\"></a>Mathematic calculation</h4><ul>\n<li>&#x2F; - +<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">sum</span>(<span class=\"hljs-keyword\">class</span>.price)<span class=\"hljs-keyword\">as</span><span class=\"hljs-string\">&quot;before discount&quot;</span>,<br><span class=\"hljs-keyword\">sum</span>((<span class=\"hljs-number\">1</span>-membership.discout) * <span class=\"hljs-keyword\">class</span>.price)<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&quot;Total Amount&quot;</span><br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> member.memberid;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">transaction</span>.staffid, salesman.StaffName,<br><span class=\"hljs-built_in\">count</span>(<span class=\"hljs-keyword\">transaction</span>.itemid)<span class=\"hljs-string\">&#x27;order number&#x27;</span>,<br><span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-keyword\">transaction</span>.quantity)<span class=\"hljs-string\">&#x27;total quantity&#x27;</span>,<br><span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-keyword\">transaction</span>.quantity*item.price) <span class=\"hljs-string\">&#x27;total sales&#x27;</span>,<br>(<span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-keyword\">transaction</span>.quantity*item.price))*<span class=\"hljs-number\">0.1</span>+salesman.Salary <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;salery&#x27;</span><br><span class=\"hljs-keyword\">from</span> salesman  <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> <span class=\"hljs-keyword\">transaction</span> <span class=\"hljs-keyword\">on</span> salesman.staffid = <span class=\"hljs-keyword\">transaction</span>.staffid<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> item <span class=\"hljs-keyword\">on</span> item.itemid = <span class=\"hljs-keyword\">transaction</span>.itemid<br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">transaction</span>.staffid;<br></code></pre></td></tr></table></figure>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10\"></a>10</h3><p>往已经有的table里加外键</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> registration<br><span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> (staffid)<br><span class=\"hljs-keyword\">references</span> staff(staffid);<br></code></pre></td></tr></table></figure>\n<p>Exercise</p>\n<ol>\n<li>Write a query to display list of GuestID, Guest Full Name, Guest Address, and RoomID from registration<br>and guest table.</li>\n<li>Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from<br>registration, guest and room table.</li>\n<li>Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from<br>registration, guest and room table where Firstname start with ‘J’ and lives in Selangor. Compare the<br>registration and guest for Null values.</li>\n<li>Write a query to count how many room that every guest has book.</li>\n<li>Write a query for the SUM cost that the guest needs to pay for the room.</li>\n<li>Write a query for the discounted rooms for every guest.</li>\n<li>Write a query to count how many room that every staff has submitted.</li>\n<li>Write a total sum of sales for every staff.</li>\n<li>Calculate the total salary for staff if they get 15% commission from the total sales.</li>\n<li>Calculate the age and working experience from guest and staff where age &lt; 30 years old or working<br>experience &gt; 10.<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">select registration<span class=\"hljs-selector-class\">.guestid</span>,<br><span class=\"hljs-function\"><span class=\"hljs-title\">concat</span><span class=\"hljs-params\">(guest.firstname,<span class=\"hljs-string\">&#x27;  &#x27;</span>,guest.lastname)</span></span> <span class=\"hljs-string\">&#x27;full name&#x27;</span>,<br><span class=\"hljs-function\"><span class=\"hljs-title\">concat</span><span class=\"hljs-params\">(guest.street,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.city,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.state)</span></span> <span class=\"hljs-string\">&#x27;mailing address&#x27;</span>,<br>registration<span class=\"hljs-selector-class\">.roomid</span>, room<span class=\"hljs-selector-class\">.roomtype</span>,room<span class=\"hljs-selector-class\">.price</span><br>from guest inner join registration on guest<span class=\"hljs-selector-class\">.guestid</span> = registration<span class=\"hljs-selector-class\">.guestid</span><br>inner join room on registration<span class=\"hljs-selector-class\">.roomid</span> = room.roomid<br></code></pre></td></tr></table></figure>\n在后面加where guest.firsname like ‘%kun’； 会发现结果为空，empty output &#x3D; no sharing data on selected condition;<br>但是加 left outer<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">from</span> guest <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">outer</span> <span class=\"hljs-keyword\">join</span> registration <span class=\"hljs-keyword\">on</span> guest.guestid <span class=\"hljs-operator\">=</span> registration.guestid<br><span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">outer</span> <span class=\"hljs-keyword\">join</span> room <span class=\"hljs-keyword\">on</span> registration.roomid <span class=\"hljs-operator\">=</span> room.roomid<br><span class=\"hljs-keyword\">where</span> guest.firstname <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;j%&#x27;</span> <span class=\"hljs-keyword\">and</span> guest.state <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;selangor&#x27;</span>;<br></code></pre></td></tr></table></figure>\n有的变成null了 这个意思是no data;<br>再加：where registration.guestid is null; 出来的结果表示还没有订房间的客人；<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> registration.guestid,<br>concat(guest.firstname,<span class=\"hljs-string\">&#x27;  &#x27;</span>,guest.lastname)<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;full name&#x27;</span>,<br>concat(guest.street,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.city,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.state) <span class=\"hljs-string\">&#x27;mailing address&#x27;</span>,<br>sum(room.price*datediff(registration.checkout,registration.checkin))<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;total pay&#x27;</span>,<br>((<span class=\"hljs-number\">100</span>-membership.discount)/<span class=\"hljs-number\">100</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;total discount&#x27;</span><br><span class=\"hljs-keyword\">from</span> membership <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> guest <span class=\"hljs-keyword\">on</span> membership.<span class=\"hljs-keyword\">type</span> = guest.<span class=\"hljs-keyword\">type</span><br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> registration <span class=\"hljs-keyword\">on</span> guest.guestid = registration.guestid<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> room <span class=\"hljs-keyword\">on</span> registration.roomid = room.roomid<br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> registration.guestid;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">select</span> student_ID,student_Name<br><span class=\"hljs-keyword\">from</span> student;<br><span class=\"hljs-keyword\">where</span> student_Name = <span class=\"hljs-string\">&#x27;Mary Lamb&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">distinct</span> student_Name，student_Address//查找可以有重复的，比如同一个人但是住在不同的地方或者同名的人；不能查找<span class=\"hljs-keyword\">unique</span>的元素。<br><span class=\"hljs-keyword\">from</span> student;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>criteria</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs match\">select *<br>from student<br>where student_Mobile &gt;111 and student_Age &lt;18;<br></code></pre></td></tr></table></figure>\n<p>not in(‘  ‘,’  ‘);<br>between 1 and 5;(1,2,3,4,5)<br>in(1,5);(1,5)</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"%\"></a>%</h3><p>A% &#x3D; A____  例如AHMAD;<br>%A &#x3D; _<em><strong>A  例如SERA；<br>%A% &#x3D; <em>A</em></strong></em>  例如 SEAR；<br>A%A；<br>…</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">select</span> *<br><span class=\"hljs-keyword\">from</span> student<br><span class=\"hljs-keyword\">where</span> student_Name <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;L%K%&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"group-by\"><a href=\"#group-by\" class=\"headerlink\" title=\"group by\"></a>group by</h3><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><h3 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"drop\"></a>drop</h3><h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>记得删除要加from;<br>安全删除日志或单独的记录，可以复原，不删除表的关系等。而drop会删掉所有的并不能复原；</p>\n<h3 id=\"concat-把两个column合在一起，只是查询临时放在一起\"><a href=\"#concat-把两个column合在一起，只是查询临时放在一起\" class=\"headerlink\" title=\"concat 把两个column合在一起，只是查询临时放在一起\"></a>concat 把两个column合在一起，只是查询临时放在一起</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">concat</span>(student_ID,<span class=\"hljs-string\">&#x27;,&#x27;</span>,student_Name)<span class=\"hljs-keyword\">as</span><span class=\"hljs-string\">&#x27;student info&#x27;</span><br><span class=\"hljs-keyword\">from</span> student<span class=\"hljs-punctuation\">;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"add-datetime-null-default-now\"><a href=\"#add-datetime-null-default-now\" class=\"headerlink\" title=\"add _ datetime null default now()\"></a>add _ datetime null default now()</h3><figure class=\"highlight plaintext\"><figcaption><span>_ 中</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 把当前时间加入到表\">alter table student<br>add student_time datetime null default now();<br></code></pre></td></tr></table></figure>\n<h3 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\">insert <span class=\"hljs-keyword\">into</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-function\">(<span class=\"hljs-params\">student_Name,student_Mobile,student_Email,student_ID</span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">values</span></span><br><span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;LK&#x27;</span>,<span class=\"hljs-string\">&#x27;0&#x27;</span>,<span class=\"hljs-string\">&#x27;0&#x27;</span>,<span class=\"hljs-string\">&#x27;xmus004&#x27;</span></span>)</span>;<span class=\"hljs-comment\">//加入新人lk</span><br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> student<br>order <span class=\"hljs-keyword\">by</span> student_ID;<span class=\"hljs-comment\">//显示顺序</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 加column\">alter table student<br>add DOB date NULL;<br>alter table student<br>add AGE int null;<br></code></pre></td></tr></table></figure>\n<p>然后设置一个DOB：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">update student<br><span class=\"hljs-keyword\">set</span> DOB <span class=\"hljs-comment\">=</span> <span class=\"hljs-comment\">&#x27;2020-03-14&#x27;</span><br>where <span class=\"hljs-comment\">student_ID =</span> <span class=\"hljs-comment\">&#x27;xmus002&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>根据设置的DOB来自动计算人年龄：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">update</span> student<br><span class=\"hljs-keyword\">set</span> AGE =date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),<span class=\"hljs-string\">&#x27;%Y&#x27;</span>) + <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">where</span> student_ID <span class=\"hljs-keyword\">between</span> <span class=\"hljs-string\">&#x27;xmus001&#x27;</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">&#x27;xmus004&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"第6周作业\"><a href=\"#第6周作业\" class=\"headerlink\" title=\"第6周作业\"></a>第6周作业</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">database</span> shop;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">use shop<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> customer<br>(<br>customerID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,<br>FirstName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>LastName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>DateofBirth <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">null</span>,<br>street <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">null</span>,<br>city <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">null</span>,<br>state <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">null</span>,<br>MobileNo <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">null</span><br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> item<br>(<br>ItemID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,<br>ItemName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>Price <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">null</span>,<br>Brand <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span><br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> salesman<br>(<br>StaffID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,<br>StaffName <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>WorkingDate <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">null</span>,<br>Salary <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">null</span><br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">transaction</span><br>(<br>InvoiceNo <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary key</span>,<br>CustomeID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,     //<span class=\"hljs-keyword\">primary key</span> 和 forigen key 都不能为<span class=\"hljs-keyword\">null</span><br>ItemID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>StaffID <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>Quantity <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">null</span>,<br>TotalAmount <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">null</span>,<br><span class=\"hljs-keyword\">Foreign Key</span> fk_transaction_CustomerID(customeID) <span class=\"hljs-keyword\">references</span> Customer(customerID),//不用区分大小写<br><span class=\"hljs-keyword\">Foreign Key</span> fk_transaction_ItemID(ItemID) <span class=\"hljs-keyword\">references</span> item(ItemID),<br><span class=\"hljs-keyword\">Foreign Key</span> fk_transaction_StaffID(staffID) <span class=\"hljs-keyword\">references</span> salesman(staffID)<br>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">insert into Customer<br>(customerID, FirstName,LastName,DateofBirth,Street,City,state,MobileNo)<br>values<br>(&#x27;C001&#x27;,&#x27;Britney&#x27;,&#x27;Spears&#x27;,&#x27;<span class=\"hljs-number\">2020-10-04</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Sepang&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">09222333</span>&#x27;),<br>(&#x27;C002&#x27;,&#x27;Britney&#x27;,&#x27;Jackson&#x27;,&#x27;<span class=\"hljs-number\">2007-06-04</span>&#x27;,&#x27;3rd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01944433</span>3&#x27;),<br>(&#x27;C003&#x27;,&#x27;John&#x27;,&#x27;Wick&#x27;,&#x27;<span class=\"hljs-number\">1996-04-07</span>&#x27;,&#x27;2nd Level&#x27;,&#x27;Butterworth&#x27;,&#x27;Penang&#x27;,&#x27;<span class=\"hljs-number\">01999933</span>3&#x27;),<br>(&#x27;C004&#x27;,&#x27;John&#x27;,&#x27;Cena&#x27;,&#x27;<span class=\"hljs-number\">1990-03-03</span>&#x27;,&#x27;3rd Floor&#x27;,&#x27;Georgetown&#x27;,&#x27;Penang&#x27;,&#x27;<span class=\"hljs-number\">01222233</span>3&#x27;),<br>(&#x27;C005&#x27;,&#x27;Elizabeth&#x27;,&#x27;Stone&#x27;,&#x27;<span class=\"hljs-number\">1985-04-03</span>&#x27;,&#x27;4th Street&#x27;,&#x27;Sepang&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01256733</span>3&#x27;),<br>(&#x27;C006&#x27;,&#x27;Jimmy&#x27;,&#x27;Stone&#x27;,&#x27;<span class=\"hljs-number\">2002-10-03</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01922443</span>3&#x27;),<br>(&#x27;C007&#x27;,&#x27;Justin&#x27;,&#x27;Timerlake&#x27;,&#x27;<span class=\"hljs-number\">2015-06-04</span>&#x27;,&#x27;2nd Street&#x27;,&#x27;Shah Alam&#x27;,&#x27;Selangor&#x27;,&#x27;<span class=\"hljs-number\">01944433</span>3&#x27;);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> Item<br>(ItemID, ItemName,Price,Brand)<br><span class=\"hljs-keyword\">values</span><br>(<span class=\"hljs-string\">&#x27;I001&#x27;</span>,<span class=\"hljs-string\">&#x27;Laptop&#x27;</span>,<span class=\"hljs-string\">&#x27;1500&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I002&#x27;</span>,<span class=\"hljs-string\">&#x27;Laptop&#x27;</span>,<span class=\"hljs-string\">&#x27;1700&#x27;</span>,<span class=\"hljs-string\">&#x27;Dell&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I003&#x27;</span>,<span class=\"hljs-string\">&#x27;Laptop&#x27;</span>,<span class=\"hljs-string\">&#x27;3500&#x27;</span>,<span class=\"hljs-string\">&#x27;Apple&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I004&#x27;</span>,<span class=\"hljs-string\">&#x27;Tablet&#x27;</span>,<span class=\"hljs-string\">&#x27;800&#x27;</span>,<span class=\"hljs-string\">&#x27;Apple&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I005&#x27;</span>,<span class=\"hljs-string\">&#x27;Tablet&#x27;</span>,<span class=\"hljs-string\">&#x27;1000&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I006&#x27;</span>,<span class=\"hljs-string\">&#x27;Mouse&#x27;</span>,<span class=\"hljs-string\">&#x27;70&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I007&#x27;</span>,<span class=\"hljs-string\">&#x27;Mouse&#x27;</span>,<span class=\"hljs-string\">&#x27;80&#x27;</span>,<span class=\"hljs-string\">&#x27;Logistech&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I008&#x27;</span>,<span class=\"hljs-string\">&#x27;Printer&#x27;</span>,<span class=\"hljs-string\">&#x27;500&#x27;</span>,<span class=\"hljs-string\">&#x27;HP&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I009&#x27;</span>,<span class=\"hljs-string\">&#x27;Printer&#x27;</span>,<span class=\"hljs-string\">&#x27;300&#x27;</span>,<span class=\"hljs-string\">&#x27;Canon&#x27;</span>),<br>(<span class=\"hljs-string\">&#x27;I010&#x27;</span>,<span class=\"hljs-string\">&#x27;Speaker&#x27;</span>,<span class=\"hljs-string\">&#x27;50&#x27;</span>,<span class=\"hljs-string\">&#x27;Huawei&#x27;</span>);<br><span class=\"hljs-keyword\">select</span> *<span class=\"hljs-keyword\">from</span> item;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">insert into transaction<br>(InvoiceNo,customeID,ItemID,StaffID,Quantity)<br>values<br>(&#x27;<span class=\"hljs-number\">1000</span>1&#x27;,&#x27;C001&#x27;,&#x27;I003&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>2&#x27;,&#x27;C001&#x27;,&#x27;I004&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>3&#x27;,&#x27;C002&#x27;,&#x27;I001&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>4&#x27;,&#x27;C002&#x27;,&#x27;I006&#x27;,&#x27;S001&#x27;,&#x27;1&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>5&#x27;,&#x27;C003&#x27;,&#x27;I002&#x27;,&#x27;S002&#x27;,&#x27;5&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>6&#x27;,&#x27;C003&#x27;,&#x27;I007&#x27;,&#x27;S002&#x27;,&#x27;5&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>7&#x27;,&#x27;C004&#x27;,&#x27;I009&#x27;,&#x27;S003&#x27;,&#x27;3&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>8&#x27;,&#x27;C004&#x27;,&#x27;I008&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;),<br>(&#x27;<span class=\"hljs-number\">1000</span>9&#x27;,&#x27;C005&#x27;,&#x27;I001&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;),<br>(&#x27;<span class=\"hljs-number\">1001</span>0&#x27;,&#x27;C005&#x27;,&#x27;I005&#x27;,&#x27;S003&#x27;,&#x27;2&#x27;);<br>select *from transaction;<br></code></pre></td></tr></table></figure>\n<p>以上全是准备工作，现在才是重点</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display list of purchase item for customer ID (C001, C002).</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1.\">select * from Transaction<br>where customeID IN(&#x27;C001&#x27;,&#x27;C002&#x27;);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display list of customer for Staff ID (S001, S002).</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 2.\">select * from Transaction<br>where staffID IN(&#x27;s001&#x27;,&#x27;s002&#x27;);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the customer ID, customer full name, and Full Address from customer Table.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 3.\">select customerID as&#x27;ID NO&#x27;,<br>concat(FirstName,&#x27; &#x27;,LastName) &#x27;Full Name&#x27;,<br>concat(street,&#x27;,&#x27;,city,&#x27;,&#x27;,state) &#x27;Mailing Address&#x27;<br>from customer;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the item id, item name, and price that price more than RM700.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 4.\">select itemID,itemname,price<br>from item<br>where price &gt;=700<br>order by price;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the customer id, fullname (First+LastName), state that live in Selangor.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 5.\">select customerID, <br>concat(firstname,&#x27; &#x27;,lastname) as &#x27;FULL Name&#x27;, state<br>from customer<br>where state = &#x27;selangor&#x27;;//where state like &#x27;sel%&#x27;;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to list all the state in customer table.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 6.\">select distinct state   //避免重复的<br>from customer;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display the price range is between 500 to 2000</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 7.\">select *from item<br>where price between 500 and 2000 //注意between和in的区别<br>order by price;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query where clerk salary is less than 1,500 and working before 2011.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 8.\">select *from salesman<br>where Salary &lt;= 2000 and WorkingDate &lt;= &#x27;2011-01-01&#x27; //注意日期写法<br>order by WorkingDate;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display customer age.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 9.\">select customerID, concat(firstname,&#x27; &#x27;,lastname) as &#x27;full name&#x27;,<br>concat(street,&#x27;,&#x27;,city,&#x27;,&#x27;,state)as&#x27;full address&#x27;,dateofbirth,   //真的复杂，之前合并了，现在就都得写<br>(date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),&#x27;%Y&#x27;) + 0)as age //这个不会真要背吧<br>from customer<br>order by age;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Write a query to display working experience.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 10.\">select staffid,staffname,workingdate,<br>(date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),&#x27;%Y&#x27;) + 0)as &#x27;working experience&#x27; //长string用‘ ’括起来<br>from salesman<br>order by workingdate desc;<br></code></pre></td></tr></table></figure>\n<h3 id=\"第7周作业\"><a href=\"#第7周作业\" class=\"headerlink\" title=\"第7周作业\"></a>第7周作业</h3><figure class=\"highlight plaintext\"><figcaption><span>a query to display list of member information where name start with J.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select FirstName,<br>from members<br>where FirstName like &#x27;J%&#x27;;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display list of member that register for Diamond membership.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select *,<br>from members<br>where tpye_name = &#x27;Diamond&#x27;;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to list all the state in member table.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select distinct state<br>from members;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display the member ID, member full name, Full Address, membership and sort by membership.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,<br>from member<br>order by type_name;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display member age.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,DOB,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),Dateofbirth)),&#x27;%Y&#x27;) + 0)as age<br>from member<br>order by age;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display member that lives in Johor or Selangor.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,<br>concat(LastName,&#x27;,&#x27;,city,&#x27;,&#x27;,FirstName)&#x27;Full Name&#x27;,<br>concat(Street,&#x27;,&#x27;,City,&#x27;,&#x27;,State)&#x27;Full Address&#x27;),type_name,DOB,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),DOB)),&#x27;%Y&#x27;) + 0)as age<br>from member<br>where state = &#x27;Johor&#x27; or state = &#x27;selangor&#x27; -- where state in (&#x27;Johor&#x27;,&#x27;selangor&#x27;)<br>order by age;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display MemberID, ClassID, TrainerID and sort by ClassID.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select memberID,classID,<br>from register<br>order by classID;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query to display the class id, class name, and class price between RM50 and RM150.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select classID,ClassName,Fee<br>from class<br>where fee between 50 and 150;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query where trainer salary is less than 3,000 and working before 2015.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select *<br>from trainer<br>where salary &lt;3000 and WorkingDate &lt;&#x27;2015-01-01&#x27;; --第一个是年，第二个是日，最后是月<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>a query where trainer working experience is less than 5 years or specialized in Martial arts.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Write\">select trainerID,trainerName,workingDate,skill,<br>((date_format(FROM_DAYS(DATEDIFF(NOW(),workingdate)),&#x27;%Y&#x27;) + 0)as experience<br>from trainer<br>where wokingdate &gt;&#x27;2019-01-01&#x27; or skillID = &#x27;s001&#x27;; --大大的注意不能用experience来比较，系统不知道我们新建的这个是什么意思，所以还是只能用已有的workingdate.<br></code></pre></td></tr></table></figure>\n<p>总的来说，给列赋予别名时AS关键字是可选的，而且别名不需要用引号括起来。</p>\n<h3 id=\"第八周-Adding-Jion-Queries\"><a href=\"#第八周-Adding-Jion-Queries\" class=\"headerlink\" title=\"第八周 Adding Jion Queries\"></a>第八周 Adding Jion Queries</h3><h4 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h4><figure class=\"highlight plaintext\"><figcaption><span>和 register 的交集.跟以前不一样是要加例如member.前缀</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 找到members\">SELECT register.MemberID , members.firstName,<br>members.LastName, register.ClassId<br>from members inner join register on members.MemberID = register.memberID;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>relationship不要超过2.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 升级版，但是一个table的\">SELECT register.MemberID , concat(members.firstName,&#x27; &#x27;,members.LastName) as &#x27;Full Nmae&#x27;, register.ClassId, concat(members.street,&#x27; &#x27;,members.city,&#x27; &#x27;,members.state)&#x27;Address&#x27;,<br>class.classname, class.price, membership.type_name<br>from membership inner join members on membership.type_name = members.type_name <br> inner join register on members.MemberID = register.memberID <br> inner join class on register.classid = class.classid<br></code></pre></td></tr></table></figure>\n<h4 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h4><h4 id=\"left-join\"><a href=\"#left-join\" class=\"headerlink\" title=\"left join\"></a>left join</h4><h4 id=\"right-join\"><a href=\"#right-join\" class=\"headerlink\" title=\"right join\"></a>right join</h4><h4 id=\"full-join\"><a href=\"#full-join\" class=\"headerlink\" title=\"full join\"></a>full join</h4><p>!(){1.png}</p>\n<h4 id=\"aggreate\"><a href=\"#aggreate\" class=\"headerlink\" title=\"aggreate\"></a>aggreate</h4><p>count, sum, min, max, average</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-keyword\">select</span> a,b,c,<br>count(<span class=\"hljs-keyword\">register</span>.classid) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;Total class&#x27;</span>,<br>sum(<span class=\"hljs-keyword\">class</span>.price)<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;Total price&#x27;</span><br><span class=\"hljs-keyword\">from</span> member <span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">join</span> <span class=\"hljs-keyword\">register</span> <span class=\"hljs-keyword\">on</span> member.memberid = <span class=\"hljs-keyword\">register</span>.memberid<br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">register</span>.memberid      --<span class=\"hljs-keyword\">group</span> 必不可少<br></code></pre></td></tr></table></figure>\n<h4 id=\"Mathematic-calculation\"><a href=\"#Mathematic-calculation\" class=\"headerlink\" title=\"Mathematic calculation\"></a>Mathematic calculation</h4><ul>\n<li>&#x2F; - +<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">sum</span>(<span class=\"hljs-keyword\">class</span>.price)<span class=\"hljs-keyword\">as</span><span class=\"hljs-string\">&quot;before discount&quot;</span>,<br><span class=\"hljs-keyword\">sum</span>((<span class=\"hljs-number\">1</span>-membership.discout) * <span class=\"hljs-keyword\">class</span>.price)<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&quot;Total Amount&quot;</span><br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> member.memberid;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">transaction</span>.staffid, salesman.StaffName,<br><span class=\"hljs-built_in\">count</span>(<span class=\"hljs-keyword\">transaction</span>.itemid)<span class=\"hljs-string\">&#x27;order number&#x27;</span>,<br><span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-keyword\">transaction</span>.quantity)<span class=\"hljs-string\">&#x27;total quantity&#x27;</span>,<br><span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-keyword\">transaction</span>.quantity*item.price) <span class=\"hljs-string\">&#x27;total sales&#x27;</span>,<br>(<span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-keyword\">transaction</span>.quantity*item.price))*<span class=\"hljs-number\">0.1</span>+salesman.Salary <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;salery&#x27;</span><br><span class=\"hljs-keyword\">from</span> salesman  <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> <span class=\"hljs-keyword\">transaction</span> <span class=\"hljs-keyword\">on</span> salesman.staffid = <span class=\"hljs-keyword\">transaction</span>.staffid<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> item <span class=\"hljs-keyword\">on</span> item.itemid = <span class=\"hljs-keyword\">transaction</span>.itemid<br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">transaction</span>.staffid;<br></code></pre></td></tr></table></figure>\n<h3 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10\"></a>10</h3><p>往已经有的table里加外键</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> registration<br><span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> (staffid)<br><span class=\"hljs-keyword\">references</span> staff(staffid);<br></code></pre></td></tr></table></figure>\n<p>Exercise</p>\n<ol>\n<li>Write a query to display list of GuestID, Guest Full Name, Guest Address, and RoomID from registration<br>and guest table.</li>\n<li>Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from<br>registration, guest and room table.</li>\n<li>Write a query to display list of GuestID, Guest Full Name, Guest Address, RoomID, Roomtype from<br>registration, guest and room table where Firstname start with ‘J’ and lives in Selangor. Compare the<br>registration and guest for Null values.</li>\n<li>Write a query to count how many room that every guest has book.</li>\n<li>Write a query for the SUM cost that the guest needs to pay for the room.</li>\n<li>Write a query for the discounted rooms for every guest.</li>\n<li>Write a query to count how many room that every staff has submitted.</li>\n<li>Write a total sum of sales for every staff.</li>\n<li>Calculate the total salary for staff if they get 15% commission from the total sales.</li>\n<li>Calculate the age and working experience from guest and staff where age &lt; 30 years old or working<br>experience &gt; 10.<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">select registration<span class=\"hljs-selector-class\">.guestid</span>,<br><span class=\"hljs-function\"><span class=\"hljs-title\">concat</span><span class=\"hljs-params\">(guest.firstname,<span class=\"hljs-string\">&#x27;  &#x27;</span>,guest.lastname)</span></span> <span class=\"hljs-string\">&#x27;full name&#x27;</span>,<br><span class=\"hljs-function\"><span class=\"hljs-title\">concat</span><span class=\"hljs-params\">(guest.street,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.city,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.state)</span></span> <span class=\"hljs-string\">&#x27;mailing address&#x27;</span>,<br>registration<span class=\"hljs-selector-class\">.roomid</span>, room<span class=\"hljs-selector-class\">.roomtype</span>,room<span class=\"hljs-selector-class\">.price</span><br>from guest inner join registration on guest<span class=\"hljs-selector-class\">.guestid</span> = registration<span class=\"hljs-selector-class\">.guestid</span><br>inner join room on registration<span class=\"hljs-selector-class\">.roomid</span> = room.roomid<br></code></pre></td></tr></table></figure>\n在后面加where guest.firsname like ‘%kun’； 会发现结果为空，empty output &#x3D; no sharing data on selected condition;<br>但是加 left outer<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">from</span> guest <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">outer</span> <span class=\"hljs-keyword\">join</span> registration <span class=\"hljs-keyword\">on</span> guest.guestid <span class=\"hljs-operator\">=</span> registration.guestid<br><span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">outer</span> <span class=\"hljs-keyword\">join</span> room <span class=\"hljs-keyword\">on</span> registration.roomid <span class=\"hljs-operator\">=</span> room.roomid<br><span class=\"hljs-keyword\">where</span> guest.firstname <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;j%&#x27;</span> <span class=\"hljs-keyword\">and</span> guest.state <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;selangor&#x27;</span>;<br></code></pre></td></tr></table></figure>\n有的变成null了 这个意思是no data;<br>再加：where registration.guestid is null; 出来的结果表示还没有订房间的客人；<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> registration.guestid,<br>concat(guest.firstname,<span class=\"hljs-string\">&#x27;  &#x27;</span>,guest.lastname)<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;full name&#x27;</span>,<br>concat(guest.street,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.city,<span class=\"hljs-string\">&#x27; ,&#x27;</span>,guest.state) <span class=\"hljs-string\">&#x27;mailing address&#x27;</span>,<br>sum(room.price*datediff(registration.checkout,registration.checkin))<span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;total pay&#x27;</span>,<br>((<span class=\"hljs-number\">100</span>-membership.discount)/<span class=\"hljs-number\">100</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&#x27;total discount&#x27;</span><br><span class=\"hljs-keyword\">from</span> membership <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> guest <span class=\"hljs-keyword\">on</span> membership.<span class=\"hljs-keyword\">type</span> = guest.<span class=\"hljs-keyword\">type</span><br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> registration <span class=\"hljs-keyword\">on</span> guest.guestid = registration.guestid<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> room <span class=\"hljs-keyword\">on</span> registration.roomid = room.roomid<br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> registration.guestid;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"nowcoder","date":"2023-10-25T05:30:37.000Z","_content":"先搞c输入输出（速度快），学java或者python的大数\n## 高精度\n### 加法\n```\n//基本的加减法\n//数倒着写，然后用函数再反过来，倒着写的好处是进位可以直接加在后面\n\n#include<bits/stdc++.h>\nusing namespace std;\nstring s1,s2;//竞赛多追求速度，写成全局变量不写含参函数可以提高代码运行速度\nint a[1000],b[1000],c[1000];\n/*void fanzhuan(string s1){\n    int l = s1.length();\n    for(int i = 0,j = l-1; i < j;i++,j--){\n        swap(s[i],s[j]);\n    }\n}*/ //手动反转可以被reverse代替\nvoid jiafa(){\n    memset(a,0,sizeof(a));//给数组赋初值，这样严谨。不是只能0，-1，主要是这B 8 位一赋值，转成32位可能不一样，有的时候会赋0x7f（0111111101111111111111，很接近int的最大值，不用0xff是因为1111111111111111111是负数，但是0x7f在进行加法的时候容易变成负数，所以最常用的是0x3f 00111111100111111111111，这是个很大的值。\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    int l2 = s2.length();\n    //int l = max(s1,s2);//如果l1,l2长度不一致就GG了，所以就不传参了，直接三个数组存。\n    for(int i = 0;i <l1;i++)\n        a[i] = s1[i] -'0';//这样可以直接用减去0的asccl码的办法把S1从string 变成int.\n    for(int i =0; i<l2;i++)\n        b[i] = s2[i] - '0';\n    int l = max(l1,l2);\n    for(int i = 0; i<l;i++){\n        c[i] += a[i]+b[i];\n        if(c[i] >= 10){\n            c[i+1] = c[i]/10;   //进位\n            c[i] %= 10;\n        }\n    }\n    if(c[l]!= 0)\n        l++;           //进位后数组变长\n    for(int i = 0;i<l;i++)\n        cout<<c[i];\n}\nint main(void){\n    cin>>s1>>s2;//检测空格\n    //getline();//可以存在空格\n    reverse(s1.begin(), s1.end());\n    reverse(s2.begin(), s2.end());\n    jiafa();\n return 0;\n}\n```\n### 减法\n```\n//基本的减法\n#include<bits/stdc++.h>\nusing namespace std;\nstring s1,s2;\nint a[1000],b[1000],c[1000];\nbool judge(string s1, string s2){\n    int l1 = s1.length();\n    int l2 = s2.length();\n    if(l1>l2) return 1;\n    if(l1<l2) return 0;\n    for(int i = l1 -1;i>=0;i--){\n        if(s1[i] > s2[i]) return 1;\n        if(s1[i] < s2[i]) return 0;\n    }return 1;\n}\nvoid jian(string s1,string s2){\n    memset(a,0,sizeof(a));//给数组赋初值，这样严谨\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    int l2 = s2.length();\n    for(int i=0;i<l1;i++)\n        a[i] = s1[i] - '0';\n    for(int i =0;i<l2;i++)\n        b[i] = s2[i] - '0';\n    int l =max(l1,l2);\n    for(int i =0;i<l;i++){\n        c[i] += a[i] - b[i];\n        if(c[i] < 0){\n            c[i]+= 10;\n            c[i+1]-=1;//减不够，借一位。\n        }\n    }\n    while(l>1 && c[l-1] == 0)l--; //去掉前面的0，减成0可能有很多，用while,而且不能减没了\n    for(int i = l-1; i>=0;i--){\n        cout<<c[i];\n    }\n}\nint main(){\n    cin >>s1>>s2;\n    reverse(s1.begin(), s1.end());\n    reverse(s2.begin(), s2.end());\n    if(judge(s1,s2) == 1) jian(s1,s2);\n    else{\n        cout<<\"-\";\n        jian(s2,s1);\n    }\nreturn 0;\n}\n```\n### 乘法\n```\nvoid cheng(string s1,string s2){\n    memset(a,0,sizeof(a));\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    int l2 = s2.length();\n    for(int i=0;i<l1;i++)\n        a[i] = s1[i] - '0';\n    for(int i =0;i<l2;i++)\n        b[i] = s2[i] - '0';\n    int l = l1+l2-1;\n    for(int i = 0;i <l1; i++)\n    for(int j =0;j<l2;j++){\n        c[i+j] +=a[i] * b[j];\n    }\n    for(int i =0;i <l;i++){\n        if(c[i] >= 10)\n        {\n            c[i+1] += c[i] /10;//进位\n            c[i]  %=10;\n        }\n    }\n    while(c[l] >0){\n        l++;\n        if(c[l] >= 10){\n            c[l+1] += c[l]/10;//可能l不够了\n            c[l] %=10;\n        }\n    }\n    for(int i = l-1; i>=0;i--){\n        cout<<c[i];\n    }\n\n}\n```\n### 高精度除以低精度\n```\nvoid chu1(string s1,int x){\n    memset(a,0,sizeof(a));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    for(int i=0;i<l1;i++)\n        a[i] = s1[i] - '0';\n        int yu =0;\n    for(int i=0;i<l1;i++){\n        int b =yu*10 +a[i];//b:被除数\n        c[i] = b/x;\n        yu =b % x;\n    }\n    int i =0;\n    while(c[i] ==0)i++;\n    for(;i< l1;i++)\n        cout<<c[i];\n    cout<<endl<<yu;\n\n}\nint main(){\n    int x;\n    cin >>s1>>x;\n    chu1(s1,x);\nreturn 0;\n}\n```\n##1ku\n###鸡兔同笼\n```\n#include<stdio.h>//塞瓦维斯特定理(不定方程)\n//若两数a,b均大于1，且gcd(a,b)等于1（也就是a,b互为素数）。\n//要满足ax+by=c无整数解的最大的c的值为a*b-a-b。\nint main()\n{\n    long long int n, m,k;\n    scanf(\"%lld%lld\",&n,&m);\n    k= n * m - n - m ;\n    printf(\"%lld\\n\",k);\n    return 0;\n}\n```","source":"_posts/nowcoder.md","raw":"---\ntitle: nowcoder\ndate: 2023-10-25 13:30:37\ntags:\n---\n先搞c输入输出（速度快），学java或者python的大数\n## 高精度\n### 加法\n```\n//基本的加减法\n//数倒着写，然后用函数再反过来，倒着写的好处是进位可以直接加在后面\n\n#include<bits/stdc++.h>\nusing namespace std;\nstring s1,s2;//竞赛多追求速度，写成全局变量不写含参函数可以提高代码运行速度\nint a[1000],b[1000],c[1000];\n/*void fanzhuan(string s1){\n    int l = s1.length();\n    for(int i = 0,j = l-1; i < j;i++,j--){\n        swap(s[i],s[j]);\n    }\n}*/ //手动反转可以被reverse代替\nvoid jiafa(){\n    memset(a,0,sizeof(a));//给数组赋初值，这样严谨。不是只能0，-1，主要是这B 8 位一赋值，转成32位可能不一样，有的时候会赋0x7f（0111111101111111111111，很接近int的最大值，不用0xff是因为1111111111111111111是负数，但是0x7f在进行加法的时候容易变成负数，所以最常用的是0x3f 00111111100111111111111，这是个很大的值。\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    int l2 = s2.length();\n    //int l = max(s1,s2);//如果l1,l2长度不一致就GG了，所以就不传参了，直接三个数组存。\n    for(int i = 0;i <l1;i++)\n        a[i] = s1[i] -'0';//这样可以直接用减去0的asccl码的办法把S1从string 变成int.\n    for(int i =0; i<l2;i++)\n        b[i] = s2[i] - '0';\n    int l = max(l1,l2);\n    for(int i = 0; i<l;i++){\n        c[i] += a[i]+b[i];\n        if(c[i] >= 10){\n            c[i+1] = c[i]/10;   //进位\n            c[i] %= 10;\n        }\n    }\n    if(c[l]!= 0)\n        l++;           //进位后数组变长\n    for(int i = 0;i<l;i++)\n        cout<<c[i];\n}\nint main(void){\n    cin>>s1>>s2;//检测空格\n    //getline();//可以存在空格\n    reverse(s1.begin(), s1.end());\n    reverse(s2.begin(), s2.end());\n    jiafa();\n return 0;\n}\n```\n### 减法\n```\n//基本的减法\n#include<bits/stdc++.h>\nusing namespace std;\nstring s1,s2;\nint a[1000],b[1000],c[1000];\nbool judge(string s1, string s2){\n    int l1 = s1.length();\n    int l2 = s2.length();\n    if(l1>l2) return 1;\n    if(l1<l2) return 0;\n    for(int i = l1 -1;i>=0;i--){\n        if(s1[i] > s2[i]) return 1;\n        if(s1[i] < s2[i]) return 0;\n    }return 1;\n}\nvoid jian(string s1,string s2){\n    memset(a,0,sizeof(a));//给数组赋初值，这样严谨\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    int l2 = s2.length();\n    for(int i=0;i<l1;i++)\n        a[i] = s1[i] - '0';\n    for(int i =0;i<l2;i++)\n        b[i] = s2[i] - '0';\n    int l =max(l1,l2);\n    for(int i =0;i<l;i++){\n        c[i] += a[i] - b[i];\n        if(c[i] < 0){\n            c[i]+= 10;\n            c[i+1]-=1;//减不够，借一位。\n        }\n    }\n    while(l>1 && c[l-1] == 0)l--; //去掉前面的0，减成0可能有很多，用while,而且不能减没了\n    for(int i = l-1; i>=0;i--){\n        cout<<c[i];\n    }\n}\nint main(){\n    cin >>s1>>s2;\n    reverse(s1.begin(), s1.end());\n    reverse(s2.begin(), s2.end());\n    if(judge(s1,s2) == 1) jian(s1,s2);\n    else{\n        cout<<\"-\";\n        jian(s2,s1);\n    }\nreturn 0;\n}\n```\n### 乘法\n```\nvoid cheng(string s1,string s2){\n    memset(a,0,sizeof(a));\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    int l2 = s2.length();\n    for(int i=0;i<l1;i++)\n        a[i] = s1[i] - '0';\n    for(int i =0;i<l2;i++)\n        b[i] = s2[i] - '0';\n    int l = l1+l2-1;\n    for(int i = 0;i <l1; i++)\n    for(int j =0;j<l2;j++){\n        c[i+j] +=a[i] * b[j];\n    }\n    for(int i =0;i <l;i++){\n        if(c[i] >= 10)\n        {\n            c[i+1] += c[i] /10;//进位\n            c[i]  %=10;\n        }\n    }\n    while(c[l] >0){\n        l++;\n        if(c[l] >= 10){\n            c[l+1] += c[l]/10;//可能l不够了\n            c[l] %=10;\n        }\n    }\n    for(int i = l-1; i>=0;i--){\n        cout<<c[i];\n    }\n\n}\n```\n### 高精度除以低精度\n```\nvoid chu1(string s1,int x){\n    memset(a,0,sizeof(a));\n    memset(c,0,sizeof(c));\n    int l1 = s1.length();\n    for(int i=0;i<l1;i++)\n        a[i] = s1[i] - '0';\n        int yu =0;\n    for(int i=0;i<l1;i++){\n        int b =yu*10 +a[i];//b:被除数\n        c[i] = b/x;\n        yu =b % x;\n    }\n    int i =0;\n    while(c[i] ==0)i++;\n    for(;i< l1;i++)\n        cout<<c[i];\n    cout<<endl<<yu;\n\n}\nint main(){\n    int x;\n    cin >>s1>>x;\n    chu1(s1,x);\nreturn 0;\n}\n```\n##1ku\n###鸡兔同笼\n```\n#include<stdio.h>//塞瓦维斯特定理(不定方程)\n//若两数a,b均大于1，且gcd(a,b)等于1（也就是a,b互为素数）。\n//要满足ax+by=c无整数解的最大的c的值为a*b-a-b。\nint main()\n{\n    long long int n, m,k;\n    scanf(\"%lld%lld\",&n,&m);\n    k= n * m - n - m ;\n    printf(\"%lld\\n\",k);\n    return 0;\n}\n```","slug":"nowcoder","published":1,"updated":"2023-11-29T01:43:36.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpr0005rcuk3kyk2htd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>先搞c输入输出（速度快），学java或者python的大数</p>\n<h2 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h2><h3 id=\"加法\"><a href=\"#加法\" class=\"headerlink\" title=\"加法\"></a>加法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//基本的加减法</span><br><span class=\"hljs-comment\">//数倒着写，然后用函数再反过来，倒着写的好处是进位可以直接加在后面</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>string s1,s2;<span class=\"hljs-comment\">//竞赛多追求速度，写成全局变量不写含参函数可以提高代码运行速度</span><br><span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">1000</span>],b[<span class=\"hljs-number\">1000</span>],c[<span class=\"hljs-number\">1000</span>];<br><span class=\"hljs-comment\">/*void fanzhuan(string s1)&#123;</span><br><span class=\"hljs-comment\">    int l = s1.length();</span><br><span class=\"hljs-comment\">    for(int i = 0,j = l-1; i &lt; j;i++,j--)&#123;</span><br><span class=\"hljs-comment\">        swap(s[i],s[j]);</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">&#125;*/</span> <span class=\"hljs-comment\">//手动反转可以被reverse代替</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">jiafa</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(a,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">sizeof</span>(a));<span class=\"hljs-comment\">//给数组赋初值，这样严谨。不是只能0，-1，主要是这B 8 位一赋值，转成32位可能不一样，有的时候会赋0x7f（0111111101111111111111，很接近int的最大值，不用0xff是因为1111111111111111111是负数，但是0x7f在进行加法的时候容易变成负数，所以最常用的是0x3f 00111111100111111111111，这是个很大的值。</span><br>    <span class=\"hljs-built_in\">memset</span>(b,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">sizeof</span>(b));<br>    <span class=\"hljs-built_in\">memset</span>(c,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">sizeof</span>(c));<br>    <span class=\"hljs-type\">int</span> l1 = s1.<span class=\"hljs-built_in\">length</span>();<br>    <span class=\"hljs-type\">int</span> l2 = s2.<span class=\"hljs-built_in\">length</span>();<br>    <span class=\"hljs-comment\">//int l = max(s1,s2);//如果l1,l2长度不一致就GG了，所以就不传参了，直接三个数组存。</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt;l1;i++)<br>        a[i] = s1[i] -<span class=\"hljs-string\">&#x27;0&#x27;</span>;<span class=\"hljs-comment\">//这样可以直接用减去0的asccl码的办法把S1从string 变成int.</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =<span class=\"hljs-number\">0</span>; i&lt;l2;i++)<br>        b[i] = s2[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-built_in\">max</span>(l1,l2);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;l;i++)&#123;<br>        c[i] += a[i]+b[i];<br>        <span class=\"hljs-keyword\">if</span>(c[i] &gt;= <span class=\"hljs-number\">10</span>)&#123;<br>            c[i+<span class=\"hljs-number\">1</span>] = c[i]/<span class=\"hljs-number\">10</span>;   <span class=\"hljs-comment\">//进位</span><br>            c[i] %= <span class=\"hljs-number\">10</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(c[l]!= <span class=\"hljs-number\">0</span>)<br>        l++;           <span class=\"hljs-comment\">//进位后数组变长</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i&lt;l;i++)<br>        cout&lt;&lt;c[i];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    cin&gt;&gt;s1&gt;&gt;s2;<span class=\"hljs-comment\">//检测空格</span><br>    <span class=\"hljs-comment\">//getline();//可以存在空格</span><br>    <span class=\"hljs-built_in\">reverse</span>(s1.<span class=\"hljs-built_in\">begin</span>(), s1.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-built_in\">reverse</span>(s2.<span class=\"hljs-built_in\">begin</span>(), s2.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-built_in\">jiafa</span>();<br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"减法\"><a href=\"#减法\" class=\"headerlink\" title=\"减法\"></a>减法</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//基本的减法<br><span class=\"hljs-meta\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"hljs-keyword\">using</span> namespace std;<br>string s1,s2;<br><span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">1000</span>],b[<span class=\"hljs-number\">1000</span>],c[<span class=\"hljs-number\">1000</span>];<br><span class=\"hljs-type\">bool</span> judge(string s1, string s2)&#123;<br>    <span class=\"hljs-type\">int</span> l1 = s1.length();<br>    <span class=\"hljs-type\">int</span> l2 = s2.length();<br>    <span class=\"hljs-keyword\">if</span>(l1&gt;l2) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span>(l1&lt;l2) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = l1 <span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i<span class=\"hljs-comment\">--)&#123;</span><br>        <span class=\"hljs-keyword\">if</span>(s1[i] &gt; s2[i]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span>(s1[i] &lt; s2[i]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-type\">void</span> jian(string s1,string s2)&#123;<br>    memset(a,<span class=\"hljs-number\">0</span>,sizeof(a));//给数组赋初值，这样严谨<br>    memset(b,<span class=\"hljs-number\">0</span>,sizeof(b));<br>    memset(c,<span class=\"hljs-number\">0</span>,sizeof(c));<br>    <span class=\"hljs-type\">int</span> l1 = s1.length();<br>    <span class=\"hljs-type\">int</span> l2 = s2.length();<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;l2;i++)<br>        b[i] = s2[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    <span class=\"hljs-type\">int</span> l =max(l1,l2);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;l;i++)&#123;<br>        c[i] += a[i] - b[i];<br>        <span class=\"hljs-keyword\">if</span>(c[i] &lt; <span class=\"hljs-number\">0</span>)&#123;<br>            c[i]+= <span class=\"hljs-number\">10</span>;<br>            c[i+<span class=\"hljs-number\">1</span>]-=<span class=\"hljs-number\">1</span>;//减不够，借一位。<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span>(l&gt;<span class=\"hljs-number\">1</span> &amp;&amp; c[l<span class=\"hljs-number\">-1</span>] == <span class=\"hljs-number\">0</span>)l<span class=\"hljs-comment\">--; //去掉前面的0，减成0可能有很多，用while,而且不能减没了</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = l<span class=\"hljs-number\">-1</span>; i&gt;=<span class=\"hljs-number\">0</span>;i<span class=\"hljs-comment\">--)&#123;</span><br>        cout&lt;&lt;c[i];<br>    &#125;<br>&#125;<br><span class=\"hljs-type\">int</span> main()&#123;<br>    cin &gt;&gt;s1&gt;&gt;s2;<br>    reverse(s1.<span class=\"hljs-keyword\">begin</span>(), s1.<span class=\"hljs-keyword\">end</span>());<br>    reverse(s2.<span class=\"hljs-keyword\">begin</span>(), s2.<span class=\"hljs-keyword\">end</span>());<br>    <span class=\"hljs-keyword\">if</span>(judge(s1,s2) == <span class=\"hljs-number\">1</span>) jian(s1,s2);<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;&quot;-&quot;;<br>        jian(s2,s1);<br>    &#125;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"乘法\"><a href=\"#乘法\" class=\"headerlink\" title=\"乘法\"></a>乘法</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\">void cheng(string s1,string s2)&#123;<br>    memset(a,<span class=\"hljs-number\">0</span>,sizeof(a));<br>    memset(b,<span class=\"hljs-number\">0</span>,sizeof(b));<br>    memset(c,<span class=\"hljs-number\">0</span>,sizeof(c));<br>    int l1 = s1.length();<br>    int l2 = s2.length();<br>    for(int i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    for(int i =<span class=\"hljs-number\">0</span>;i&lt;l2;i++)<br>        b[i] = s2[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    int l = l1+l2<span class=\"hljs-number\">-1</span>;<br>    for(int i = <span class=\"hljs-number\">0</span>;i &lt;l1; i++)<br>    for(int j =<span class=\"hljs-number\">0</span>;j&lt;l2;j++)&#123;<br>        c[i+j] +=a[i] * b[j];<br>    &#125;<br>    for(int i =<span class=\"hljs-number\">0</span>;i &lt;l;i++)&#123;<br>        if(c[i] &gt;= <span class=\"hljs-number\">10</span>)<br>        &#123;<br>            c[i+<span class=\"hljs-number\">1</span>] += c[i] /<span class=\"hljs-number\">10</span>;//进位<br>            c[i]  <span class=\"hljs-comment\">%=10;</span><br>        &#125;<br>    &#125;<br>    while(c[l] &gt;<span class=\"hljs-number\">0</span>)&#123;<br>        l++;<br>        if(c[l] &gt;= <span class=\"hljs-number\">10</span>)&#123;<br>            c[l+<span class=\"hljs-number\">1</span>] += c[l]/<span class=\"hljs-number\">10</span>;//可能l不够了<br>            c[l] <span class=\"hljs-comment\">%=10;</span><br>        &#125;<br>    &#125;<br>    for(int i = l<span class=\"hljs-number\">-1</span>; i&gt;=<span class=\"hljs-number\">0</span>;i--)&#123;<br>        cout&lt;&lt;c[i];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"高精度除以低精度\"><a href=\"#高精度除以低精度\" class=\"headerlink\" title=\"高精度除以低精度\"></a>高精度除以低精度</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">chu1</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s1,<span class=\"hljs-built_in\">int</span> x</span>)</span>&#123;<br>    memset(a,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(a));<br>    memset(c,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(c));<br>    <span class=\"hljs-built_in\">int</span> l1 = s1.length();<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>        <span class=\"hljs-built_in\">int</span> yu =<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)&#123;<br>        <span class=\"hljs-built_in\">int</span> b =yu*<span class=\"hljs-number\">10</span> +a[i];<span class=\"hljs-comment\">//b:被除数</span><br>        c[i] = b/x;<br>        yu =b % x;<br>    &#125;<br>    <span class=\"hljs-built_in\">int</span> i =<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(c[i] ==<span class=\"hljs-number\">0</span>)i++;<br>    <span class=\"hljs-keyword\">for</span>(;i&lt; l1;i++)<br>        cout&lt;&lt;c[i];<br>    cout&lt;&lt;endl&lt;&lt;yu;<br><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span>&#123;<br>    <span class=\"hljs-built_in\">int</span> x;<br>    cin &gt;&gt;s1&gt;&gt;x;<br>    chu1(s1,x);<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##1ku<br>###鸡兔同笼</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span><span class=\"hljs-comment\">//塞瓦维斯特定理(不定方程)</span></span><br><span class=\"hljs-comment\">//若两数a,b均大于1，且gcd(a,b)等于1（也就是a,b互为素数）。</span><br><span class=\"hljs-comment\">//要满足ax+by=c无整数解的最大的c的值为a*b-a-b。</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> n, m,k;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);<br>    k= n * m - n - m ;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lld\\n&quot;</span>,k);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>先搞c输入输出（速度快），学java或者python的大数</p>\n<h2 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h2><h3 id=\"加法\"><a href=\"#加法\" class=\"headerlink\" title=\"加法\"></a>加法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//基本的加减法</span><br><span class=\"hljs-comment\">//数倒着写，然后用函数再反过来，倒着写的好处是进位可以直接加在后面</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>string s1,s2;<span class=\"hljs-comment\">//竞赛多追求速度，写成全局变量不写含参函数可以提高代码运行速度</span><br><span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">1000</span>],b[<span class=\"hljs-number\">1000</span>],c[<span class=\"hljs-number\">1000</span>];<br><span class=\"hljs-comment\">/*void fanzhuan(string s1)&#123;</span><br><span class=\"hljs-comment\">    int l = s1.length();</span><br><span class=\"hljs-comment\">    for(int i = 0,j = l-1; i &lt; j;i++,j--)&#123;</span><br><span class=\"hljs-comment\">        swap(s[i],s[j]);</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">&#125;*/</span> <span class=\"hljs-comment\">//手动反转可以被reverse代替</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">jiafa</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(a,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">sizeof</span>(a));<span class=\"hljs-comment\">//给数组赋初值，这样严谨。不是只能0，-1，主要是这B 8 位一赋值，转成32位可能不一样，有的时候会赋0x7f（0111111101111111111111，很接近int的最大值，不用0xff是因为1111111111111111111是负数，但是0x7f在进行加法的时候容易变成负数，所以最常用的是0x3f 00111111100111111111111，这是个很大的值。</span><br>    <span class=\"hljs-built_in\">memset</span>(b,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">sizeof</span>(b));<br>    <span class=\"hljs-built_in\">memset</span>(c,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">sizeof</span>(c));<br>    <span class=\"hljs-type\">int</span> l1 = s1.<span class=\"hljs-built_in\">length</span>();<br>    <span class=\"hljs-type\">int</span> l2 = s2.<span class=\"hljs-built_in\">length</span>();<br>    <span class=\"hljs-comment\">//int l = max(s1,s2);//如果l1,l2长度不一致就GG了，所以就不传参了，直接三个数组存。</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt;l1;i++)<br>        a[i] = s1[i] -<span class=\"hljs-string\">&#x27;0&#x27;</span>;<span class=\"hljs-comment\">//这样可以直接用减去0的asccl码的办法把S1从string 变成int.</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =<span class=\"hljs-number\">0</span>; i&lt;l2;i++)<br>        b[i] = s2[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-built_in\">max</span>(l1,l2);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;l;i++)&#123;<br>        c[i] += a[i]+b[i];<br>        <span class=\"hljs-keyword\">if</span>(c[i] &gt;= <span class=\"hljs-number\">10</span>)&#123;<br>            c[i+<span class=\"hljs-number\">1</span>] = c[i]/<span class=\"hljs-number\">10</span>;   <span class=\"hljs-comment\">//进位</span><br>            c[i] %= <span class=\"hljs-number\">10</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(c[l]!= <span class=\"hljs-number\">0</span>)<br>        l++;           <span class=\"hljs-comment\">//进位后数组变长</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;i&lt;l;i++)<br>        cout&lt;&lt;c[i];<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    cin&gt;&gt;s1&gt;&gt;s2;<span class=\"hljs-comment\">//检测空格</span><br>    <span class=\"hljs-comment\">//getline();//可以存在空格</span><br>    <span class=\"hljs-built_in\">reverse</span>(s1.<span class=\"hljs-built_in\">begin</span>(), s1.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-built_in\">reverse</span>(s2.<span class=\"hljs-built_in\">begin</span>(), s2.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-built_in\">jiafa</span>();<br> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"减法\"><a href=\"#减法\" class=\"headerlink\" title=\"减法\"></a>减法</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//基本的减法<br><span class=\"hljs-meta\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"hljs-keyword\">using</span> namespace std;<br>string s1,s2;<br><span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">1000</span>],b[<span class=\"hljs-number\">1000</span>],c[<span class=\"hljs-number\">1000</span>];<br><span class=\"hljs-type\">bool</span> judge(string s1, string s2)&#123;<br>    <span class=\"hljs-type\">int</span> l1 = s1.length();<br>    <span class=\"hljs-type\">int</span> l2 = s2.length();<br>    <span class=\"hljs-keyword\">if</span>(l1&gt;l2) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span>(l1&lt;l2) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = l1 <span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i<span class=\"hljs-comment\">--)&#123;</span><br>        <span class=\"hljs-keyword\">if</span>(s1[i] &gt; s2[i]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span>(s1[i] &lt; s2[i]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-type\">void</span> jian(string s1,string s2)&#123;<br>    memset(a,<span class=\"hljs-number\">0</span>,sizeof(a));//给数组赋初值，这样严谨<br>    memset(b,<span class=\"hljs-number\">0</span>,sizeof(b));<br>    memset(c,<span class=\"hljs-number\">0</span>,sizeof(c));<br>    <span class=\"hljs-type\">int</span> l1 = s1.length();<br>    <span class=\"hljs-type\">int</span> l2 = s2.length();<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;l2;i++)<br>        b[i] = s2[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    <span class=\"hljs-type\">int</span> l =max(l1,l2);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =<span class=\"hljs-number\">0</span>;i&lt;l;i++)&#123;<br>        c[i] += a[i] - b[i];<br>        <span class=\"hljs-keyword\">if</span>(c[i] &lt; <span class=\"hljs-number\">0</span>)&#123;<br>            c[i]+= <span class=\"hljs-number\">10</span>;<br>            c[i+<span class=\"hljs-number\">1</span>]-=<span class=\"hljs-number\">1</span>;//减不够，借一位。<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span>(l&gt;<span class=\"hljs-number\">1</span> &amp;&amp; c[l<span class=\"hljs-number\">-1</span>] == <span class=\"hljs-number\">0</span>)l<span class=\"hljs-comment\">--; //去掉前面的0，减成0可能有很多，用while,而且不能减没了</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = l<span class=\"hljs-number\">-1</span>; i&gt;=<span class=\"hljs-number\">0</span>;i<span class=\"hljs-comment\">--)&#123;</span><br>        cout&lt;&lt;c[i];<br>    &#125;<br>&#125;<br><span class=\"hljs-type\">int</span> main()&#123;<br>    cin &gt;&gt;s1&gt;&gt;s2;<br>    reverse(s1.<span class=\"hljs-keyword\">begin</span>(), s1.<span class=\"hljs-keyword\">end</span>());<br>    reverse(s2.<span class=\"hljs-keyword\">begin</span>(), s2.<span class=\"hljs-keyword\">end</span>());<br>    <span class=\"hljs-keyword\">if</span>(judge(s1,s2) == <span class=\"hljs-number\">1</span>) jian(s1,s2);<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;&quot;-&quot;;<br>        jian(s2,s1);<br>    &#125;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"乘法\"><a href=\"#乘法\" class=\"headerlink\" title=\"乘法\"></a>乘法</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs prolog\">void cheng(string s1,string s2)&#123;<br>    memset(a,<span class=\"hljs-number\">0</span>,sizeof(a));<br>    memset(b,<span class=\"hljs-number\">0</span>,sizeof(b));<br>    memset(c,<span class=\"hljs-number\">0</span>,sizeof(c));<br>    int l1 = s1.length();<br>    int l2 = s2.length();<br>    for(int i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    for(int i =<span class=\"hljs-number\">0</span>;i&lt;l2;i++)<br>        b[i] = s2[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>    int l = l1+l2<span class=\"hljs-number\">-1</span>;<br>    for(int i = <span class=\"hljs-number\">0</span>;i &lt;l1; i++)<br>    for(int j =<span class=\"hljs-number\">0</span>;j&lt;l2;j++)&#123;<br>        c[i+j] +=a[i] * b[j];<br>    &#125;<br>    for(int i =<span class=\"hljs-number\">0</span>;i &lt;l;i++)&#123;<br>        if(c[i] &gt;= <span class=\"hljs-number\">10</span>)<br>        &#123;<br>            c[i+<span class=\"hljs-number\">1</span>] += c[i] /<span class=\"hljs-number\">10</span>;//进位<br>            c[i]  <span class=\"hljs-comment\">%=10;</span><br>        &#125;<br>    &#125;<br>    while(c[l] &gt;<span class=\"hljs-number\">0</span>)&#123;<br>        l++;<br>        if(c[l] &gt;= <span class=\"hljs-number\">10</span>)&#123;<br>            c[l+<span class=\"hljs-number\">1</span>] += c[l]/<span class=\"hljs-number\">10</span>;//可能l不够了<br>            c[l] <span class=\"hljs-comment\">%=10;</span><br>        &#125;<br>    &#125;<br>    for(int i = l<span class=\"hljs-number\">-1</span>; i&gt;=<span class=\"hljs-number\">0</span>;i--)&#123;<br>        cout&lt;&lt;c[i];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"高精度除以低精度\"><a href=\"#高精度除以低精度\" class=\"headerlink\" title=\"高精度除以低精度\"></a>高精度除以低精度</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">chu1</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s1,<span class=\"hljs-built_in\">int</span> x</span>)</span>&#123;<br>    memset(a,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(a));<br>    memset(c,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(c));<br>    <span class=\"hljs-built_in\">int</span> l1 = s1.length();<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)<br>        a[i] = s1[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>        <span class=\"hljs-built_in\">int</span> yu =<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l1;i++)&#123;<br>        <span class=\"hljs-built_in\">int</span> b =yu*<span class=\"hljs-number\">10</span> +a[i];<span class=\"hljs-comment\">//b:被除数</span><br>        c[i] = b/x;<br>        yu =b % x;<br>    &#125;<br>    <span class=\"hljs-built_in\">int</span> i =<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(c[i] ==<span class=\"hljs-number\">0</span>)i++;<br>    <span class=\"hljs-keyword\">for</span>(;i&lt; l1;i++)<br>        cout&lt;&lt;c[i];<br>    cout&lt;&lt;endl&lt;&lt;yu;<br><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>()</span>&#123;<br>    <span class=\"hljs-built_in\">int</span> x;<br>    cin &gt;&gt;s1&gt;&gt;x;<br>    chu1(s1,x);<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##1ku<br>###鸡兔同笼</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span><span class=\"hljs-comment\">//塞瓦维斯特定理(不定方程)</span></span><br><span class=\"hljs-comment\">//若两数a,b均大于1，且gcd(a,b)等于1（也就是a,b互为素数）。</span><br><span class=\"hljs-comment\">//要满足ax+by=c无整数解的最大的c的值为a*b-a-b。</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> n, m,k;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);<br>    k= n * m - n - m ;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lld\\n&quot;</span>,k);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"stl","date":"2023-10-19T03:24:26.000Z","_content":"---\ntitle: stl_learn\ncover: OIP.jpeg\ntags:\n---\n\n##stl fundemental\n```动态数组\nint *p = new int[n]\n```\n加大储存空间：\n1.新申请一个较大的内存空间，即执行\n```\nint * temp = new int[m];\n```\n2.将原内存空间的数据全部复制到新申请的内存空间中，即执行\n```\nmemecpy(temp, p, sizeof(int)*n);\n```\n3.将原来的堆空间释放，即执行\n```\ndelete [] p; p = temp;\n```\n当采用stl向量模板类vector实现以上功能：\n```\nvector <int> a; //定义 a 数组，当前数组长度为 0，但和普通数组不同的是，此数组 a 可以根据存储数据的数量自动变长。\n//向数组 a 中添加 10 个元素\nfor (int i = 0; i < 10 ; i++)\n    a.push_back(i)\n//还可以手动调整数组 a 的大小\na.resize(100);\na[90] = 100;\n//还可以直接删除数组 a 中所有的元素，此时 a 的长度变为 0\na.clear();\n//重新调整 a 的大小为 20，并存储 20 个 -1 元素。\na.resize(20, -1)\n```\npush_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。\nsize( ) 函数显示向量的大小。\nbegin( ) 函数返回一个指向向量开头的迭代器。\nend( ) 函数返回一个指向向量末尾的迭代器。\n###泛型\n```\nT maxt(T x, T y){\n      return (x>y)?x :y;\n}\n```\nT 是占位符，为泛型\n##vector\n```\n#define _CRT_SECURE_NO_WARNINGS\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n \n//STL 中的容器 算法 迭代器\nvoid test01()\n{\n    vector<int> v; //STL 中的标准容器之一 ：动态数组\n    v.push_back(1); //vector 容器提供的插入数据的方法\n    v.push_back(5);\n    v.push_back(3);\n    v.push_back(7);\n    //迭代器\n    vector<int>::iterator pStart = v.begin(); //vector 容器提供了 begin()方法 返回指向第一个元素的迭代器\n    vector<int>::iterator pEnd = v.end(); //vector 容器提供了 end()方法 返回指向最后一个元素下一个位置的迭代器\n    //通过迭代器遍历\n    while (pStart != pEnd){\n        cout << *pStart << \" \";\n        pStart++;\n    }\n    cout << endl;\n    //算法 count 算法 用于统计元素的个数\n    int n = count(pStart, pEnd, 5);\n    cout << \"n:\" << n << endl;\n}\n//STL 容器不单单可以存储基础数据类型，也可以存储类对象\nclass Teacher\n{\npublic:\n    Teacher(int age) :age(age){};\n    ~Teacher(){};\npublic:\n    int age;\n};\nvoid test02(){\n    vector<Teacher> v; //存储 Teacher 类型数据的容器\n    Teacher t1(10), t2(20), t3(30);\n    v.push_back(t1);\n    v.push_back(t2);\n    v.push_back(t3);\n    vector<Teacher>::iterator pStart = v.begin();\n    vector<Teacher>::iterator pEnd = v.end();\n    //通过迭代器遍历\n    while (pStart != pEnd){\n        cout << pStart->age << \" \";\n        pStart++;\n    }\n    cout << endl;\n}\n//存储 Teacher 类型指针\nvoid test03()\n{\n    vector<Teacher*> v; //存储 Teacher 类型指针\n    Teacher* t1 = new Teacher(10);\n    Teacher* t2 = new Teacher(20);\n    Teacher* t3 = new Teacher(30);\n    v.push_back(t1);\n    v.push_back(t2);\n    v.push_back(t3);\n    //拿到容器迭代器\n    vector<Teacher*>::iterator pStart = v.begin();\n    vector<Teacher*>::iterator pEnd = v.end();\n    //通过迭代器遍历\n    while (pStart != pEnd){\n        cout << (*pStart)->age << \" \";\n        pStart++;\n    }\n    cout << endl;\n}\n//容器嵌套容器 难点\nvoid test04()\n{\n    vector< vector<int> > v;\n    vector<int>v1;\n    vector<int>v2;\n    vector<int>v3;\n \n    for (int i = 0; i < 5;i++)\n    {\n        v1.push_back(i);\n        v2.push_back(i * 10);\n        v3.push_back(i * 100);\n    }\n    v.push_back(v1);\n    v.push_back(v2);\n    v.push_back(v3);\n \n    for (vector< vector<int> >::iterator it = v.begin(); it != v.end();it++)\n    {\n        for (vector<int>::iterator subIt = (*it).begin(); subIt != (*it).end(); subIt ++)\n        {\n            cout << *subIt << \" \";\n        }\n        cout << endl;\n    }\n} \nint main()\n{\n    //test01();\n    //test02();\n    //test03();\n    test04();\n    system(\"pause\");\n    return EXIT_SUCCESS;\n}\n```\n##deque容器\ndeque容器是连续的空间，至少逻辑上看来如此，连续现行空间总是令我们联想到array和vector,array无法成长，vector虽可成长，却只能向尾端成长，而且其成长其实是一个假象，事实上(1) 申请更大空间 (2)原数据复制新空间 (3)释放原空间 三步骤，如果不是vector每次配置新的空间时都留有余裕，其成长假象所带来的代价是非常昂贵的。\n\ndeque是由一段一段的定量的连续空间构成。一旦有必要在deque前端或者尾端增加新的空间，便配置一段连续定量的空间，串接在deque的头端或者尾端。Deque最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口，避开了重新配置空间，复制，释放的轮回，代价就是复杂的迭代器架构。\n既然deque是分段连续内存空间，那么就必须有中央控制，维持整体连续的假象，数据结构的设计及迭代器的前进后退操作颇为繁琐。Deque代码的实现远比vector或list都多得多。\n\n![](./stl/1.png)\n![](2.png)\n![](3.png)\n![](4.png)\n![](5.png)\n\n##stack\n![](stack1.png)\n\n## queue\n![](queue1.png)\n\n##list\n双向链表\n```\n#include<algorithm>\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct ListNode\n{\n\tint data;\n\tListNode* next;//结构体指针\n};\nvoid Listprintf(ListNode* phead)\n{\n\tListNode* cur=phead;\n\twhile (cur != NULL)\n\t{\n\t\tcout << cur->data << \"->\";\n\t\tcur = cur->next;\n\t}\n}\nvoid Listpushback(ListNode** pphead, int x)\n{\n\tListNode* newnode = new ListNode{ x,NULL };\n\tif (*pphead == NULL)\n\t{\n\t\t*pphead = newnode;\n\t}\n\telse\n\t{\n\t\tListNode* tail=  *pphead;\n\t\twhile(tail->next != NULL)\n\t\t{\n\t\t\ttail = tail->next;\n\t\t}\n\t\ttail->next = newnode;\n\t}\n}\nvoid test_1()\n{\n\tListNode* phead = NULL;\n\tListpushback(&phead, 1);\n\tListpushback(&phead, 2);\n\tListpushback(&phead, 3); \n\tListprintf(phead);\n}\nint main()\n{\n\ttest_1();\n\treturn 0;\n}\n```\n\n##二叉树\n```\n//二叉树的节点\nclass Linknode\n{\npublic：\n    linknode(); //构造函数\n    int data;\n    Linknode* left; //左节点\n    Linknode* right;  //右节点\t\n};\nLinknode::linknode()\n{\n\tleft =NULL;\n\tright =Null;\n}\nclass Tree\n{\n\tLinknode* root; //创建二叉树的根\n\t\n}\n```\n##map\nmap的特性是，所有元素都会根据元素的键值自动排序。\nmap所有的元素都是关联的,同时拥有实值和键值（key,value），第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值.\nmap中的key是唯一的。集合中元素按照一定顺序排列。元素的插入按照规则插入我，所以不能指定插入位置。\nmap的底层是红黑树的变体，平衡二叉树。在插入操作、删除和检索上要比vector快很多。\nmap可以直接存取key所对应的value，支持[]操作符，如map[key]=value.\n#include<map>\nmap支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符\n###map和set的区别是：\nMap对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。\nSet对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n","source":"_posts/stl.md","raw":"---\ntitle: stl\ndate: 2023-10-19 11:24:26\ntags:\n---\n---\ntitle: stl_learn\ncover: OIP.jpeg\ntags:\n---\n\n##stl fundemental\n```动态数组\nint *p = new int[n]\n```\n加大储存空间：\n1.新申请一个较大的内存空间，即执行\n```\nint * temp = new int[m];\n```\n2.将原内存空间的数据全部复制到新申请的内存空间中，即执行\n```\nmemecpy(temp, p, sizeof(int)*n);\n```\n3.将原来的堆空间释放，即执行\n```\ndelete [] p; p = temp;\n```\n当采用stl向量模板类vector实现以上功能：\n```\nvector <int> a; //定义 a 数组，当前数组长度为 0，但和普通数组不同的是，此数组 a 可以根据存储数据的数量自动变长。\n//向数组 a 中添加 10 个元素\nfor (int i = 0; i < 10 ; i++)\n    a.push_back(i)\n//还可以手动调整数组 a 的大小\na.resize(100);\na[90] = 100;\n//还可以直接删除数组 a 中所有的元素，此时 a 的长度变为 0\na.clear();\n//重新调整 a 的大小为 20，并存储 20 个 -1 元素。\na.resize(20, -1)\n```\npush_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。\nsize( ) 函数显示向量的大小。\nbegin( ) 函数返回一个指向向量开头的迭代器。\nend( ) 函数返回一个指向向量末尾的迭代器。\n###泛型\n```\nT maxt(T x, T y){\n      return (x>y)?x :y;\n}\n```\nT 是占位符，为泛型\n##vector\n```\n#define _CRT_SECURE_NO_WARNINGS\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n \n//STL 中的容器 算法 迭代器\nvoid test01()\n{\n    vector<int> v; //STL 中的标准容器之一 ：动态数组\n    v.push_back(1); //vector 容器提供的插入数据的方法\n    v.push_back(5);\n    v.push_back(3);\n    v.push_back(7);\n    //迭代器\n    vector<int>::iterator pStart = v.begin(); //vector 容器提供了 begin()方法 返回指向第一个元素的迭代器\n    vector<int>::iterator pEnd = v.end(); //vector 容器提供了 end()方法 返回指向最后一个元素下一个位置的迭代器\n    //通过迭代器遍历\n    while (pStart != pEnd){\n        cout << *pStart << \" \";\n        pStart++;\n    }\n    cout << endl;\n    //算法 count 算法 用于统计元素的个数\n    int n = count(pStart, pEnd, 5);\n    cout << \"n:\" << n << endl;\n}\n//STL 容器不单单可以存储基础数据类型，也可以存储类对象\nclass Teacher\n{\npublic:\n    Teacher(int age) :age(age){};\n    ~Teacher(){};\npublic:\n    int age;\n};\nvoid test02(){\n    vector<Teacher> v; //存储 Teacher 类型数据的容器\n    Teacher t1(10), t2(20), t3(30);\n    v.push_back(t1);\n    v.push_back(t2);\n    v.push_back(t3);\n    vector<Teacher>::iterator pStart = v.begin();\n    vector<Teacher>::iterator pEnd = v.end();\n    //通过迭代器遍历\n    while (pStart != pEnd){\n        cout << pStart->age << \" \";\n        pStart++;\n    }\n    cout << endl;\n}\n//存储 Teacher 类型指针\nvoid test03()\n{\n    vector<Teacher*> v; //存储 Teacher 类型指针\n    Teacher* t1 = new Teacher(10);\n    Teacher* t2 = new Teacher(20);\n    Teacher* t3 = new Teacher(30);\n    v.push_back(t1);\n    v.push_back(t2);\n    v.push_back(t3);\n    //拿到容器迭代器\n    vector<Teacher*>::iterator pStart = v.begin();\n    vector<Teacher*>::iterator pEnd = v.end();\n    //通过迭代器遍历\n    while (pStart != pEnd){\n        cout << (*pStart)->age << \" \";\n        pStart++;\n    }\n    cout << endl;\n}\n//容器嵌套容器 难点\nvoid test04()\n{\n    vector< vector<int> > v;\n    vector<int>v1;\n    vector<int>v2;\n    vector<int>v3;\n \n    for (int i = 0; i < 5;i++)\n    {\n        v1.push_back(i);\n        v2.push_back(i * 10);\n        v3.push_back(i * 100);\n    }\n    v.push_back(v1);\n    v.push_back(v2);\n    v.push_back(v3);\n \n    for (vector< vector<int> >::iterator it = v.begin(); it != v.end();it++)\n    {\n        for (vector<int>::iterator subIt = (*it).begin(); subIt != (*it).end(); subIt ++)\n        {\n            cout << *subIt << \" \";\n        }\n        cout << endl;\n    }\n} \nint main()\n{\n    //test01();\n    //test02();\n    //test03();\n    test04();\n    system(\"pause\");\n    return EXIT_SUCCESS;\n}\n```\n##deque容器\ndeque容器是连续的空间，至少逻辑上看来如此，连续现行空间总是令我们联想到array和vector,array无法成长，vector虽可成长，却只能向尾端成长，而且其成长其实是一个假象，事实上(1) 申请更大空间 (2)原数据复制新空间 (3)释放原空间 三步骤，如果不是vector每次配置新的空间时都留有余裕，其成长假象所带来的代价是非常昂贵的。\n\ndeque是由一段一段的定量的连续空间构成。一旦有必要在deque前端或者尾端增加新的空间，便配置一段连续定量的空间，串接在deque的头端或者尾端。Deque最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口，避开了重新配置空间，复制，释放的轮回，代价就是复杂的迭代器架构。\n既然deque是分段连续内存空间，那么就必须有中央控制，维持整体连续的假象，数据结构的设计及迭代器的前进后退操作颇为繁琐。Deque代码的实现远比vector或list都多得多。\n\n![](./stl/1.png)\n![](2.png)\n![](3.png)\n![](4.png)\n![](5.png)\n\n##stack\n![](stack1.png)\n\n## queue\n![](queue1.png)\n\n##list\n双向链表\n```\n#include<algorithm>\n#include<iostream>\n#include<vector>\nusing namespace std;\nstruct ListNode\n{\n\tint data;\n\tListNode* next;//结构体指针\n};\nvoid Listprintf(ListNode* phead)\n{\n\tListNode* cur=phead;\n\twhile (cur != NULL)\n\t{\n\t\tcout << cur->data << \"->\";\n\t\tcur = cur->next;\n\t}\n}\nvoid Listpushback(ListNode** pphead, int x)\n{\n\tListNode* newnode = new ListNode{ x,NULL };\n\tif (*pphead == NULL)\n\t{\n\t\t*pphead = newnode;\n\t}\n\telse\n\t{\n\t\tListNode* tail=  *pphead;\n\t\twhile(tail->next != NULL)\n\t\t{\n\t\t\ttail = tail->next;\n\t\t}\n\t\ttail->next = newnode;\n\t}\n}\nvoid test_1()\n{\n\tListNode* phead = NULL;\n\tListpushback(&phead, 1);\n\tListpushback(&phead, 2);\n\tListpushback(&phead, 3); \n\tListprintf(phead);\n}\nint main()\n{\n\ttest_1();\n\treturn 0;\n}\n```\n\n##二叉树\n```\n//二叉树的节点\nclass Linknode\n{\npublic：\n    linknode(); //构造函数\n    int data;\n    Linknode* left; //左节点\n    Linknode* right;  //右节点\t\n};\nLinknode::linknode()\n{\n\tleft =NULL;\n\tright =Null;\n}\nclass Tree\n{\n\tLinknode* root; //创建二叉树的根\n\t\n}\n```\n##map\nmap的特性是，所有元素都会根据元素的键值自动排序。\nmap所有的元素都是关联的,同时拥有实值和键值（key,value），第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值.\nmap中的key是唯一的。集合中元素按照一定顺序排列。元素的插入按照规则插入我，所以不能指定插入位置。\nmap的底层是红黑树的变体，平衡二叉树。在插入操作、删除和检索上要比vector快很多。\nmap可以直接存取key所对应的value，支持[]操作符，如map[key]=value.\n#include<map>\nmap支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符\n###map和set的区别是：\nMap对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。\nSet对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n","slug":"stl","published":1,"updated":"2023-10-19T03:42:21.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujps0006rcuk1e310yhk","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><hr>\n<h2 id=\"title-stl-learncover-OIP-jpegtags\"><a href=\"#title-stl-learncover-OIP-jpegtags\" class=\"headerlink\" title=\"title: stl_learncover: OIP.jpegtags:\"></a>title: stl_learn<br>cover: OIP.jpeg<br>tags:</h2><p>##stl fundemental</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 动态数组\">int *p = new int[n]<br></code></pre></td></tr></table></figure>\n<p>加大储存空间：<br>1.新申请一个较大的内存空间，即执行</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-type\">int</span> * <span class=\"hljs-keyword\">temp</span> = <span class=\"hljs-built_in\">new</span> <span class=\"hljs-type\">int</span>[m];<br></code></pre></td></tr></table></figure>\n<p>2.将原内存空间的数据全部复制到新申请的内存空间中，即执行</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">memecpy(temp, p, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-built_in\">int</span>)*n);<br></code></pre></td></tr></table></figure>\n<p>3.将原来的堆空间释放，即执行</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">delete</span> [] p; <span class=\"hljs-attribute\">p</span> = temp;<br></code></pre></td></tr></table></figure>\n<p>当采用stl向量模板类vector实现以上功能：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">vector &lt;int&gt; a; <span class=\"hljs-regexp\">//</span>定义 a 数组，当前数组长度为 <span class=\"hljs-number\">0</span>，但和普通数组不同的是，此数组 a 可以根据存储数据的数量自动变长。<br><span class=\"hljs-regexp\">//</span>向数组 a 中添加 <span class=\"hljs-number\">10</span> 个元素<br><span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span> ; i++)<br>    a.push_back(i)<br><span class=\"hljs-regexp\">//</span>还可以手动调整数组 a 的大小<br>a.resize(<span class=\"hljs-number\">100</span>);<br>a[<span class=\"hljs-number\">90</span>] = <span class=\"hljs-number\">100</span>;<br><span class=\"hljs-regexp\">//</span>还可以直接删除数组 a 中所有的元素，此时 a 的长度变为 <span class=\"hljs-number\">0</span><br>a.clear();<br><span class=\"hljs-regexp\">//</span>重新调整 a 的大小为 <span class=\"hljs-number\">20</span>，并存储 <span class=\"hljs-number\">20</span> 个 -<span class=\"hljs-number\">1</span> 元素。<br>a.resize(<span class=\"hljs-number\">20</span>, -<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n<p>push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。<br>size( ) 函数显示向量的大小。<br>begin( ) 函数返回一个指向向量开头的迭代器。<br>end( ) 函数返回一个指向向量末尾的迭代器。<br>###泛型</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs r\"><span class=\"hljs-built_in\">T</span> maxt<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">T</span> x<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">T</span> y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-built_in\">return</span> <span class=\"hljs-punctuation\">(</span>x<span class=\"hljs-operator\">&gt;</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">?</span>x <span class=\"hljs-operator\">:</span>y;<br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>T 是占位符，为泛型<br>##vector</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">#define _CRT_SECURE_NO_WARNINGS<br>#<span class=\"hljs-keyword\">include</span>&lt;iostream&gt;<br>#<span class=\"hljs-keyword\">include</span>&lt;vector&gt;<br>#<span class=\"hljs-keyword\">include</span>&lt;algorithm&gt;<br>using namespace std;<br> <br><span class=\"hljs-comment\">//STL 中的容器 算法 迭代器</span><br>void test01<span class=\"hljs-literal\">()</span><br>&#123;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt; v; <span class=\"hljs-comment\">//STL 中的标准容器之一 ：动态数组</span><br>    v.push<span class=\"hljs-constructor\">_back(1)</span>; <span class=\"hljs-comment\">//vector 容器提供的插入数据的方法</span><br>    v.push<span class=\"hljs-constructor\">_back(5)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(3)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(7)</span>;<br>    <span class=\"hljs-comment\">//迭代器</span><br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;::iterator pStart = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>; <span class=\"hljs-comment\">//vector 容器提供了 begin()方法 返回指向第一个元素的迭代器</span><br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;::iterator pEnd = v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>; <span class=\"hljs-comment\">//vector 容器提供了 end()方法 返回指向最后一个元素下一个位置的迭代器</span><br>    <span class=\"hljs-comment\">//通过迭代器遍历</span><br>    <span class=\"hljs-keyword\">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; *pStart &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class=\"hljs-comment\">//算法 count 算法 用于统计元素的个数</span><br>    <span class=\"hljs-built_in\">int</span> n = count(pStart, pEnd, <span class=\"hljs-number\">5</span>);<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;n:&quot;</span> &lt;&lt; n &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-comment\">//STL 容器不单单可以存储基础数据类型，也可以存储类对象</span><br><span class=\"hljs-keyword\">class</span> Teacher<br>&#123;<br>public:<br>    <span class=\"hljs-constructor\">Teacher(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">age</span>)</span> :age(age)&#123;&#125;;<br>    ~<span class=\"hljs-constructor\">Teacher()</span>&#123;&#125;;<br>public:<br>    <span class=\"hljs-built_in\">int</span> age;<br>&#125;;<br>void test02<span class=\"hljs-literal\">()</span>&#123;<br>    vector&lt;Teacher&gt; v; <span class=\"hljs-comment\">//存储 Teacher 类型数据的容器</span><br>    Teacher t1(<span class=\"hljs-number\">10</span>), t2(<span class=\"hljs-number\">20</span>), t3(<span class=\"hljs-number\">30</span>);<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t1</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t2</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t3</span>)</span>;<br>    vector&lt;Teacher&gt;::iterator pStart = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>;<br>    vector&lt;Teacher&gt;::iterator pEnd = v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>;<br>    <span class=\"hljs-comment\">//通过迭代器遍历</span><br>    <span class=\"hljs-keyword\">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; pStart-&gt;age &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-comment\">//存储 Teacher 类型指针</span><br>void test03<span class=\"hljs-literal\">()</span><br>&#123;<br>    vector&lt;Teacher*&gt; v; <span class=\"hljs-comment\">//存储 Teacher 类型指针</span><br>    Teacher* t1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Teacher(10)</span>;<br>    Teacher* t2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Teacher(20)</span>;<br>    Teacher* t3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Teacher(30)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t1</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t2</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t3</span>)</span>;<br>    <span class=\"hljs-comment\">//拿到容器迭代器</span><br>    vector&lt;Teacher*&gt;::iterator pStart = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>;<br>    vector&lt;Teacher*&gt;::iterator pEnd = v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>;<br>    <span class=\"hljs-comment\">//通过迭代器遍历</span><br>    <span class=\"hljs-keyword\">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; (*pStart)-&gt;age &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-comment\">//容器嵌套容器 难点</span><br>void test04<span class=\"hljs-literal\">()</span><br>&#123;<br>    vector&lt; vector&lt;<span class=\"hljs-built_in\">int</span>&gt; &gt; v;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;v1;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;v2;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;v3;<br> <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>;i++)<br>    &#123;<br>        v1.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">i</span>)</span>;<br>        v2.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">i</span> <span class=\"hljs-operator\">*</span> 10)</span>;<br>        v3.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">i</span> <span class=\"hljs-operator\">*</span> 100)</span>;<br>    &#125;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">v1</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">v2</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">v3</span>)</span>;<br> <br>    <span class=\"hljs-keyword\">for</span> (vector&lt; vector&lt;<span class=\"hljs-built_in\">int</span>&gt; &gt;::iterator it = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>; it != v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>;it++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (vector&lt;<span class=\"hljs-built_in\">int</span>&gt;::iterator subIt = (*it).<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>; subIt != (*it).<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>; subIt ++)<br>        &#123;<br>            cout &lt;&lt; *subIt &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125; <br><span class=\"hljs-built_in\">int</span> main<span class=\"hljs-literal\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//test01();</span><br>    <span class=\"hljs-comment\">//test02();</span><br>    <span class=\"hljs-comment\">//test03();</span><br>    test04<span class=\"hljs-literal\">()</span>;<br>    system(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>    return EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##deque容器<br>deque容器是连续的空间，至少逻辑上看来如此，连续现行空间总是令我们联想到array和vector,array无法成长，vector虽可成长，却只能向尾端成长，而且其成长其实是一个假象，事实上(1) 申请更大空间 (2)原数据复制新空间 (3)释放原空间 三步骤，如果不是vector每次配置新的空间时都留有余裕，其成长假象所带来的代价是非常昂贵的。</p>\n<p>deque是由一段一段的定量的连续空间构成。一旦有必要在deque前端或者尾端增加新的空间，便配置一段连续定量的空间，串接在deque的头端或者尾端。Deque最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口，避开了重新配置空间，复制，释放的轮回，代价就是复杂的迭代器架构。<br>既然deque是分段连续内存空间，那么就必须有中央控制，维持整体连续的假象，数据结构的设计及迭代器的前进后退操作颇为繁琐。Deque代码的实现远比vector或list都多得多。</p>\n<p><img src=\"/./stl/1.png\"><br><img src=\"/2.png\"><br><img src=\"/3.png\"><br><img src=\"/4.png\"><br><img src=\"/5.png\"></p>\n<p>##stack<br><img src=\"/stack1.png\"></p>\n<h2 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h2><p><img src=\"/queue1.png\"></p>\n<p>##list<br>双向链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ListNode</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> data;<br>\tListNode* next;<span class=\"hljs-comment\">//结构体指针</span><br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Listprintf</span><span class=\"hljs-params\">(ListNode* phead)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tListNode* cur=phead;<br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tcout &lt;&lt; cur-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;-&gt;&quot;</span>;<br>\t\tcur = cur-&gt;next;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Listpushback</span><span class=\"hljs-params\">(ListNode** pphead, <span class=\"hljs-type\">int</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tListNode* newnode = <span class=\"hljs-keyword\">new</span> ListNode&#123; x,<span class=\"hljs-literal\">NULL</span> &#125;;<br>\t<span class=\"hljs-keyword\">if</span> (*pphead == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t*pphead = newnode;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\tListNode* tail=  *pphead;<br>\t\t<span class=\"hljs-keyword\">while</span>(tail-&gt;next != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\ttail = tail-&gt;next;<br>\t\t&#125;<br>\t\ttail-&gt;next = newnode;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_1</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tListNode* phead = <span class=\"hljs-literal\">NULL</span>;<br>\t<span class=\"hljs-built_in\">Listpushback</span>(&amp;phead, <span class=\"hljs-number\">1</span>);<br>\t<span class=\"hljs-built_in\">Listpushback</span>(&amp;phead, <span class=\"hljs-number\">2</span>);<br>\t<span class=\"hljs-built_in\">Listpushback</span>(&amp;phead, <span class=\"hljs-number\">3</span>); <br>\t<span class=\"hljs-built_in\">Listprintf</span>(phead);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">test_1</span>();<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>##二叉树</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">//二叉树的节点</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Linknode</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>：<br>    linknode(); <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-built_in\">int</span> data;<br>    Linknode* left; <span class=\"hljs-comment\">//左节点</span><br>    Linknode* right;  <span class=\"hljs-comment\">//右节点\t</span><br>&#125;;<br>Linknode::linknode()<br>&#123;<br>\tleft =NULL;<br>\tright =Null;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Tree</span><br>&#123;<br>\tLinknode* root; <span class=\"hljs-comment\">//创建二叉树的根</span><br>\t<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##map<br>map的特性是，所有元素都会根据元素的键值自动排序。<br>map所有的元素都是关联的,同时拥有实值和键值（key,value），第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值.<br>map中的key是唯一的。集合中元素按照一定顺序排列。元素的插入按照规则插入我，所以不能指定插入位置。<br>map的底层是红黑树的变体，平衡二叉树。在插入操作、删除和检索上要比vector快很多。<br>map可以直接存取key所对应的value，支持[]操作符，如map[key]&#x3D;value.<br>#include<map><br>map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符<br>###map和set的区别是：<br>Map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。<br>Set对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"title-stl-learncover-OIP-jpegtags\"><a href=\"#title-stl-learncover-OIP-jpegtags\" class=\"headerlink\" title=\"title: stl_learncover: OIP.jpegtags:\"></a>title: stl_learn<br>cover: OIP.jpeg<br>tags:</h2><p>##stl fundemental</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 动态数组\">int *p = new int[n]<br></code></pre></td></tr></table></figure>\n<p>加大储存空间：<br>1.新申请一个较大的内存空间，即执行</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-type\">int</span> * <span class=\"hljs-keyword\">temp</span> = <span class=\"hljs-built_in\">new</span> <span class=\"hljs-type\">int</span>[m];<br></code></pre></td></tr></table></figure>\n<p>2.将原内存空间的数据全部复制到新申请的内存空间中，即执行</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">memecpy(temp, p, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-built_in\">int</span>)*n);<br></code></pre></td></tr></table></figure>\n<p>3.将原来的堆空间释放，即执行</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">delete</span> [] p; <span class=\"hljs-attribute\">p</span> = temp;<br></code></pre></td></tr></table></figure>\n<p>当采用stl向量模板类vector实现以上功能：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">vector &lt;int&gt; a; <span class=\"hljs-regexp\">//</span>定义 a 数组，当前数组长度为 <span class=\"hljs-number\">0</span>，但和普通数组不同的是，此数组 a 可以根据存储数据的数量自动变长。<br><span class=\"hljs-regexp\">//</span>向数组 a 中添加 <span class=\"hljs-number\">10</span> 个元素<br><span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span> ; i++)<br>    a.push_back(i)<br><span class=\"hljs-regexp\">//</span>还可以手动调整数组 a 的大小<br>a.resize(<span class=\"hljs-number\">100</span>);<br>a[<span class=\"hljs-number\">90</span>] = <span class=\"hljs-number\">100</span>;<br><span class=\"hljs-regexp\">//</span>还可以直接删除数组 a 中所有的元素，此时 a 的长度变为 <span class=\"hljs-number\">0</span><br>a.clear();<br><span class=\"hljs-regexp\">//</span>重新调整 a 的大小为 <span class=\"hljs-number\">20</span>，并存储 <span class=\"hljs-number\">20</span> 个 -<span class=\"hljs-number\">1</span> 元素。<br>a.resize(<span class=\"hljs-number\">20</span>, -<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n<p>push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。<br>size( ) 函数显示向量的大小。<br>begin( ) 函数返回一个指向向量开头的迭代器。<br>end( ) 函数返回一个指向向量末尾的迭代器。<br>###泛型</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs r\"><span class=\"hljs-built_in\">T</span> maxt<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">T</span> x<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">T</span> y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-built_in\">return</span> <span class=\"hljs-punctuation\">(</span>x<span class=\"hljs-operator\">&gt;</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">?</span>x <span class=\"hljs-operator\">:</span>y;<br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>T 是占位符，为泛型<br>##vector</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">#define _CRT_SECURE_NO_WARNINGS<br>#<span class=\"hljs-keyword\">include</span>&lt;iostream&gt;<br>#<span class=\"hljs-keyword\">include</span>&lt;vector&gt;<br>#<span class=\"hljs-keyword\">include</span>&lt;algorithm&gt;<br>using namespace std;<br> <br><span class=\"hljs-comment\">//STL 中的容器 算法 迭代器</span><br>void test01<span class=\"hljs-literal\">()</span><br>&#123;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt; v; <span class=\"hljs-comment\">//STL 中的标准容器之一 ：动态数组</span><br>    v.push<span class=\"hljs-constructor\">_back(1)</span>; <span class=\"hljs-comment\">//vector 容器提供的插入数据的方法</span><br>    v.push<span class=\"hljs-constructor\">_back(5)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(3)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(7)</span>;<br>    <span class=\"hljs-comment\">//迭代器</span><br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;::iterator pStart = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>; <span class=\"hljs-comment\">//vector 容器提供了 begin()方法 返回指向第一个元素的迭代器</span><br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;::iterator pEnd = v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>; <span class=\"hljs-comment\">//vector 容器提供了 end()方法 返回指向最后一个元素下一个位置的迭代器</span><br>    <span class=\"hljs-comment\">//通过迭代器遍历</span><br>    <span class=\"hljs-keyword\">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; *pStart &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class=\"hljs-comment\">//算法 count 算法 用于统计元素的个数</span><br>    <span class=\"hljs-built_in\">int</span> n = count(pStart, pEnd, <span class=\"hljs-number\">5</span>);<br>    cout &lt;&lt; <span class=\"hljs-string\">&quot;n:&quot;</span> &lt;&lt; n &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-comment\">//STL 容器不单单可以存储基础数据类型，也可以存储类对象</span><br><span class=\"hljs-keyword\">class</span> Teacher<br>&#123;<br>public:<br>    <span class=\"hljs-constructor\">Teacher(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">age</span>)</span> :age(age)&#123;&#125;;<br>    ~<span class=\"hljs-constructor\">Teacher()</span>&#123;&#125;;<br>public:<br>    <span class=\"hljs-built_in\">int</span> age;<br>&#125;;<br>void test02<span class=\"hljs-literal\">()</span>&#123;<br>    vector&lt;Teacher&gt; v; <span class=\"hljs-comment\">//存储 Teacher 类型数据的容器</span><br>    Teacher t1(<span class=\"hljs-number\">10</span>), t2(<span class=\"hljs-number\">20</span>), t3(<span class=\"hljs-number\">30</span>);<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t1</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t2</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t3</span>)</span>;<br>    vector&lt;Teacher&gt;::iterator pStart = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>;<br>    vector&lt;Teacher&gt;::iterator pEnd = v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>;<br>    <span class=\"hljs-comment\">//通过迭代器遍历</span><br>    <span class=\"hljs-keyword\">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; pStart-&gt;age &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-comment\">//存储 Teacher 类型指针</span><br>void test03<span class=\"hljs-literal\">()</span><br>&#123;<br>    vector&lt;Teacher*&gt; v; <span class=\"hljs-comment\">//存储 Teacher 类型指针</span><br>    Teacher* t1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Teacher(10)</span>;<br>    Teacher* t2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Teacher(20)</span>;<br>    Teacher* t3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Teacher(30)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t1</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t2</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">t3</span>)</span>;<br>    <span class=\"hljs-comment\">//拿到容器迭代器</span><br>    vector&lt;Teacher*&gt;::iterator pStart = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>;<br>    vector&lt;Teacher*&gt;::iterator pEnd = v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>;<br>    <span class=\"hljs-comment\">//通过迭代器遍历</span><br>    <span class=\"hljs-keyword\">while</span> (pStart != pEnd)&#123;<br>        cout &lt;&lt; (*pStart)-&gt;age &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        pStart++;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class=\"hljs-comment\">//容器嵌套容器 难点</span><br>void test04<span class=\"hljs-literal\">()</span><br>&#123;<br>    vector&lt; vector&lt;<span class=\"hljs-built_in\">int</span>&gt; &gt; v;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;v1;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;v2;<br>    vector&lt;<span class=\"hljs-built_in\">int</span>&gt;v3;<br> <br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>;i++)<br>    &#123;<br>        v1.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">i</span>)</span>;<br>        v2.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">i</span> <span class=\"hljs-operator\">*</span> 10)</span>;<br>        v3.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">i</span> <span class=\"hljs-operator\">*</span> 100)</span>;<br>    &#125;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">v1</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">v2</span>)</span>;<br>    v.push<span class=\"hljs-constructor\">_back(<span class=\"hljs-params\">v3</span>)</span>;<br> <br>    <span class=\"hljs-keyword\">for</span> (vector&lt; vector&lt;<span class=\"hljs-built_in\">int</span>&gt; &gt;::iterator it = v.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>; it != v.<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>;it++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (vector&lt;<span class=\"hljs-built_in\">int</span>&gt;::iterator subIt = (*it).<span class=\"hljs-keyword\">begin</span><span class=\"hljs-literal\">()</span>; subIt != (*it).<span class=\"hljs-keyword\">end</span><span class=\"hljs-literal\">()</span>; subIt ++)<br>        &#123;<br>            cout &lt;&lt; *subIt &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125; <br><span class=\"hljs-built_in\">int</span> main<span class=\"hljs-literal\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//test01();</span><br>    <span class=\"hljs-comment\">//test02();</span><br>    <span class=\"hljs-comment\">//test03();</span><br>    test04<span class=\"hljs-literal\">()</span>;<br>    system(<span class=\"hljs-string\">&quot;pause&quot;</span>);<br>    return EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##deque容器<br>deque容器是连续的空间，至少逻辑上看来如此，连续现行空间总是令我们联想到array和vector,array无法成长，vector虽可成长，却只能向尾端成长，而且其成长其实是一个假象，事实上(1) 申请更大空间 (2)原数据复制新空间 (3)释放原空间 三步骤，如果不是vector每次配置新的空间时都留有余裕，其成长假象所带来的代价是非常昂贵的。</p>\n<p>deque是由一段一段的定量的连续空间构成。一旦有必要在deque前端或者尾端增加新的空间，便配置一段连续定量的空间，串接在deque的头端或者尾端。Deque最大的工作就是维护这些分段连续的内存空间的整体性的假象，并提供随机存取的接口，避开了重新配置空间，复制，释放的轮回，代价就是复杂的迭代器架构。<br>既然deque是分段连续内存空间，那么就必须有中央控制，维持整体连续的假象，数据结构的设计及迭代器的前进后退操作颇为繁琐。Deque代码的实现远比vector或list都多得多。</p>\n<p><img src=\"/./stl/1.png\"><br><img src=\"/2.png\"><br><img src=\"/3.png\"><br><img src=\"/4.png\"><br><img src=\"/5.png\"></p>\n<p>##stack<br><img src=\"/stack1.png\"></p>\n<h2 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h2><p><img src=\"/queue1.png\"></p>\n<p>##list<br>双向链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ListNode</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> data;<br>\tListNode* next;<span class=\"hljs-comment\">//结构体指针</span><br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Listprintf</span><span class=\"hljs-params\">(ListNode* phead)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tListNode* cur=phead;<br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tcout &lt;&lt; cur-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;-&gt;&quot;</span>;<br>\t\tcur = cur-&gt;next;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Listpushback</span><span class=\"hljs-params\">(ListNode** pphead, <span class=\"hljs-type\">int</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tListNode* newnode = <span class=\"hljs-keyword\">new</span> ListNode&#123; x,<span class=\"hljs-literal\">NULL</span> &#125;;<br>\t<span class=\"hljs-keyword\">if</span> (*pphead == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t*pphead = newnode;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\tListNode* tail=  *pphead;<br>\t\t<span class=\"hljs-keyword\">while</span>(tail-&gt;next != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\ttail = tail-&gt;next;<br>\t\t&#125;<br>\t\ttail-&gt;next = newnode;<br>\t&#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_1</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tListNode* phead = <span class=\"hljs-literal\">NULL</span>;<br>\t<span class=\"hljs-built_in\">Listpushback</span>(&amp;phead, <span class=\"hljs-number\">1</span>);<br>\t<span class=\"hljs-built_in\">Listpushback</span>(&amp;phead, <span class=\"hljs-number\">2</span>);<br>\t<span class=\"hljs-built_in\">Listpushback</span>(&amp;phead, <span class=\"hljs-number\">3</span>); <br>\t<span class=\"hljs-built_in\">Listprintf</span>(phead);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">test_1</span>();<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>##二叉树</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">//二叉树的节点</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Linknode</span><br>&#123;<br><span class=\"hljs-keyword\">public</span>：<br>    linknode(); <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-built_in\">int</span> data;<br>    Linknode* left; <span class=\"hljs-comment\">//左节点</span><br>    Linknode* right;  <span class=\"hljs-comment\">//右节点\t</span><br>&#125;;<br>Linknode::linknode()<br>&#123;<br>\tleft =NULL;<br>\tright =Null;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Tree</span><br>&#123;<br>\tLinknode* root; <span class=\"hljs-comment\">//创建二叉树的根</span><br>\t<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>##map<br>map的特性是，所有元素都会根据元素的键值自动排序。<br>map所有的元素都是关联的,同时拥有实值和键值（key,value），第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值.<br>map中的key是唯一的。集合中元素按照一定顺序排列。元素的插入按照规则插入我，所以不能指定插入位置。<br>map的底层是红黑树的变体，平衡二叉树。在插入操作、删除和检索上要比vector快很多。<br>map可以直接存取key所对应的value，支持[]操作符，如map[key]&#x3D;value.<br>#include<map><br>map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符<br>###map和set的区别是：<br>Map对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。构造函数Map可以接受一个数组作为参数。<br>Set对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n"},{"title":"test_ima","date":"2023-09-22T05:34:02.000Z","_content":"！[](108879310_p0_square1200.jpg)","source":"_posts/test-ima.md","raw":"---\ntitle: test_ima\ndate: 2023-09-22 13:34:02\ntags:\n---\n！[](108879310_p0_square1200.jpg)","slug":"test-ima","published":1,"updated":"2023-09-22T08:06:43.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpt0007rcukddt5fu3a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>！<a href=\"108879310_p0_square1200.jpg\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>！<a href=\"108879310_p0_square1200.jpg\"></a></p>\n"},{"title":"testpage","_content":"���Ĳ���","source":"_drafts/testpage.md","raw":"---\ntitle: testpage\n\n---\n���Ĳ���","slug":"testpage","published":0,"date":"2023-09-19T13:58:20.420Z","updated":"2023-09-19T13:58:51.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpu0008rcuk64xng1v8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>���Ĳ���</p>\n","site":{"data":{}},"excerpt":"","more":"<p>���Ĳ���</p>\n"},{"title":"hexo","_content":"## solution and methods\n###draft\n```\nhexo new draft newpage\nhexo server --draft\nhexo publish draft newpage\n\n```\n中文乱码问题：改zh-CN,改utf-8.","source":"_drafts/hexo.md","raw":"---\ntitle: hexo\n\ntags:\n---\n## solution and methods\n###draft\n```\nhexo new draft newpage\nhexo server --draft\nhexo publish draft newpage\n\n```\n中文乱码问题：改zh-CN,改utf-8.","slug":"hexo","published":0,"date":"2023-09-19T14:07:33.009Z","updated":"2023-09-22T05:11:48.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpj3ujpv0009rcuke3vwcfy7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"solution-and-methods\"><a href=\"#solution-and-methods\" class=\"headerlink\" title=\"solution and methods\"></a>solution and methods</h2><p>###draft</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">draft</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">page</span><br>hexo server --draft<br>hexo publish draft <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">page</span><br><br></code></pre></td></tr></table></figure>\n<p>中文乱码问题：改zh-CN,改utf-8.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"solution-and-methods\"><a href=\"#solution-and-methods\" class=\"headerlink\" title=\"solution and methods\"></a>solution and methods</h2><p>###draft</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">draft</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">page</span><br>hexo server --draft<br>hexo publish draft <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">page</span><br><br></code></pre></td></tr></table></figure>\n<p>中文乱码问题：改zh-CN,改utf-8.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}